name: "Integration tests"

on:
  pull_request: # TODO: remove this once the ck3-tiger validation step works
  release:
    types: [published]

concurrency:
  group: ci-integration-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  run_test_conversions:
    runs-on: [self-hosted, windows]
    strategy:
      fail-fast: false
      matrix:
        save_url:
          # 2.0 vanilla
          - https://www.dropbox.com/scl/fi/jvb6s0zm02r3v30w09mzs/453.12.28-Dumnoniens.rome?rlkey=98y1jcscjy76mhva3m5qtyvid&st=khop16qy&dl=1  # 453.12.28 - Dumnoniens.rome
          # 2.0 with mods
          # TODO: reenable these once the ck3-tiger validation step works
          # - https://www.dropbox.com/scl/fi/whvbcjeojipt2ysqbwcp2/848.7.14-Indian-Empire-2.rome?rlkey=xqm0a0t24rbf8vkuepwrbezqt&st=gq3avjck&dl=1  # 848.7.14 - Indian Empire - 2.rome, uploaded 2024-06-30
          # - https://www.dropbox.com/scl/fi/xya8828ceb4h3ls3dixjc/Grande-Campagne.rome?rlkey=bjihvjtdnwtzlju95o7ekkpbm&st=txoi1lk2&dl=1  # Grande Campagne.rome, uploaded 2024-09-11
          # - https://www.dropbox.com/scl/fi/q22wnjljvcjev6yem0kp2/Roman-Empire-Convert-Save-2.rome?rlkey=15vxn4wvrzn1fde14qn6zqvfu&st=59s2cgj7&dl=1  # Roman Empire Convert Save 2.rome, uploaded 2024-09-23
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    - name: "Check if docs folders exist"
      run: |
        ls "C:\Users\Administrator\Documents\Paradox Interactive\Imperator"
        ls "C:\Users\Administrator\Documents\Paradox Interactive\Imperator\mod"
        ls "C:\Users\Administrator\Documents\Paradox Interactive\Crusader Kings III\mod"
    # - name: "Setup Dotnet for use with actions"
    #   uses: actions/setup-dotnet@v4
    #   with:
    #     global-json-file: global.json
    - name: "Build converter backend"
      working-directory: ImperatorToCK3
      run: |
        dotnet build -c:Release
    - name: "Download I:R save from Dropbox"
      run: |
        Invoke-WebRequest -Uri "${{ matrix.save_url }}" -OutFile "save.rome"
    - name: "Create configuration.txt"
      working-directory: Release/ImperatorToCK3
      run: |
        echo 'ImperatorDirectory = "C:\Program Files (x86)\Steam\steamapps\common\ImperatorRome"' > configuration.txt
        echo 'ImperatorDocDirectory = "C:\Users\Administrator\Documents\Paradox Interactive\Imperator"' >> configuration.txt
        echo 'CK3directory = "C:\Program Files (x86)\Steam\steamapps\common\Crusader Kings III"' >> configuration.txt
        echo 'targetGameModPath = "C:\Users\Administrator\Documents\Paradox Interactive\Crusader Kings III\mod"' >> configuration.txt
        echo 'SaveGame = "../../save.rome"' >> configuration.txt
        echo 'SkipDynamicCoAExtraction = 1' >> configuration.txt
        echo 'output_name = "test_save"' >> configuration.txt
        cat configuration.txt
    - name: "Run conversion"
      working-directory: Release/ImperatorToCK3
      run: |
        dotnet ImperatorToCK3Converter.dll

    - name: Checkout kaiser-chris/tiger-action-public
      uses: actions/checkout@v4.2.2
      with:
        repository: kaiser-chris/tiger-action-public
        ref: 'main'
        path: 'validation'

    - name: "Validate generated mod with ck3-tiger"
      uses: ./validation/
      with:
        update-tiger: true
        # Relative path to the mod directory from repository root (defaults to repository root directory)
        mod-directory: 'Release/ImperatorToCK3/output/test_save'
        # Relative path to the validation action repository root (defaults to repository root directory)
        action-directory: 'validation'
        # Which game files should be used for validation (ck3 or vic3 but defaults to vic3) 
        game: 'ck3'

    - name: "Cleanup"
      if: always()
      run: |
        function Remove-ItemWithRetry {
            param (
                [string]$Path,
                [int]$Retries = 5,
                [int]$Delay = 2000
            )
            for ($i = 0; $i -lt $Retries; $i++) {
                try {
                    Remove-Item -Path $Path -Force -Recurse
                    Write-Host "Successfully deleted $Path"
                    return
                } catch {
                    Write-Host "Attempt $($i+1) failed: $_"
                    Start-Sleep -Milliseconds $Delay
                }
            }
            throw "Failed to delete $Path after $Retries attempts"
        }

        Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Recurse -Force | ForEach-Object {
            Remove-ItemWithRetry -Path $_.FullName
        }

