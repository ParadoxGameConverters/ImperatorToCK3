# This file contains blocks from CK3 files that can be removed.
# The structure is as follows:

# <file name> = {
# 	{
#          # comments are supported inside
#          some = code
#   }
# 	{
#          some code
# 	                some code with other indent
#   }
# }

# INDENTATION IS IMPORTANT!
# ASIDE FROM THE CURLY BRACKETS SURROUNDING THE BLOCK, IT MUST MATCH THE ORIGINAL FILE.
# OTHERWISE THE BLOCK WON'T BE REMOVED!

"common/on_action/yearly_on_actions.txt" = {
	{
			# FP2 - Checks to start El Cid's Travels
			if = {
				limit = { # Am I El Cid?
					has_fp2_dlc_trigger = yes
					has_ep3_dlc_trigger = no
					this = character:107590
					NOT = { has_character_flag = has_already_begun_travelling } # Separate first check, for performance

					NOT = { # Start date employer is either dead or gone
						OR = {
							top_liege = character:107500
							liege = character:107500
							employer = character:107500
						}
					}
					is_available_healthy_ai_adult = yes # Am I ready to go on an adventure?
				}
				trigger_event = fp2_struggle.2045
			}
	}
	{
		250 = fp3_yearly.8020 # The Lady of the Land
	}
	{
					modifier = {
						add = 30
						exists = character:125501 # Temüjin
						character:125501 = {
							is_physically_able_ai_adult = yes
						}
					}
	}
}

"common/on_action/death.txt" = {
	{
		# Fix gods-damned Bavaria splitting from East Francia in an ugly fashion in 867.
		if = {
			limit = {
				# Make sure we're looking at the right guy & that the circumstances haven't changed too much.
				this = character:90107
				highest_held_title_tier = tier_kingdom
				has_realm_law = confederate_partition_succession_law
				# Bavaria should be in a fit state for interfering with the handout order.
				title:k_bavaria = {
					OR = {
						is_title_created = no
						holder = root
					}
					any_in_de_jure_hierarchy = {
						tier = tier_county
						# More than 50%.
						count >= 22
						holder = {
							any_liege_or_above = { this = root }
						}
					}
				}
				NOT = { has_primary_title = title:k_bavaria }
				# Players can sort this themselves: you just need to have Bavaria as your primary title and it's all fine.
				is_ai = yes
			}
			# If we've got no Bavaria, create it.
			if = {
				limit = {
					title:k_bavaria = { is_title_created = no }
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
				}
				title:k_bavaria = {
					change_title_holder = {
						holder = root
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			# Then switch around.
			set_primary_title_to = title:k_bavaria
		}
	}
	
	{
		# EP3, Hasan story cycle stuff
		if = {
			limit = {
				root = character:3096
			}
			save_scope_as = ismaili_caliph
			character:41702 ?= {
				trigger_event = {
					id = hasan_sabbah.1030
					days = 1
				}
			}
		}
		if = {
			limit = {
				character:41702 ?= {
					any_owned_story = {
						story_type = story_hasan
						var:ultimate_foe ?= root
					}
				}
			}
			character:41702 = {
				random_owned_story = {
					limit = { story_type = story_hasan }
					if = {
						limit = {
							scope:killer = character:41702
						}
						hasan_sabbah_end_war = {
							HASAN = character:41702
							SELJUK = root
						}
					}
					else = {
						set_variable = {
							name = ultimate_foe
							value = root.player_heir
						}
					}
				}
			}
		}
	}

	{
		# EP3, Wallada transfers possessions to her heir
		if = {
			limit = {
				root = character:andalusian_0003
				exists = player_heir
			}
			# save Wallada's scope
			save_scope_as = wallada
			random_artifact = {
				limit = {
					has_artifact_modifier = double_moon_modifier
				}
				set_owner = scope:wallada.primary_heir
				save_scope_as = double_moon_book
			}
			primary_heir = {
				trigger_event = {
					id = ep3_story_cycle_violet_poet.0004
					days = 1
				}
			}
		}
	}

	# This delays Mongol Invasion if Temujin dies without e_mongol_empire, removing just in case it causes any issues
	{
		#Tracking whether Genghis is dead or not
		if = {
			limit =	{
				this = character:125501
			}
			set_global_variable = genghis_died
			if = {
				limit = {
					NOT = {
						any_held_title = {
							this = title:e_mongol_empire
						}
					}
				}
				set_global_variable = {
					name = temujin_failed
					value = yes
					years = 50
				}
			}
		}
	}
}

"common/on_action/game_start.txt" = {
	# events
	{		fp1_scandinavian_adventurers.0011	# FP1 - Corral famous Norse adventurers that haven't done much yet.}
	{		fp1_scandinavian_adventurers.0021	# FP1 - Mark game-start prioritised adventurers.}
	{		easteregg_event.0001				# Charna and Jakub duel.}
	{		game_rule.1011	#Hungarian Migration management.}
	{
		### 867 - RADHANITES IN KHAZARIA ###
		character:74025 = {
			if = {
				limit = {
					is_alive = yes
					is_playable_character = yes
				}
				trigger_event = bookmark.0200
			}
		}
	}
	{
		### 867 - WRATH OF THE NORTHMEN ###
		#Æthelred dying (probably)
		character:33358 = {
			if = {
				limit = {
					is_alive = yes
					is_playable_character = yes
				}
				trigger_event = {
					id = bookmark.0001
					days = { 365 730 }
				}
			}
		}
	}
	{
		#Alfred the Great becoming the Great
		character:7627 = {
			if = {
				limit = {
					is_alive = yes
					is_playable_character = yes
				}
				trigger_event = {
					id = bookmark.0002
					days = 1800 #~5 years
				}
			}
		}
	}
	{
		### 867 - THE GREAT ADVENTURERS ###
		character:251187 = {
			if = {
				limit = {
					is_alive = yes
					is_playable_character = yes
					AND = {
						character:251180 = { is_ai = yes }
						character:251181 = {
							is_ai = yes
							is_alive = yes
						}
					}
				}
				trigger_event = {
					id = bookmark.0101
					days = { 21 35 }
				}
			}
		}
	}
	{
		# Basileios has just murdered Michael III.
		character:1700 ?= { trigger_event = bookmark.0211 }
	}
# setup
	{
		### 1066 - LOUIS THE GERMAN ###
		if = {
			limit = {
				exists = character:90107
				current_date >= 1066.1.1
			}
			character:90107 = { give_nickname = nick_the_german_post_mortem }
		}
	}
	{
		### 1178 - SIBYLLA ###
		if = {
			limit = {
				exists = character:223522
				current_date >= 1178.1.1
				AND = {
					character:223541 = {
						is_ai = yes
						is_alive = yes
					}
				}
			}
			character:223522 = {
				trigger_event = {
					id = bookmark.0300
					days = { 21 28 }
				}
			}
		}
	}

	# Anachronistic
	{
		### GAME RULE: EXTRA ADMINS
		apply_historic_administrative_game_rule_effect = yes
	}

	# Anachronistic
	{
		### GAME RULE: EXTRA ADMINS
		## We'll be doing some excessive triggers below in a bid to lightly future-proof + error-spam mods less, don't worry about it.
		### We handle players after the lobby.
		# Historic chars.
		apply_historic_administrative_game_rule_effect = yes
		# Players.
		if = {
			limit = { has_dlc_feature = roads_to_power }
			if = {
				limit = {
					NOT = { has_game_rule = historicity_extra_admin_player_wherever_gameplay_not_administrative }
				}
				if = {
					limit = { has_game_rule = historicity_extra_admin_player_wherever_alt_historic_always }
					every_player = {
						limit = {
							highest_held_title_tier >= tier_kingdom
							NOR = {
								government_has_flag = government_is_administrative
								government_has_flag = government_is_landless_adventurer
							}
						}
						convert_to_administrative_from_feudalism_game_start_effect = yes
					}
				}
				else_if = {
					limit = { has_game_rule = historicity_extra_admin_player_wherever_alt_historic_with_august_trait }
					every_player = {
						limit = {
							highest_held_title_tier >= tier_kingdom
							NOR = {
								government_has_flag = government_is_administrative
								government_has_flag = government_is_landless_adventurer
							}
							has_trait = august
						}
						convert_to_administrative_from_feudalism_game_start_effect = yes
					}
				}
			}
		}
	}

	# Anachronistic
	{
		### 1178 CRUSADE SETUP ###
		if = {
			limit = {
				game_start_date >= 1178.10.1
			}
			religion:islam_religion = {
				set_variable = {
					name = variable_ghw_unlocked
					value = yes
				}
			}
			religion:christianity_religion = {
				set_variable = {
					name = variable_ghw_unlocked
					value = yes
				}
			}
			set_global_variable = {
				name = had_first_catholic_crusade
				value = yes
			}
		}
	}

	# Anachronistic
	{
		### Pandidakterion IN CONSTANTINOPLE ###
		if = {
			limit = {
				has_ep3_dlc_trigger = yes
				current_date >= 1046.1.1
			}
			title:c_byzantion = { add_county_modifier = pandidakterion_university_modifier }
		}
	}

	# Anachronistic
	{
		### Varangian Guard ###
		if = {
			limit = {
				has_ep3_dlc_trigger = yes
				current_date >= 988.1.1
			}
			title:e_byzantium = { set_variable = founded_varangian_guard }
		}
	}

	# Anachronistic
	{
		### EP3 BYZANTIUM IMPORTANT COUNTIES ###
		if = {
			limit = { has_ep3_dlc_trigger = yes }
			title:c_antiocheia = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_jerusalem = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_alexandria = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_abbadan = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_edessa = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_bari = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_siracusa = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_roma = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_ravenna = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_tunis = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_tangiers = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_murcia = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_lombardia = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_trier = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_cumberland = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_northumberland = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_chandax = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_tourraine = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = ep3_emperor_yearly.2000
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = ep3_emperor_yearly.2000
				}
			}
			title:c_byzantion = {
				set_important_location = {
					title = title:e_byzantium
					enter_realm_event = roman_restoration.1200
				}
				set_important_location = {
					title = title:e_roman_empire
					enter_realm_event = roman_restoration.1200
				}
			}
		}
	}

	# Anachronistic
	{
		### GAME RULE: DETERMINISTIC CONQUEST
		if = {
			limit = {
				OR = {
					NOT = { has_game_rule = historicity_norman_conquest_default_random }
					game_rule_rig_norman_conquest_for_hereward_trigger = yes
				}
			}
			set_global_variable = deterministic_conquest_of_england_1066
			# See if we should just teleport our combatants' armies into place.
			trigger_event = {
				id = game_rule.1151
				trigger_on_next_date = 1066.09.25
			}
			trigger_event = {
				id = game_rule.1152
				trigger_on_next_date = 1066.10.14
			}
		}
	}

	{
		if = {
			limit = {
				game_start_date >= 1067.12.25
			}
			title:k_england = { set_coa = k_england_norman}
		}
	}
	
	{
		### GAME RULE: RULER OF MUNSTER
		if = {
			limit = {
				game_start_date = 1066.9.15
				has_game_rule = historicity_ruler_of_munster_historical_toirdelbach
			}
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = title_change
			}
			character:83355 = {
				every_held_title = {
					limit = { tier >= tier_county }
					change_title_holder = {
						holder = character:906
						change = scope:title_change
					}
				}
				pay_short_term_gold = {
					target = character:83355
					gold = gold
				}
			}
			random_player = {
				limit = { this = character:83355 }
				set_player_character = character:906
			}
			resolve_title_and_vassal_change = scope:title_change
			# Since Murchad is back to his historical self, he gets to suck.
			character:83355 = {
				add_diplomacy_skill = -10
				remove_trait = gregarious
				add_trait = craven
				# Plus, usurpation rivalry — now Toidelbach has a perfectly good claim to the kingdom and will do a lot more with it than Murchad managed in his 5m in power, but by gameplay terms, this _is_ a usurpation.
				set_relation_rival = {
					target = character:906
					reason = rival_usurper
				}
			}
			# Alright, let's give Toirdelbach his alliance.
			character:906 = {
				add_opinion = {
					modifier = perk_negotiated_alliance_opinion
					target = character:922
				}
				reverse_add_opinion = {
					modifier = event_negotiated_alliance_opinion
					target = character:922
				}
				create_alliance = {
					target = character:922
					allied_through_owner = character:906
					allied_through_target = character:922
				}
			}
		}
	}
	
	{
		if = {
			limit = {
				game_start_date >= 1178.10.1
			}
			character:st_amand_1 = {
				save_scope_as = leader
			}
			character:223523 = {
				save_scope_as = founder
			}
			title:b_saida = {
				save_scope_as = barony
			}
			create_holy_order_neutral_effect = {
				LEADER = scope:leader
				CAPITAL = scope:barony
				NEW_HO_SCOPE = new_holy_order
				FOUNDER = scope:founder
			}
		}
		if = {
			limit = {
				game_start_date >= 1178.10.1
			}
			character:231000 = {
				save_scope_as = leader_1
			}
			character:223523 = {
				save_scope_as = founder_1
			}
			title:b_hebron = {
				save_scope_as = barony_1
			}
			create_holy_order_neutral_effect = {
				LEADER = scope:leader_1
				CAPITAL = scope:barony_1
				NEW_HO_SCOPE = new_holy_order
				FOUNDER = scope:founder_1
			}
		}
	}
	{
		# UNITY CONFIG
		## 867.
		if = {
			limit = { game_start_date = 867.1.1 }
			# Twiddle some starting unities.
			## The Abassids are in the middle of a self-killing frenzy, so we lower theirs substantially.
			house:house_abbasid ?= {
				add_unity_value = {
					value = -100
					# This is from historical circumstances, so we just do use the house head.
					character = house_head
					desc = clan_unity_historical_circumstances.desc
				}
			}
			## The Samanids are juuuuust about to get started on killing each other over who gets to lead Transoxiana.
			house:house_samanid ?= {
				add_unity_value = {
					value = -40
					# This is from historical circumstances, so we just do use the house head.
					character = house_head
					desc = clan_unity_historical_circumstances.desc
				}
			}
			## The Afrighids (both of them) are having fairly few arguments because only one of them can speak and it's very easy to manage relations with a baby.
			dynasty:1042112.dynast.house ?= {
				add_unity_value = {
					value = 50
					# This is from historical circumstances, so we just do use the house head.
					character = house_head
					desc = clan_unity_historical_circumstances.desc
				}
			}
			## The Tahirids are scattered but actually get along quite well and support each other politically (mostly).
			dynasty:811.dynast.house ?= {
				add_unity_value = {
					value = 100
					# This is from historical circumstances, so we just do use the house head.
					character = house_head
					desc = clan_unity_historical_circumstances.desc
				}
			}
			## The Umayyads are having something of a renaissance.
			dynasty:597.dynast.house ?= {
				add_unity_value = {
					value = 100
					# This is from historical circumstances, so we just do use the house head.
					character = house_head
					desc = clan_unity_historical_circumstances.desc
				}
			}
		}
		# LEGITIMACY CONFIG
		## 867.
		if = {
			limit = { game_start_date = 867.1.1 }
			## Basileus Basileios was actually elected, so he's technically legitimate, but starts at level 2. With this he should be level 3.
			character:1700 = {
				add_legitimacy = major_legitimacy_gain
			}
		}
	}
	{
		if = { # Special historical events for Matilda!
			limit = {
				character:7757 ?= { is_alive = yes }
			}
			character:7757 ?= {
				trigger_event = bookmark.1066 # Matildas marriage to her step-brother, with plausible historical options!
				trigger_event = { # Matildas suspected witchcraft, the player decides if its true or not!
					id = bookmark.1067
					years = { 1 5 }
				}
			}
		}
	}
	{
		if = { # Special historical events for Vratislav!
			limit = {
				character:522 ?= { is_alive = yes }
			}
			character:522 ?= {
				trigger_event = { # Vratislav and the Slavic Marches, he didn't historically get them (one briefly, but eh). The player chooses to appease the emperor or go after the coveted lands themselves!
					id = bookmark.1068
					days = { 35 120 }
				}
				trigger_event = { # Jaromir, Vratislav's brother, was a pain - this event is an opportunity for the player to handle the rivalry
					id = bookmark.1069
					days = { 1 29 }
				}
			}
		}
	}
	{
		if = { # Special historical events for Robert the Fox!
			limit = {
				character:1128 ?= { is_alive = yes }
			}
			character:1128 ?= {
				trigger_event = { # A Norman Sicily - Robert historically conquered quite a bit here, the player can choose how far they want to go and the risk they want to take. The more risk, the more event troops/claims.
					id = bookmark.1070
					days = { 35 120 }
				}
				trigger_event = { # The Pretender Monk - Raiktor is a historical character, a monk wo pretended to be a deposed Byzantine emperor which Robert used to beat up Byzantium. Here you can follow historical conquests (taking a bit of the coast) or go full on 'install him as emperor for real'-mode!
					id = bookmark.1071
					years = { 1 7 }
				}
			}
		}
	}
	{
		if = { # Special historical events for Emir Yahya!
			limit = {
				character:3924 ?= { is_alive = yes }
			}
			character:3924 ?= {
				trigger_event = { # Conquering Cordoba - Gain an opportunity to conquer Cordoba while gaining one of two buffs; one intrigue-focused, and one military. Historically he was poisoned after having conquered the city... but that's no fun for the player!
					id = bookmark.1072
					days = { 10 35 }
				}
			}
		}
	}
	{
		# Pre-defined historic regencies setup.
		## NOTE: we do these first to avoid feed messages getting weird due to regents being replaced immediately after getting their position.
		## 867.
		### None. Yet.
		## 1066.
		if = {
			limit = { game_start_date = 1066.9.15 }
			# Designate some regents.
			## King Philippe of France & Duke Boudewijn of Flanders (friend of his dad's)
			character:214 = {
				designate_diarch = character:364
				# Baldwin of Flanders also promised the prior king he'd take care of Philippe, so we add that starting loyalty hook.
				add_hook = {
					type = predecessor_loyalty_hook
					target = character:364
					years = historic_regent_loyal_after_death_hook_duration_years_char_214_value
				}
			}
			### Plus remember who the promise was made to.
			character:364 = {
				add_opinion = {
					target = character:214
					modifier = promise_to_predecessor
					opinion = 50
				}
				set_variable = {
					name = promise_to_predecessor
					value = character:208
					years = historic_regent_loyal_after_death_hook_duration_years_char_214_value
				}
			}
			## Count Bouchard of Vendome & Guy de Bachaumont (his uncle)
			character:40905 = { designate_diarch = character:40376 }
			## Caliph al-Mustansir & Rasad (his mother)
			character:3096 = { designate_diarch = character:additional_fatimids_1 }
			## Count Ermengol of Urgell & Infanta Sancha of Aragon (his stepmother)
			character:110550 = { designate_diarch = character:110514 }
			## Duke Dirk of Holland & Count Robrecht of Zeeland (his stepfather)
			character:106520 = { designate_diarch = character:368 }
			## Duke Sven of Ostergotland & Kol Sverker (his father)
			character:100530 = { designate_diarch = character:100529 }
			## King Salamon of Hungary & Queen Mother Anastasia (his mother, in the absence of any better recorded options, and to keep other hostile relatives out of the job)
			character:476 = { designate_diarch = character:637 }
			## Prince Demetre of Georgia & Alda Oseti (his mother)
			character:9957 = { designate_diarch = character:9956 }
			## Sultan al-Muazzam Alp Arslan and Hassan "the Order of the Realm".
			character:3040 = {
				designate_diarch = character:3050
				# This is a vizierate as well, so start the diarchy manually.
				try_start_diarchy = vizierate
				# Tell Alp that he appointed Hassan so he remembers not to dismiss him.
				set_variable = {
					name = my_vizier
					value = character:3050
				}
			}
			## Constantine X & Michael Doukas.
			character:1732 = {
				if = {
					limit = { has_ep3_dlc_trigger = yes }
					try_start_diarchy = co_emperorship
					set_diarch = character:1736
					set_designated_heir = character:1736
				}
			}
			# Plus remove all the generated opinions.
			## King Philippe of France & Duke Boudewijn of Flanders
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:364
				LIEGE = character:214
			}
			## Count Bouchard of Vendome & Guy de Bachaumont
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:40376
				LIEGE = character:40905
			}
			## Caliph al-Mustansir & Rasad
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:additional_fatimids_1
				LIEGE = character:3096
			}
			## Count Ermengol of Urgell & Infanta Sancha of Aragon
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:110514
				LIEGE = character:110550
			}
			## Duke Dirk of Holland & Count Robrecht of Zeeland
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:368
				LIEGE = character:106520
			}
			## Duke Sven of Ostergotland & Kol Sverker
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:100529
				LIEGE = character:100530
			}
			## King Salamon of Hungary & Queen Mother Anastasia
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:637
				LIEGE = character:476
			}
			## Prince Demetre of Georgia & Alda Oseti
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:9956
				LIEGE = character:9957
			}
			## Sultan al-Muazzam Alp Arslan and Hassan "the Order of the Realm".
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:3050
				LIEGE = character:3040
			}
		}
		if = {
			limit = { game_start_date = 1178.10.1 }
			# Set up some diarchs.
			## The future Richard I of England managing Aquitaine in place of his mother (who is under house arrest)
			character:205730 = { designate_diarch = character:204510 }
			## Jahan Pahlavan Muhammad as regent for Togrul
			character:144056 = { designate_diarch = character:144052 }
			## Manuel Komnenos and Alexios Komnenos
			character:215530 = {
				if = {
					limit = { has_ep3_dlc_trigger = yes }
					try_start_diarchy = junior_emperorship
					set_diarch = character:215531
					set_designated_heir = character:215531
				}
			}
			## Henry II of England and the Young King
			character:204500 = {
				designate_diarch = character:204508
				try_start_diarchy = co_monarchy
				set_designated_heir = character:204508
			}
			## Teresa of Portugal for Afonso the Conqueror
			character:209503 = {
				try_start_diarchy = regency
				set_diarch = character:209510
			}
			## Kara Khitai, Wolila for Zhilugu
			character:188912 = {
				try_start_diarchy = nomad_regency
				set_diarch = character:188909
			}
			# Plus remove all the generated opinions.
			## Richard I and Eleanor of Aquitaine
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:204510
				LIEGE = character:205730
			}
			## Muhammad Jahan Pahlavan and Togrul
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:144052
				LIEGE = character:144056
			}
			## Manuel Komnenos and Alexios
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:215531
				LIEGE = character:215530
			}
			## Henry II and Young Henry
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:204508
				LIEGE = character:204500
			}
			## Teresa and Afonso
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:209510
				LIEGE = character:209503
			}
			## Wolila and Zhilugu 
			remove_generated_diarch_consequences_effect = {
				NEW_DIARCH = character:188909
				LIEGE = character:188912
			}

		}
	}
	{
		## Fatimid Caliphate - basically stuck in the back-end of an entrenched regencies from game start.
		if = {
			limit = { exists = character:3096 }
			character:3096 = { trigger_event = diarchy.0012 }
		}
	}
	{
		### STRUGGLES ###
		if = {
			limit = { current_date = 867.1.1 }

			# Iberian Struggle
			if = { # If we're in 867, Aragonese should be removed from the Struggle, since they don't quite exist yet.
				limit = { exists = struggle:iberian_struggle }
				struggle:iberian_struggle = { set_culture_as_uninvolved = culture:aragonese }
			}

			# Persian Struggle
			if = { # If the load order ever changes this struggle is going to break. This must always be read before the struggle.
				limit = { exists = struggle:persian_struggle }
				debug_log = "Samarra Struggle: Gamne start data has been set"
				struggle:persian_struggle = { # Use the object explorer to debug this data (yes, the time has come to learn how to use it)

					# Struggle on_start
					fp3_remove_vassal_contract_cooldown_for_tension_effect = yes

					# Flag some titles as un-dissolutionable within the struggle.
					title:e_arabia = { set_variable = struggle_block_dissolution_faction }
					title:d_sunni = { set_variable = struggle_block_dissolution_faction }
				}
			}
		}
	}
	{
			## El Cid
			character:107590 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
					if = {
						limit = {
							character:71391 = {
								NOT = { is_courtier_of = character:107590 }
							}
						}
						add_courtier = character:71391
					}
					if = {
						limit = {
							character:castilian0248 = {
								NOT = { is_courtier_of = character:107590 }
							}
						}
						add_courtier = character:castilian0248
					}
					if = {
						limit = {
							character:castilian0249 = {
								NOT = { is_courtier_of = character:107590 }
							}
						}
						add_courtier = character:castilian0249
					}
				}
			}
	}
	{
			## Robert Crispin
			character:norman_crispin_06 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}
	}
	{
			## Hassan Sabbah
			character:41702 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_scholars
				}
			}
	}
	{
			## Suleyman Qutalmishog
			character:3046 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
					trigger_event = bookmark.1073 # Suleyman's beef with Alp Arslan
				}
			}
	}
	{
			## Wallada bint al-Mustakfi
			character:andalusian_0003 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_scholars
					trigger_event = ep3_story_cycle_violet_poet.0001
				}
			}
	}
	{
			## Taylu Danişmend
			character:danishmendid_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}
	}
	{
			## Roger Raoul
			character:232504 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}
	}
	{
		### 1066 - HASAN SABBAH STORY CYCLE ###
		character:41702 ?= {
			if = {
				limit = {
					is_alive = yes
					is_playable_character = yes
				}
				house = { set_house_head = prev }
				trigger_event = {
					id = hasan_sabbah.1000
					days = 1
				}
			}
		}
	}
	{
		### 1066 - EL CID STORY CYCLE ###
		character:107590 ?= {
			if = {
				limit = {
					cid_story_cycle_start_trigger = yes
				}
				trigger_event = {
					id = cid.0001
					days = 1
				}
			}
		}
	}
	{
			## Hereweard the Wake
			character:90028 ?= {
				if = {
					limit = { is_alive = yes }
					add_realm_law_skip_effects = camp_purpose_brigands
					if = {
						limit = {
							character:90160 = {
								NOT = { is_courtier_of = character:90028 }
							}
						}
						add_courtier = character:90160
					}
				}
				# Setup event for his story
				trigger_event = {
					id = ep3_laamps.5999
					days = { 1 2 }
				}
			}
	}
	{
		# Conquerors
		character:144133 ?= {
			if = {
				limit = {
					is_alive = yes
					NOT = { has_game_rule = no_conquerors_frequency }
				}
				create_story = story_conqueror
			}
		}
		character:144141 ?= {
			if = {
				limit = {
					is_alive = yes
					NOT = { has_game_rule = no_conquerors_frequency }
				}
				create_story = story_conqueror
			}
		}
		character:175080 ?= {
			if = {
				limit = {
					is_alive = yes
					NOT = { has_game_rule = no_conquerors_frequency }
				}
				create_story = story_conqueror
			}
		}
		character:226000 ?= {
			if = {
				limit = {
					is_alive = yes
					NOT = { has_game_rule = no_conquerors_frequency }
				}
				create_story = story_conqueror
			}
		}
	}

# achievements
	{
		### ACHIEVEMENT TRACKING FOR STARTING CHARACTERS
		if = {
			limit = { has_multiple_players = no }
			every_player = {
				# Base Title
				if = {
					limit = {
						exists = character:7757
						this = character:7757
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_give_a_dog_a_bone_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						exists = character:1128
						this = character:1128
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_wily_as_the_fox_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						OR = {
							AND = {
								exists = character:108501
								this = character:108501
							}
							AND = {
								exists = character:107500
								this = character:107500
							}
							AND = {
								exists = character:107501
								this = character:107501
							}
							AND = {
								exists = character:108500
								this = character:108500
							}
							AND = {
								exists = character:109500
								this = character:109500
							}
						}
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_sibling_rivalry_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						OR = {
							AND = {
								exists = character:163108
								this = character:163108
							}
							AND = {
								exists = character:163110
								this = character:163110
							}
							AND = {
								exists = character:163111
								this = character:163111
							}
							AND = {
								exists = character:163112
								this = character:163112
							}
							AND = {
								exists = character:163119
								this = character:163119
							}
						}
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_blood_eagle_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						exists = character:6448
						this = character:6448
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_kings_to_the_seventh_generation_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						exists = character:140
						this = character:140
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_norman_yoke_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						exists = character:522
						this = character:522
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_royal_dignity_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						exists = character:40605
						this = character:40605
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_land_of_the_rus_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						exists = character:251187
						this = character:251187
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_mother_of_us_all_achievement
						VALUE = yes
					}
				}
				if = { # Temüjin
					limit = {
						has_mpo_dlc_trigger = yes
						exists = character:125501
						this = character:125501
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_the_stallion_that_mounts_the_world_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						government_has_flag = government_is_nomadic
						location = {
							geographical_region = world_steppe_east
						}
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_steppe_by_steppe_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						OR = {
							culture = { has_cultural_pillar = heritage_iberian }
							culture = culture:andalusian
						}
						has_religion = religion:christianity_religion
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_reconquista_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						culture = culture:irish
						capital_province = { geographical_region = custom_ireland }
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_the_emerald_isle_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						OR = {
							culture = culture:castilian
							culture = culture:basque
							culture = culture:portuguese
							culture = culture:catalan
							culture = culture:andalusian
							culture = culture:visigothic
							culture = culture:suebi
						}
						has_religion = religion:islam_religion
						capital_province = { geographical_region = world_europe_west_iberia }
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_al_andalus_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						exists = character:159137
						this = character:159137
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_almost_there_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						exists = character:109607
						this = character:109607
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_last_count_first_king_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						exists = character:6878
						this = character:6878
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_going_places_achievement
						VALUE = yes
					}
				}
				# FP1
				## far_from_home_achievement
				if = {
					limit = {
						# Starting as a Norse pagan Norse-cultured character.
						fp1_achievement_culture_plus_religion_norse_trigger = yes
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_far_from_home_achievement
						VALUE = yes
					}
				}
				## miklagardariki_achievement
				if = {
					limit = {
						# Starting as a Norse pagan Norse-cultured character.
						fp1_achievement_culture_plus_religion_norse_trigger = yes
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_miklagardariki_achievement
						VALUE = yes
					}
				}
				## canute_the_greater_achievement
				add_achievement_global_variable_effect = {
					VARIABLE = started_canute_the_greater_achievement
					VALUE = yes
				}
				## king_of_all_the_isles_achievement
				if = {
					limit = {
						# Starting as a Norse pagan Norse-cultured character.
						fp1_achievement_culture_plus_religion_norse_trigger = yes
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_king_of_all_the_isles_achievement
						VALUE = yes
					}
				}
				## faster_than_the_fox_achievement
				if = {
					limit = {
						# Starting as a Norse pagan Norse-cultured character.
						fp1_achievement_culture_plus_religion_norse_trigger = yes
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_faster_than_the_fox_achievement
						VALUE = yes
					}
				}
				## volva_achievement
				if = {
					limit = {
						# Starting as a Norse pagan Norse-cultured character.
						fp1_achievement_culture_plus_religion_norse_trigger = yes
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_volva_achievement
						VALUE = yes
					}
				}
				## saga_in_stone_achievement
				add_achievement_global_variable_effect = {
					VARIABLE = started_saga_in_stone_achievement
					VALUE = yes
				}
				## first_of_the_crusader_kings_achievement
				if = {
					limit = {
						# Starting as a Norse-cultured character.
						fp1_achievement_culture_norse_trigger = yes
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_first_of_the_crusader_kings_achievement
						VALUE = yes
					}
				}
				## vladimirs_second_choice_achievement
				if = {
					limit = {
						# Starting as a Norse pagan Norse or Rus-cultured character.
						fp1_achievement_culture_norse_or_rus_trigger = yes
						fp1_achievement_religious_norse_trigger = yes
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_vladimirs_second_choice_achievement
						VALUE = yes
					}
				}
				## a_dangerous_business_achievement
				add_achievement_global_variable_effect = {
					VARIABLE = started_a_dangerous_business_achievement
					VALUE = yes
				}
				# EP1
				##1 Patronage
				add_achievement_global_variable_effect = {
					VARIABLE = started_patronage_achievement
					VALUE = yes
				}
				##2 Converging Paths
				add_achievement_global_variable_effect = {
					VARIABLE = started_converging_paths_achievement
					VALUE = yes
				}
				##3 Changing course
				add_achievement_global_variable_effect = {
					VARIABLE = started_changing_course_achievement
					VALUE = yes
				}
				##4 Hoarder
				add_achievement_global_variable_effect = {
					VARIABLE = started_hoarder_achievement
					VALUE = yes
				}
				##5 creme de la creme
				add_achievement_global_variable_effect = {
					VARIABLE = started_creme_de_la_creme_achievement
					VALUE = yes
				}
				##6 Give it back!
				add_achievement_global_variable_effect = {
					VARIABLE = started_polyglot_achievement
					VALUE = yes
				}
				##7 Inspirational
				add_achievement_global_variable_effect = {
					VARIABLE = started_inspirational_achievement
					VALUE = yes
				}
				##8 One of a Kind
				add_achievement_global_variable_effect = {
					VARIABLE = started_one_of_a_kind_achievement
						VALUE = yes
				}
				##9 True Tolerance
				add_achievement_global_variable_effect = {
					VARIABLE = started_true_tolerance_achievement
					VALUE = yes
				}
				##10 Delusions of Grandeur
				add_achievement_global_variable_effect = {
					VARIABLE = started_delusions_of_grandeur_achievement_achievement
					VALUE = yes
				}
				##11 Bod Chen Po
				if = {
					limit = {
						this.dynasty = dynasty:105800
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_bod_chen_po_achievement
						VALUE = yes
					}
				}
				##12 Turkish Eagle
				if = {
					limit = {
						NOT = { this = character:3040 } # Not Alp Arslan
						house = house:house_seljuk # Seljuk
						game_start_date < 1067.1.1 # 1066 only, and no Seljuks in 867
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_turkish_eagle_achievement
						VALUE = yes
					}
				}
				##13 Rise of the Ghurids
				if = {
					limit = {
						has_title = title:d_ghur
						this.dynasty = dynasty:791 #Ghurid
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_rise_of_the_ghurids_achievement
						VALUE = yes
					}
				}
				##14 Brave and Bold
				if = {
					limit = {
						game_start_date < 868.1.1
						this.dynasty = dynasty:699 #Piast
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_brave_and_bold_achievement
						VALUE = yes
					}
				}
				##15 Lingua Franca
				add_achievement_global_variable_effect = {
					VARIABLE = started_lingua_franca_achievement
					VALUE = yes
				}
				##16 Beta Israel
				add_achievement_global_variable_effect = {
					VARIABLE = started_beta_israel_achievement
					VALUE = yes
				}
				## 17 They belong in a museum!
				add_achievement_global_variable_effect = {
					VARIABLE = started_they_belong_in_a_museum_achievement
					VALUE = yes
				}
				##18 I made this!
				add_achievement_global_variable_effect = {
					VARIABLE = started_i_made_this_achievement
					VALUE = yes
				}
				##19 Nobody Comes to Fika!
				add_achievement_global_variable_effect = {
					VARIABLE = started_nobody_comes_to_fika_achievement
					VALUE = yes
				}
				## 20 The True Royal Court
				add_achievement_global_variable_effect = {
					VARIABLE = started_the_true_royal_court_achievement
						VALUE = yes
				}
				# EP2
				## 01. The Grandest Tour
				add_achievement_global_variable_effect = {
					VARIABLE = started_the_grandest_tour_achievement
					VALUE = yes
				}
				## 02. Your Eternal Reward
				add_achievement_global_variable_effect = {
					VARIABLE = started_your_eternal_reward_achievement
					VALUE = yes
				}
				## 03. Imperial March
				add_achievement_global_variable_effect = {
					VARIABLE = started_imperial_march_achievement
					VALUE = yes
				}
				## 04. Black Dinner
				add_achievement_global_variable_effect = {
					VARIABLE = started_black_dinner_achievement
					VALUE = yes
				}
				## 05. There and Back Again
				add_achievement_global_variable_effect = {
					VARIABLE = started_there_and_back_again_achievement
					VALUE = yes
				}
				## 06. The Very Best
				add_achievement_global_variable_effect = {
					VARIABLE = started_the_very_best_achievement
					VALUE = yes
				}
				## 07. Like No One Ever Was
				add_achievement_global_variable_effect = {
					VARIABLE = started_like_no_one_ever_was_achievement
					VALUE = yes
				}
				## 08. A Thousand and One Night
				add_achievement_global_variable_effect = {
					VARIABLE = started_a_thousand_and_one_nights_achievement
					VALUE = yes
				}
				## 09. A Knight's Tale
				add_achievement_global_variable_effect = {
					VARIABLE = started_a_knights_tale_achievement
					VALUE = yes
				}
				## 10. Hunting Accident
				add_achievement_global_variable_effect = {
					VARIABLE = started_hunting_accident_achievement
					VALUE = yes
				}
				## 11. Lions and Tigers and Bears, Oh My!
				add_achievement_global_variable_effect = {
					VARIABLE = started_lions_and_tigers_and_bears_oh_my_achievement
					VALUE = yes
				}
				## 12. Fly, my Pretty!
				add_achievement_global_variable_effect = {
					VARIABLE = started_fly_my_pretty_achievement
					VALUE = yes
				}
				## 13. Pathway to Heaven
				add_achievement_global_variable_effect = {
					VARIABLE = started_pathway_to_heaven_achievement
					VALUE = yes
				}
				## 14. Sir Lance-a-Lot
				add_achievement_global_variable_effect = {
					VARIABLE = started_sir_lance_a_lot_achievement
					VALUE = yes
				}
				## 15. I'm in my Element(s)
				add_achievement_global_variable_effect = {
					VARIABLE = started_im_in_my_elements_achievement
					VALUE = yes
				}
				## 16. Ahab
				add_achievement_global_variable_effect = {
					VARIABLE = started_ahab_achievement
					VALUE = yes
				}
				## 17. Little William Marshal
				add_achievement_global_variable_effect = {
					VARIABLE = started_little_william_marshal_achievement
					VALUE = 0
				}
				add_achievement_global_variable_effect = {
					VARIABLE = little_william_marshal_achievement_tally
					VALUE = 0
				}
				## 18. A True & Perfect Knight
				add_achievement_global_variable_effect = {
					VARIABLE = started_a_true_and_perfect_knight_achievement
					VALUE = yes
				}
				## 19. A.E.I.O.U & Me
				if = {
					limit = {
						# Etichonen, of whom the Hapsburgs are a cadet - we check dynasty rather than house so that an accidental cadet doesn't screw you.
						this.house ?= house:house_habsburg
					}
					add_achievement_global_variable_effect = {
						VARIABLE = started_a_e_i_o_u_and_me_achievement
						VALUE = yes
					}
				}
				## 20. The Iron and Golden King
				add_achievement_global_variable_effect = {
					VARIABLE = started_the_iron_and_golden_king_achievement
					VALUE = yes
				}

				### RULER DESIGNER ACHIEVEMENT BLOCKS ###
				if = {
					limit = {
						num_virtuous_traits >= 3
					}
					add_achievement_flag_effect = { FLAG = rd_character_blocked_paragon_of_virtue_achievement_flag	}
				}
				if = {
					limit = {
						any_child = {
							count >= 10
							is_alive = yes
						}
					}
					add_achievement_flag_effect = { FLAG = rd_character_blocked_the_succession_is_safe_achievement_flag }
				}
				if = {
					limit = {
						any_child = {
							has_trait = inbred
						}
					}
					add_achievement_flag_effect = { FLAG = rd_character_blocked_keeping_it_in_the_family_achievement_flag }
				}
				if = {
					limit = {
						highest_held_title_tier >= tier_empire
						should_be_naked_trigger = yes
					}
					add_achievement_flag_effect = { FLAG = rd_character_blocked_the_emperors_new_clothes_achievement_flag }
				}
				if = {
					limit = {
						is_from_ruler_designer = yes
						OR = {
							fp1_achievement_culture_norse_trigger = yes
							fp1_achievement_religious_norse_trigger = yes
						}
					}
					add_to_global_unavailable_achievements_list_effect = { FLAG = flag:rd_character_blocked_far_from_home_achievement }
					add_to_global_unavailable_achievements_list_effect = { FLAG = flag:rd_character_blocked_miklagardariki_achievement }
					add_to_global_unavailable_achievements_list_effect = { FLAG = flag:rd_character_blocked_faster_than_the_fox_achievement }
				}
				if = {
					limit = {
						any_ruler = {
							is_from_ruler_designer = yes
						}
					}
					add_to_global_unavailable_achievements_list_effect = { FLAG = flag:rd_character_blocked_iberia_or_iberia_achievement }
					add_to_global_unavailable_achievements_list_effect = { FLAG = flag:rd_character_blocked_el_cid_achievement }
					add_achievement_global_variable_effect = {
						VARIABLE = any_ruler_designed_character_achievement
						VALUE = yes
					}
				}
				if = {
					limit = {
						has_mpo_dlc_trigger = yes
						exists = character:125501
						character:125501 = {
							is_alive = yes
						}
					}
					character:125501 = {
						create_story = story_temujin_flavor
						trigger_event = {
							days = { 12 30 }
							id = mpo_temujin_flavor.0030 # Borte announces she's pregnant
						}
					}
				}
			}
		}
	}
	{
		### ACHIEVEMENT (FP3): The Ummayad Strikes Back
		every_player = {
			if = {
				limit = {
					dynasty = character:73683.dynasty
					location = { geographical_region = world_europe_west_iberia }
				}
				set_global_variable = fp3_the_umma_strikes_back_achievement_tracker # Is not removed (sad!)
			}
		}
	}
	
	{
		### GREECE BACKWATER COUNTIES ###
		if = {
			limit = { has_ep3_dlc_trigger = yes }
			title:c_laconia = { add_county_modifier = backwater_county_modifier }
			title:c_messenia = { add_county_modifier = backwater_county_modifier }
			title:c_korinthos = { add_county_modifier = backwater_county_modifier }
			title:c_achaia = { add_county_modifier = backwater_county_modifier }
			title:c_cephalonia = { add_county_modifier = backwater_county_modifier }
			title:c_attica = { add_county_modifier = backwater_county_modifier }
			title:c_boeotia = { add_county_modifier = backwater_county_modifier }
			title:c_aetolia = { add_county_modifier = backwater_county_modifier }
			title:c_naxos = { add_county_modifier = backwater_county_modifier }
			title:c_euboea = { add_county_modifier = backwater_county_modifier }
			title:c_neopatras = { add_county_modifier = backwater_county_modifier }
			title:c_demetrias = { add_county_modifier = backwater_county_modifier }
			title:c_thessaliotis = { add_county_modifier = backwater_county_modifier }
			title:c_thessalia = { add_county_modifier = backwater_county_modifier }
			title:c_epeiros = { add_county_modifier = backwater_county_modifier }
			title:c_buthrotum = { add_county_modifier = backwater_county_modifier }
			title:c_veria = { add_county_modifier = backwater_county_modifier }
			title:c_metzovo = { add_county_modifier = backwater_county_modifier }
			title:c_chalkidike = { add_county_modifier = backwater_county_modifier }
			title:c_thessalonika = { add_county_modifier = backwater_county_modifier }
			title:c_serres = { add_county_modifier = backwater_county_modifier }
			title:c_mosynopolis = { add_county_modifier = backwater_county_modifier }
			title:c_ohrid = { add_county_modifier = backwater_county_modifier }
			title:c_antipatreia = { add_county_modifier = backwater_county_modifier }
			title:c_dyrrachion = { add_county_modifier = backwater_county_modifier }
			title:c_avlonas = { add_county_modifier = backwater_county_modifier }
		}
	}

	# This makes it so the extra nomad regions won't start, regardless of game rules, since we will probably handle these things on our own.
	# There is still a part of this code left that gives nomads in the_great_steppe situation a variable to prevent the season change at the beginning of the game from causing a notification event. That could be modified once we have the whole nomad situation handled.
	{
		# Extra Nomad Regions
		#Sami
		if = {
		    limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = sami_nomad_region_on
			}
			start_situation = {
				type = game_rule_extra_nomads_sami
				start_phase = situation_steppe_abundant_grazing_season
				save_scope_as = my_situation
			}
			scope:my_situation = {
				every_situation_county = {
					limit = {
						holder = {
							OR = {
								culture = culture:sami
								culture = culture:karelian
								culture = culture:samoyed
							}
						}
					}
					holder = {
						set_variable = {
							name = steppe_game_start_var
							years = 1
						}
						every_held_title = {
							if = {
								limit = {
									title_province = {
										has_holding_type = tribal_holding
									}
								}
								title_province = {
									set_holding_type = nomad_holding
								}
							}
						}
						change_government = nomad_government
					}
				}
			}
		}
		#Arabia
		if = {
		    limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = arabia_nomad_region_on
			}
			start_situation = {
				type = game_rule_extra_nomads_arabs
				start_phase = situation_steppe_severe_drought_season
				save_scope_as = my_situation
				sub_region = {
					key = arabia_nomads
					start_phase = situation_steppe_severe_drought_season
					map_color = { 34 255 76 }
					geographical_regions = { arab_nomad_area }
				}
				sub_region = {
					key = egypt_nomads
					start_phase = situation_steppe_abundant_grazing_season
					map_color = { 24 155 76 }
					geographical_regions = { egypt_nomad_area }
				}
			}
			scope:my_situation = {
				every_situation_county = {
					limit = {
						holder = {
							government_has_flag = government_is_tribal
						}
					}
					holder = {
						set_variable = {
							name = steppe_game_start_var
							years = 1
						}
						every_held_title = {
							if = {
								limit = {
									title_province = {
										has_holding_type = tribal_holding
									}
								}
								title_province = {
									set_holding_type = nomad_holding
								}
							}
						}
						change_government = nomad_government
					}
				}
			}
		}
		#Sahel
		if = {
		    limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = sahel_nomad_region_on
			}
		    start_situation = { 
				type = game_rule_extra_nomads_sahel
				start_phase = situation_steppe_severe_drought_season
				save_scope_as = my_situation
				sub_region = {
					key = north_africa_nomads
					start_phase = situation_steppe_abundant_grazing_season
					map_color = { 155 62 0 }
					geographical_regions = { sahel_north_africa_nomad_area }
				}
				sub_region = {
					key = sahara_nomads
					start_phase = situation_steppe_severe_drought_season
					map_color = { 255 232 100 }
					geographical_regions = { sahel_desert_nomad_area }
				}
				sub_region = {
					key = sahel_nomads
					start_phase = situation_steppe_abundant_grazing_season
					map_color = { 100 46 92 }
					geographical_regions = { sahel_sub_saharan_africa_nomad_area }
				}
			}
			scope:my_situation = {
				every_situation_county = {
					limit = {
						holder = {
							government_has_flag = government_is_tribal
							OR = {
								culture = { has_cultural_pillar = heritage_berber }
								culture = culture:bedouin
							}
						}
					}
					holder = {
						set_variable = {
							name = steppe_game_start_var
							years = 1
						}
						every_held_title = {
							if = {
								limit = {
									title_province = {
										has_holding_type = tribal_holding
									}
								}
								title_province = {
									set_holding_type = nomad_holding
								}
							}
						}
						change_government = nomad_government
					}
				}
			}
		}	
		#Horn of Africa
		if = {
		    limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = horn_of_africa_nomad_region_on
			}
		    start_situation = { 
				type = game_rule_extra_nomads_horn
				start_phase = situation_steppe_severe_drought_season
				save_scope_as = my_situation
			}
			scope:my_situation = {
				every_situation_county = {
					limit = {
						holder = {
							government_has_flag = government_is_tribal
							OR = {
								culture = culture:somali
								culture = culture:beja
								culture = culture:afar
								culture = culture:bedouin
							}
						}
					}
					holder = {
						set_variable = {
							name = steppe_game_start_var
							years = 1
						}
						every_held_title = {
							if = {
								limit = {
									title_province = {
										has_holding_type = tribal_holding
									}
								}
								title_province = {
									set_holding_type = nomad_holding
								}
							}
						}
						change_government = nomad_government
					}
				}
			}
		}		
	}
} # End of "common/on_action/game_start.txt"

"common/on_action/title_on_actions.txt" = {
	{
		# Am I The Chad?
		if = {
			limit = { root = character:easteregg_chad_uhl }
			set_house = house:house_chad_uhl
		}
	}
	
	{
		title_event.0001			# Rename West Francia to France
		title_event.0002			# Rename East Francia to Germany
	}
	
	{
		fp1_major_decisions.1011	# Harald Tanglehair becomes Harald Fairhair.
	}
}

"events\title_events.txt" = {
	{
# West Francia becomes France when no longer controlled by a Karling
title_event.0001 = {
	type = character_event
	title = title_event_francia_name_change.title
	desc = title_event_francia_name_change.desc
	theme = crown
	right_portrait = root
	
	trigger = {
		scope:title = {
			this = title:k_france
		}
		NOR = {
			dynasty = { this = dynasty:25061 } # Not held by a Karling
			any_liege_or_above = {
				dynasty = { this = dynasty:25061 } # And does not have a liege that is a Karling
			}
			has_global_variable = west_francia_renamed
		}
	}
	
	immediate = {
		title:k_france = {
			save_scope_as = francia_title
		}
		set_global_variable = {
			name = west_francia_renamed
			value = yes
		}
	}
	
	option = {
		name = title_event_francia_name_change.a
		custom_tooltip = {
			text = title_event_francia_name_change.a_tt_1
			
			title:k_france = {
				reset_title_name = yes # I.e. set_title_name = k_france
			}
		}
	}
}
	}
	
	{
# East Francia becomes Germany when no longer controlled by a Karling
title_event.0002 = {
	type = character_event
	title = title_event_francia_name_change.title
	desc = title_event_francia_name_change.desc
	theme = crown
	right_portrait = root
	
	trigger = {
		scope:title = {
			this = title:k_east_francia
		}
		NOR = {
			dynasty = { this = dynasty:25061 }  # Not held by a Karling
			any_liege_or_above = {
				dynasty = { this = dynasty:25061 } # And does not have a liege that is a Karling
			}
			has_global_variable = east_francia_renamed
		}
	}
	
	immediate = {
		title:k_east_francia = {
			save_scope_as = francia_title
		}
		set_global_variable = {
			name = east_francia_renamed
			value = yes
		}
	}
	
	option = {
		name = title_event_francia_name_change.a
		custom_tooltip = {
			text = title_event_francia_name_change.a_tt_2
			
			title:k_east_francia = {
				set_title_name = k_germany
			}
		}
	}
}
	}
}

"common/character_interactions/00_war.txt" = {
	{
		#Special bookmark event for Aella of Northumbria
		bookmark_867_northmen_aellas_capture_war_imprisonment_effect = yes
	}
}

"common/scripted_effects/00_bookmark_effects.txt" = {
	{
bookmark_867_northmen_aellas_capture_war_imprisonment_effect = {
	if = {
		limit = {
			scope:defender_loser = {
				this = character:163103 #Aella
				is_ai = yes
			}
			NOR = {
				is_target_in_global_variable_list = {
					name = triggered_bookmark_events
					target = flag:bookmark_867_northmen_aellas_capture
				}
				character:163103 = { is_imprisoned = yes }
			}
		}
		scope:attacker_winner = {
			imprison =  {
				target = scope:defender_loser
				type = dungeon
			}
		}
	}
}
	}
}

"events/artifacts/historical_artifacts_events.txt" = {
	{
		### Chalice of Dona Urraca
		if = {
			limit = {
				# It's likely that Urraca paid for her eponymous chalice using money she earnt from the titles her father pre-bequeathed to her, so it was probably made some time *after* 1066 (since she only got the lands in 1065, shortly before her father died), buuuuuut it's really mean to not let her have it at game start, so we give it to her in 1066.
				current_date >= 1066.1.1
				has_fp2_dlc_trigger = yes
				exists = character:108501
				character:108501 = { is_alive = yes }
			}
			create_artifact_goblet_chalice_of_dona_urraca = { OWNER = character:108501 }
		}
	}
	
	{
		### Crown of Justinian
		if = {
			limit = {
				has_dlc_feature = royal_court
				exists = title:e_byzantium.holder
			}
			title:e_byzantium.holder = {
				create_artifact_pedestal_justinian_effect = { OWNER = this }
			}
		}
	}
	
	{
		### Head of St. Edmund
		if = {
			limit = {
				has_dlc_feature = royal_court
				# Date of earliest likely canonisation.
				current_date >= 924.1.1
				exists = title:k_england.holder
			}
			title:k_england.holder = {
				create_artifact_edmund_head_effect = { OWNER = this }
			}
		}
	}
	
	{
		### Throne of Charlemagne
		if = {
			limit = {
				has_dlc_feature = royal_court
				exists = title:e_hre.holder
			}
			title:e_hre.holder = {
				create_artifact_throne_charlemagne_effect = { OWNER = this }
			}
		}
	}
	
	{
		### Throne of Scone (featuring Stone)
		if = {
			limit = {
				has_dlc_feature = royal_court
				exists = title:k_scotland.holder
			}
			title:k_scotland.holder = {
				create_artifact_throne_scone_effect = { OWNER = this }
			}
		}
	}
	
	{
		### Monomachus Crown
		if = {
			limit = {
				has_dlc_feature = royal_court
				current_date >= 1000.1.1
				exists = title:e_byzantium.holder
			}
			title:e_byzantium.holder = {
				create_artifact_monomachus_crown_effect = { OWNER = this }
			}
		}
	}
	
	{
		### Pentapyrgion
		if = {
			limit = {
				has_dlc_feature = royal_court
				exists = title:e_byzantium.holder
			}
			title:e_byzantium.holder = {
				create_artifact_sculpture_cabinet_pentapyrgion_effect = { OWNER = this }
			}
		}
	}
	
	{
		### Sword of Atilla 
		#### Associated with the Arpads, but "discovered"/passed out of their possession around or after 1063. They maintain a house claim on it.
		if = {
			limit = {
				has_dlc_feature = royal_court
				current_date >= 1064.1.1
				exists = title:d_bavaria.holder
			}
			title:d_bavaria.holder = {
				create_artifact_wall_sword_attila_effect = { OWNER = this }
				dynasty:708 = {
					random_dynasty_member = {
						house = { add_house_artifact_claim = scope:newly_created_artifact }
					}
				}
			}
		}
	}

	{
		### Reichskrone
		if = {
			limit = {
				current_date > 1000.1.1
				exists = title:e_hre.holder
			}
			title:e_hre.holder = {
				create_artifact_reichskrone_effect = { OWNER = this }
			}
		}
	}

	{
		### Iron Crown of Lombardy
		if = {
			limit = {
				has_dlc_feature = royal_court
				exists = title:e_hre.holder
			}
			title:e_hre.holder = {
				create_artifact_pedestal_crown_iron_effect = { OWNER = this }
			}
		}
	}

	{
		### Nikephoros' Crown
		if = {
			limit = {
				current_date >= 1000.1.1
				exists = title:e_byzantium.holder
			}
			title:e_byzantium.holder = {
				create_artifact_nikephoros_crown_effect = { OWNER = this }
			}
		}
	}

	{
		### Essen Crown
		if = {
			limit = {
				current_date > 1000.1.1
				exists = title:e_hre.holder
			}
			title:e_hre.holder = {
				create_artifact_essen_crown_effect = { OWNER = this }
			}
		}
	}

	{
		### Curtana
		#### Not the *actual* Curtana, but at least occasionally traced as Edward the Confessor's sword (and then ascribed an even more mythic origin from there).
		if = {
			limit = {
				has_dlc_feature = royal_court
				current_date >= 1042.8.6
				exists = title:k_england.holder
			}
			title:k_england.holder = {
				create_artifact_curtana_effect = { OWNER = this }
			}
		}
	}

	{
		### Papal Tiara
		if = {
			limit = { exists = title:k_papal_state.holder }
			title:k_papal_state.holder = {
				create_artifact_papal_tiara_effect = { OWNER = this }
			}
		}
	}

	{
		### (Former) Bells of Santiago
		#### These aren't actually furniture, but we keep 'em here so they're next to the regular bells, which *are*.
		if = {
			# If we're after Almanzor's raid, then the bells go to c_toledo's holder.
			limit = {
				has_fp2_dlc_trigger = yes
				current_date >= 997.1.1
			}
			title:c_toledo.holder = {
				create_artifact_various_aquamanile_santiago = { OWNER = this }
				# The bells have been morphed once.
				scope:newly_created_artifact = {
					set_variable = {
						name = artefact_santiago_bells
						value = 1
					}
				}
			}
		}
	}

	# from error.log:
	# Error: create_artifact effect [ Scoped object is not valid. Type: null weak (Character - 4294967295)! ]
	{
		### Persian Drinking Vessel
		if = {
			limit = {
				# Only generated in the earlier bookmarks.
				current_date < 900.1.1
				has_dlc_feature = legacy_of_persia
				exists = title:k_makran
			}
			title:k_makran.holder = {
				create_artifact = {
					name = fp3_ancient_drinking_vessel
					description = fp3_ancient_drinking_vessel_desc
					visuals = persian_drinking_vessel
					type = goblet
					wealth = 80
					quality = 80
					modifier = artifact_negate_health_penalty_add_2_modifier
					modifier = artifact_stress_gain_3_modifier
					modifier = artifact_monthly_prestige_5_modifier
					modifier = artifact_court_grandeur_baseline_add_3_modifier
				}
			}
		}
	}

	{
				create_artifact_statue_constantine_effect = { OWNER = this }
	}
}

"common/scripted_effects/03_dlc_fp2_scripted_effects.txt" = {
	{
create_artifact_goblet_chalice_of_dona_urraca = {
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_famed = yes
	scope:owner = {
		create_artifact = {
			name = fp2_chalice_dona_urraca
			description = fp2_chalice_dona_urraca_desc
			template = fp2_chalice_dona_urraca_template
			type = miscellaneous_when_not_court
			visuals = fp2_chalice_dona_urraca
			wealth = scope:wealth
			quality = scope:quality
			modifier = chalice_of_dona_urraca_modifier
			save_scope_as = newly_created_artifact
		}
	}
	scope:newly_created_artifact = {
		set_variable = {
			name = dlc_potential_court_artefact
			value = yes
		}
		set_variable = {
			name = historical_unique_artifact
			value = yes
		}
		set_variable = {
			name = relic
			value = flag:christian
		}
	}
}
	}

	{
create_artifact_various_aquamanile_santiago = {
	$OWNER$ = { save_scope_as = owner }
	character:3206 = { save_scope_as = reforger }
	set_artifact_rarity_illustrious = yes
	scope:owner = {
		create_artifact = {
			name = fp2_santiago_aquamanile
			description = fp2_santiago_aquamanile_desc
			template = fp2_santiago_aquamanile_template
			type = miscellaneous_when_not_court
			visuals = fp2_santiago_aquamanile
			wealth = scope:wealth
			quality = scope:quality
			modifier = former_bells_of_santiago_modifier
			decaying = no
			save_scope_as = newly_created_artifact
		}
	}
	scope:newly_created_artifact = {
		set_variable = {
			name = dlc_potential_court_artefact
			value = yes
		}
		set_variable = {
			name = historical_unique_artifact
			value = yes
		}
		set_variable = {
			name = relic
			value = flag:iberian_struggle
		}
	}
}
	}
}

"common/scripted_effects/01_exp1_historical_artifacts_creation_effect.txt" = {
	{
create_artifact_pedestal_justinian_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_pedestal_crown_justinian_name
		description = artifact_pedestal_crown_justinian
		type = pedestal
		template = justinian_template
		visuals = pedestal_justinian
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created
			date = 527.4.1
			recipient = character:70512 #Justinian the Great
			location = province:496 #Constantinople
		}
		modifier = justinian_crown_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = crown_of_justinian
		add_artifact_title_history = {
			target = title:e_byzantium
			date = 565.11.14
		}
		save_scope_as = epic
	}	
}
	}
	
	{
create_artifact_edmund_head_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = edmund_head_name
		description = edmund_head_description
		type = pedestal
		visuals = head
		wealth = scope:wealth
		quality = scope:quality
		template = christian_relic_template
		history = {
			type = created
			date = 869.11.20
			recipient = character:163064 #Eadmund the Martyr
			location = province:1520 #Blything
		}
		modifier = edmund_head_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = edmund_head
		add_scaled_artifact_modifier_devotion_effect = yes
		set_variable = {
			name = relic
			value = flag:christian
		}
		save_scope_as = epic
		add_artifact_history = {
			type = given
			date = 946.5.27
			recipient = character:33350 # Æthelstan
		}
		add_artifact_title_history = {
			target = title:k_england
			date = 955.11.24
		}
	}
}
	}
	
	{
create_artifact_throne_charlemagne_effect = { #Create at start
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_throne_charlemagne_name
		description = artifact_throne_charlemagne_description
		type = throne_special
		visuals = throne_charlemagne
		wealth = scope:wealth
		quality = scope:quality
		template = throne_charlemagne_template
		history = {
			type = created
			date = 800.12.25
			recipient = character:6392 #Karl I the Great
			location = province:2092 #Aachen
		}
		modifier = throne_charlemagne_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = charlamagne_throne
		# k_lotharingia history copied manually because it is destroyed before 1066
		add_artifact_history = {
			type = inherited
			date = 814.1.2
			recipient = character:90095 #Louis I
		}
		add_artifact_history = {
			type = inherited
			date = 817.1.1
			recipient = character:30227 #Lothair I
		}
		add_artifact_title_history = {
			target = title:e_hre
			date = 973.5.7
		}
		add_scaled_artifact_modifier_majesty_effect = yes
		add_scaled_artifact_modifier_rulership_effect = yes
		save_scope_as = epic
		save_scope_value_as = {
			name = throne
			value = yes
		}
	}
}
	}
	
	{
create_artifact_throne_scone_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_throne_stone_scone_name
		description = artifact_throne_stone_scone
		type = throne_special
		visuals = throne_scone
		wealth = scope:wealth
		quality = scope:quality
		template = throne_scone_template
		history = {
			type = created
			date = 841.6.1
			recipient = character:6018 #Kenneth mac Ailpín
			location = province:1742 #Scone
		}
		modifier = throne_scone_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = throne_scone
		save_scope_as = epic
		add_scaled_artifact_modifier_rulership_effect = yes
		save_scope_value_as = {
			name = throne
			value = yes
		}
		add_artifact_title_history = {
			target = title:k_scotland
			date = 858.1.1
		}
	}
}
	}
	
	{
create_artifact_monomachus_crown_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }

	set_artifact_rarity_famed = yes

	# Create the artifact
	create_artifact = {	
		name = monomachus_crown_name
		description = monomachus_crown_description
		template = general_unique_template
		type = helmet
		visuals = pedestal_justinian
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created
			date = 1042.6.11
			recipient = character:1726 #Konstantinos IX
			location = province:496 #Constantinople
		}
		modifier = monomachus_crown_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		save_scope_as = epic
		add_artifact_title_history = {
			target = title:e_byzantium
			date = 1055.1.11
		}
	}
}
	}
	
	{
create_artifact_sculpture_cabinet_pentapyrgion_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_masterwork = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_sculpture_cabinet_pentapyrgion_name
		description = artifact_sculpture_cabinet_pentapyrgion_description
		type = sculpture
		visuals = sculpture_cabinet_pentapyrgion
		template = pentapyrgion_template
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created
			date = 839.6.1
			recipient = character:70491 #Theophilos
			location = province:496 #Constantinople
		}
		modifier = pentapyrgion_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		add_artifact_title_history = {
			target = title:e_byzantium
			date = 842.1.20
		}
		save_scope_value_as = {
			name = cupboard
			value = yes
		}
	}
}
	}
	
	{
create_artifact_wall_sword_attila_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_wall_sword_attila_name
		description = artifact_wall_sword_attila_description
		type = pedestal
		template = attila_template
		visuals = wall_sword_attila
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = attila_sword_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = sword_attila
		save_scope_as = epic
	}
}
	}

	{
create_artifact_reichskrone_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }

	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = reichskrone_name
		description = reichskrone_description
		type = helmet
		visuals = hre_crown
		wealth = scope:wealth
		quality = scope:quality
		template = reichskrone_template
		history = {
			type = created
			date = 962.1.1
			recipient = character:1282 #Otto I
			location = province:2092 #Aachen
		}
		modifier = reichskrone_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = {
			name = artifact_succession_title
			value = title:e_hre
		}
		add_artifact_title_history = {
			target = title:e_hre
			date = 962.1.1
		}
		set_variable = {
			name = reichskrone
			value = yes
		}
		save_scope_as = epic
	}
}
	}

	{
create_artifact_pedestal_crown_iron_effect = { #Create at start
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_pedestal_crown_iron_name
		description = artifact_pedestal_crown_iron
		type = pedestal
		template = crown_iron_template
		visuals = pedestal_crown_iron
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created
			date = 313.2.1
			recipient = character:70523 #Konstantinos I the Great
			location = province:496 #Constantinople
		}
		modifier = iron_crown_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = iron_crown
		add_artifact_history = {
			type = given
			date = 600.1.1
			actor = character:7893
			recipient = character:190171
			location = province:2475
		}
		add_artifact_history = {
			type = given
			date = 774.7.10
			recipient = character:6392
			location = province:2475
		}
		add_artifact_history = {
			type = given
			date = 781.1.1
			recipient = character:6394
			location = province:2475
		}
		add_artifact_history = {
			type = inherited
			date = 810.1.1
			recipient = character:6396
			location = province:2475
		}
		add_artifact_history = {
			type = inherited
			date = 818.4.17
			recipient = character:90095
			location = province:2475
		}
		add_artifact_history = {
			type = inherited
			date = 887.1.1
			recipient = character:71901
			location = province:2475
		}
		# k_italy history copied manually because it is destroyed before 1066
		add_artifact_history = {
			type = inherited
			date = 896.1.1
			recipient = character:167969 #Liutfrido
		}
		add_artifact_history = {
			type = inherited
			date = 905.3.1
			recipient = character:167970 #Gotofredo
		}
		add_artifact_history = {
			type = inherited
			date = 910.8.4
			recipient = character:167971 #Gausberto
		}
		add_artifact_history = {
			type = inherited
			date = 940.1.1
			recipient = character:167972 #Uberto
		}
		add_artifact_history = {
			type = inherited
			date = 941.11.1
			recipient = character:167973 #Adalberto
		}
		add_artifact_history = {
			type = inherited
			date = 967.1.1
			recipient = character:7727 #Aleramo Aleramicci
		}
		add_artifact_history = {
			type = inherited
			date = 991.1.1
			recipient = character:7728 #Ottone I
		}
		add_artifact_history = {
			type = inherited
			date = 991.6.1
			recipient = character:7729 #Guglielmo I
		}
		add_artifact_history = {
			type = inherited
			date = 941.11.1
			recipient = character:167973 #Adalberto
		}
		add_artifact_title_history = {
			target = title:e_hre
			date = 1039.2.4
		}
		save_scope_as = epic
	}
}
	}

	{
create_artifact_nikephoros_crown_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_famed = yes

	# Create the artifact
	create_artifact = {	
		name = nikephoros_crown_name
		description = nikephoros_crown_description
		type = pedestal
		visuals = pedestal_justinian
		template = justinian_template #Same as Justinian
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created
			date = 963.7.2
			recipient = character:1712 #Nikephoros Phokas
			location = province:496 #Constantinople
		}
		modifier = nikephoros_crown_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = {
			name = artifact_succession_title
			value = title:e_byzantium
		}
		add_artifact_title_history = {
			target = title:e_byzantium
			date = 969.12.10
		}
	}
}
	}

	{
create_artifact_essen_crown_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_famed = yes

	# Create the artifact
	create_artifact = {	
		name = essen_crown_name
		description = essen_crown_description
		type = pedestal
		wealth = scope:wealth
		quality = scope:quality
		visuals = hre_crown
		template = general_unique_template
		history = {
			type = created
			date = 983.1.1
			recipient = character:1288 #Otto III
			location = province:2677 #Essen
		}
		modifier = essen_crown_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		add_artifact_title_history = {
			target = title:e_hre
			date = 1002.1.23
		}
		set_variable = {
			name = artifact_succession_title
			value = title:e_hre
		}
	}
}
	}

	{
create_artifact_curtana_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {
		name = artifact_curtana_name
		description = artifact_curtana_description
		template = general_unique_template
		type = pedestal
		visuals = sword_court
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created
			date = 1042.6.9
			recipient = character:114 #Eadward the Confessor
			location = province:1527 #Lunden
		}
		modifier = curtana_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = curtana
		save_scope_as = epic
		add_artifact_title_history = {
			target = title:k_england
			date = 1066.1.5
		}
	}
}
	}

	{
create_artifact_papal_tiara_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = papal_tiara_name
		description = papal_tiara_description
		template = papal_tiara_template
		type = helmet
		visuals = pope_tiara
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created
			date = 800.1.1
			recipient = character:7862 #Leo III - fictitious date, probably somewhere between the 8th and 9th centuries
			location = province:2575 #Rome
		}
		modifier = artifact_monthly_piety_4_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = {
			name = relic
			value = flag:christian
		}
		set_variable = {
			name = artifact_succession_title
			value = title:k_papal_state
		}
		set_variable = {
			name = pope_hat
			value = yes
		}
		add_artifact_title_history = {
			target = title:k_papal_state
			date = 816.6.12
		}
		add_artifact_modifier = artifact_monthly_learning_lifestyle_xp_2_modifier
	}
}
	}

	{
create_artifact_statue_constantine_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_famed = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_statue_constantine_name
		description = artifact_statue_constantine
		type = sculpture
		visuals = statue_constantine
		wealth = scope:wealth
		quality = scope:quality
		template = statue_constantine_template
		history = {
			type = created
			date = 330.1.1
			recipient = character:70523 #Constantine the Great
			location = province:496 #Constantinople
		}
		modifier = statue_constantine_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = statue_constantine
		save_scope_as = epic
		add_artifact_title_history = {
			target = title:e_byzantium
			date = 330.1.1
		}
	}
}
	}
}

"common/scripted_effects/00_ep1_inspiration_effects.txt" = {
	{
							10 = {
								modifier = {
									OR = {
										scope:adventurer.adventure_inspiration_average_skill_value >= high_inspiration_skill
										AND = {
											exists = scope:inspiration_owner.var:artifact_quality
											scope:inspiration_owner.var:artifact_quality > high_adventurer_epic_quality_level #Cumulative event choices
										}
									}
									add = 5
								}
								trigger = {
									NOT = {
										any_artifact = {
											has_variable = crown_of_justinian
										}
									}
									scope:location ?= {
										OR = {
											geographical_region = custom_eastern_roman_empire
											culture = { has_cultural_pillar = heritage_byzantine }
										}
									}
								}
								create_artifact_pedestal_justinian_effect = { OWNER = root }
							}
	}
	
	{
							10 = { #Head of St Edmund
								modifier = {
									OR = {
										scope:adventurer.adventure_inspiration_average_skill_value >= high_inspiration_skill
										AND = {
											exists = scope:inspiration_owner.var:artifact_quality
											scope:inspiration_owner.var:artifact_quality > high_adventurer_epic_quality_level #Cumulative event choices
										}
									}
									add = 5
								}
								trigger = {
									NOT = {
										any_artifact = {
											has_variable = edmund_head
										}
									}
									scope:location ?= {
										OR = {
											geographical_region = world_europe_west_britannia
											geographical_region = world_europe_north
										}
									}
								}
								create_artifact_edmund_head_effect = { OWNER = root }
							}
	}
	
	{
							10 = { #Recreate if lost
								modifier = {
									OR = {
										scope:adventurer.adventure_inspiration_average_skill_value >= high_inspiration_skill
										AND = {
											exists = scope:inspiration_owner.var:artifact_quality
											scope:inspiration_owner.var:artifact_quality > high_adventurer_epic_quality_level #Cumulative event choices
										}
									}
									add = 5
								}
								trigger = {
									NOT = {
										any_artifact = {
											has_variable = charlamagne_throne
										}
									}
									scope:location ?= {
										OR = {
											geographical_region = custom_carolingian_francia
											geographical_region = custom_carolingian_germany
											geographical_region = custom_lotharingia
											geographical_region = custom_northern_italy
										}
									}
								}
								create_artifact_throne_charlemagne_effect = { OWNER = root }
							}
	}
	
	{
							10 = {
								modifier = {
									OR = {
										scope:adventurer.adventure_inspiration_average_skill_value >= high_inspiration_skill
										AND = {
											exists = scope:inspiration_owner.var:artifact_quality
											scope:inspiration_owner.var:artifact_quality > high_adventurer_epic_quality_level #Cumulative event choices
										}
									}
									add = 5
								}
								trigger = {
									NOT = {
										any_artifact = {
											has_variable = throne_scone
										}
									}
									scope:location ?= {
										geographical_region = world_europe_west_britannia
									}
								}
								create_artifact_throne_scone_effect = { OWNER = root }
							}
	}
	
	{
							10 = {
								modifier = {
									OR = {
										scope:adventurer.adventure_inspiration_average_skill_value >= high_inspiration_skill
										AND = {
											exists = scope:inspiration_owner.var:artifact_quality
											scope:inspiration_owner.var:artifact_quality > high_adventurer_epic_quality_level #Cumulative event choices
										}
									}
									add = 5
								}
								trigger = {
									NOT = {
										any_artifact = {
											has_variable = sword_attila
										}
									}
									scope:location ?= {
										OR = {
											geographical_region = custom_south_slavia
											geographical_region = custom_carpathia
											geographical_region = ghw_region_crimea
											geographical_region = custom_bavaria
										}
									}
								}
								create_artifact_wall_sword_attila_effect = { OWNER = root }
							}
	}

	{
							10 = { #Recreate if lost
								modifier = {
									OR = {
										scope:adventurer.adventure_inspiration_average_skill_value >= high_inspiration_skill
										AND = {
											exists = scope:inspiration_owner.var:artifact_quality
											scope:inspiration_owner.var:artifact_quality > high_adventurer_epic_quality_level #Cumulative event choices
										}
									}
									add = 5
								}
								trigger = {
									NOT = {
										any_artifact = {
											has_variable = iron_crown
										}
									}
									scope:location ?= {
										OR = {
											geographical_region = custom_northern_italy
											culture = { has_cultural_pillar = heritage_latin }
										}
									}
								}
								create_artifact_pedestal_crown_iron_effect = { OWNER = root }
							}
	}

	{
							10 = { #Curtana
								modifier = {
									OR = {
										scope:adventurer.adventure_inspiration_average_skill_value >= high_inspiration_skill
										AND = {
											exists = scope:inspiration_owner.var:artifact_quality
											scope:inspiration_owner.var:artifact_quality > high_adventurer_epic_quality_level #Cumulative event choices
										}
									}
									add = 5
								}
								trigger = {
									any_artifact = {
										count < 1
										has_variable = curtana
									}
									scope:location ?= {
										OR = {
											geographical_region = world_europe_west
											geographical_region = world_europe_south
										}
									}
								}
								create_artifact_curtana_effect = { OWNER = ROOT }
							}
	}

	{
							10 = { #Constantine statue
								modifier = {
									OR = {
										scope:adventurer.adventure_inspiration_average_skill_value >= high_inspiration_skill
										AND = {
											exists = scope:inspiration_owner.var:artifact_quality
											scope:inspiration_owner.var:artifact_quality > high_adventurer_epic_quality_level #Cumulative event choices
										}
									}
									add = 5
								}
								trigger = {
									any_artifact = {
										count < 3
										has_variable = statue_constantine
									}
									scope:location ?= {
										OR = {
											geographical_region = world_europe_south_italy #Rome
											geographical_region = world_asia_minor #Constantinople
										}
									}
								}
								create_artifact_statue_constantine_effect = { OWNER = root }
							}
	}
}

"common/scripted_effects/00_ep1_artifact_creation_effects.txt" = {
	{
		10 = { #Crown of Justinian
			trigger = {
				NOT = {
					any_artifact = { has_variable = crown_of_justinian }
				}
				$LOCATION$ ?= {
					OR = {
						geographical_region = custom_eastern_roman_empire
						culture = { has_cultural_pillar = heritage_byzantine }
					}
				}
			}
			create_artifact_pedestal_justinian_effect = { OWNER = root }
		}
	}
	
	{
		10 = { #Attila's Sword
			trigger = {
				NOT = {
					any_artifact = { has_variable = sword_attila }
				}
				$LOCATION$ ?= {
					OR = {
						geographical_region = custom_south_slavia
						geographical_region = custom_carpathia
						geographical_region = ghw_region_crimea
						geographical_region = custom_bavaria
					}
				}
			}
			create_artifact_wall_sword_attila_effect = { OWNER = root }
		}
	}
	
	{
		10 = { #Throne of Scone
			trigger = {
				NOT = {
					any_artifact = { has_variable = throne_scone }
				}
				$LOCATION$ ?= { geographical_region = world_europe_west_britannia }
			}
			create_artifact_throne_scone_effect = { OWNER = root }
		}
	}
	
	{
		10 = { #Throne of Charlemagne - Recreate if lost
			trigger = {
				NOT = {
					any_artifact = { has_variable = charlamagne_throne }
				}
				$LOCATION$ ?= {
					OR = {
						geographical_region = custom_carolingian_francia
						geographical_region = custom_carolingian_germany
						geographical_region = custom_lotharingia
						geographical_region = custom_northern_italy
					}
				}
			}
			create_artifact_throne_charlemagne_effect = { OWNER = root }
		}
	}
	
	{
		10 = { #Head of St Edmund
			trigger = {
				NOT = {
					any_artifact = {
						has_variable = edmund_head
					}
				}
				$LOCATION$ ?= {
					OR = {
						geographical_region = world_europe_west_britannia
						geographical_region = world_europe_north
					}
				}
			}
			create_artifact_edmund_head_effect = { OWNER = root }
		}
	}

	{
		10 = { #Iron Crown - Recreate if lost
			trigger = {
				NOT = {
					any_artifact = { has_variable = iron_crown }
				}
				$LOCATION$ ?= {
					OR = {
						geographical_region = custom_northern_italy
						culture = { has_cultural_pillar = heritage_latin }
					}
				}
			}
			create_artifact_pedestal_crown_iron_effect = { OWNER = root }
		}
	}

	{
		10 = { #Curtana
			trigger = {
				any_artifact = {
					count < 1
					has_variable = curtana
				}
				$LOCATION$ ?= {
					OR = {
						geographical_region = world_europe_west
						geographical_region = world_europe_south
					}
				}
			}
			create_artifact_curtana_effect = { OWNER = ROOT }
		}
	}
}

"common/scripted_effects/01_dlc_fp3_scripted_effects.txt" = {
	{
		set_coa = house:house_seljuk
	}
}

"common/scripted_modifiers/00_marriage_scripted_modifiers.txt" = {
	{
	#############
	#  HAROLD   #
	#############
	modifier = {
		add = -5000
		years_from_game_start <= 5
		OR = {
			scope:actor = character:122
			scope:recipient = character:122
			scope:secondary_actor = character:122
			scope:secondary_recipient = character:122
		}
		scope:actor = {
			is_ai = yes
		}
		scope:recipient = {
			is_ai = yes
		}
		scope:secondary_actor = {
			is_ai = yes
		}
		scope:secondary_recipient = {
			is_ai = yes
		}
	}
	}
}

"events/bookmark_events.txt" = {
	{
#	Basileios has just murdered Michael.
## Credit to Stu Taylor of Dead Good Comics for the title line and entire lead-in to this event.
bookmark.0211 = {
	type = character_event
	title = bookmark.0211.t
	desc = bookmark.0211.desc
	theme = murder_scheme
	left_portrait = {
		character = scope:basil
		animation = toast_goblet
		outfit_tags = { military_outfit no_cloak no_headgear }
	}
	right_portrait = {
		character = scope:michael
		animation = map_fear
	}
	override_background = { reference = ep3_byzantine_feast }

	trigger = { is_alive = yes }

	immediate = {
		play_music_cue = "mx_cue_murder"
		character:1700 = { save_scope_as = basil }
		character:70490 = {
			save_scope_as = michael
			# Remove his nickname, which we have to leave on him for future bookmarks otherwise.
			hidden_effect = { remove_nickname = yes }
		}
	}

	# Michael the Drunkard.
	option = {
		name = bookmark.0211.a
		flavor = bookmark.0211.a.flavour
		
		scope:michael = { give_nickname = nick_the_drunkard_michael_iii }
		add_legitimacy_effect = { LEGITIMACY = major_legitimacy_gain }

		# No stress, no AI.
	}
	
	# Michael the Pious.
	option = {
		name = bookmark.0211.b
		trigger = { is_ai = no }
		flavor = bookmark.0211.b.flavour

		scope:michael = { give_nickname = nick_the_pious_michael_iii }
		add_piety = massive_piety_gain

		# No stress, no AI.
	}
	
	# Michael the Young.
	option = {
		name = bookmark.0211.c
		trigger = { is_ai = no }
		flavor = bookmark.0211.c.flavour

		scope:michael = { give_nickname = nick_the_young_michael_iii }

		domicile ?= {
			switch = {
				trigger = has_domicile_building
				vineyard_05 = { add_domicile_building = vineyard_06 }
				vineyard_04 = { add_domicile_building = vineyard_05 }
				vineyard_03 = { add_domicile_building = vineyard_04 }
				vineyard_02 = { add_domicile_building = vineyard_03 }
				vineyard_01 = { add_domicile_building = vineyard_02 }
				fallback = {
					if = {
						limit = { free_external_domicile_building_slots >= 1 }
						add_domicile_building = vineyard_01
					}
					else = {
						root = { add_prestige = major_prestige_gain }
					}
				}
			}
		}

		# No stress, no AI.
	}
}
	}

	{
# The Seljuk Scion
bookmark.1073 = {
	type = character_event
	title = bookmark.1073.t
	desc = bookmark.1073.desc
	theme = martial
	override_background = { reference = terrain_scope }
	
	left_portrait = {
		character = root
		animation = stress
	}
	right_portrait = {
		character = scope:alp_arslan
		animation = war_over_win
	}
	lower_left_portrait = scope:qutalmish
	lower_right_portrait = scope:tughril

	immediate = {
		character:3040 = { save_scope_as = alp_arslan }
		character:3033 = { save_scope_as = qutalmish }
		character:3038 = { save_scope_as = tughril }
		title:e_persia.title_capital_county.title_province = { save_scope_as = background_terrain_scope }
		show_as_tooltip = {
			scope:alp_arslan = {
				set_relation_rival = { reason = rival_killed_parent target = root }
			}
			add_realm_law = camp_purpose_mercenaries
		}
		if = {
			limit = {
				has_mpo_dlc_trigger = yes
			}
			spawn_army = {
				name = event_troop_default_name
				men_at_arms = {
					type = horse_archers
					stacks = 2
				}
				men_at_arms = {
					type = steppe_raiders
					stacks = 2
				}
				men_at_arms = {
					type = heavy_horse_archers
					stacks = 2
				}
				location = root.location
				origin = root.location
			}
		}
		else = {
			spawn_army = {
				name = event_troop_default_name
				men_at_arms = {
					type = horse_archers
					stacks = 2
				}
				men_at_arms = {
					type = steppe_raiders
					stacks = 2
				}
				men_at_arms = {
					type = heavy_horse_archers
					stacks = 2
				}
				location = root.location
				origin = root.location
			}
		}
	}

	option = {
		name = bookmark.1073.a
		add_prestige_level = 1
		if = {
			limit = {
				has_mpo_dlc_trigger = yes
			}
			spawn_army = {
				name = event_troop_default_name
				men_at_arms = {
					type = horse_archers
					stacks = 2
				}
				men_at_arms = {
					type = steppe_raiders
					stacks = 2
				}
				men_at_arms = {
					type = heavy_horse_archers
					stacks = 2
				}
				location = root.location
				origin = root.location
			}
		}
		else = {
			spawn_army = {
				name = event_troop_default_name
				men_at_arms = {
					type = horse_archers
					stacks = 2
				}
				men_at_arms = {
					type = light_horsemen
					stacks = 2
				}
				men_at_arms = {
					type = light_footmen
					stacks = 2
				}
				location = root.location
				origin = root.location
			}
		}
		ai_chance = {
			base = 90
		}
	}

	option = {
		name = bookmark.1073.b
		add_unpressed_claim = title:e_persia
		add_realm_law = camp_purpose_legitimists
		scope:alp_arslan = {
			set_relation_nemesis = { reason = rival_killed_parent target = root }
		}
		ai_chance = {
			base = 10
		}
	}
}
	}

	{
###Æthelred isn't as cool as Alfred so we kill him
bookmark.0001 = { #by Mathilda Bjarnehed
	type = character_event
	hidden = yes
	
	trigger = {
		this = character:33358 #Æthelred
		is_ai = yes
		exists = player_heir
		player_heir = character:7627 #Alfred the Great
	}

	immediate = {
		if = {
			limit = { is_at_war = yes }

			random_list = {
				20 = { #Very wounded
					increase_wounds_effect = { REASON = battle }
					if = {
						limit = { is_alive = yes }
						increase_wounds_effect = { REASON = battle }
					}
					if = {
						limit = { is_alive = yes }
						increase_wounds_effect = { REASON = battle }
					}
					if = {
						limit = { is_alive = yes }
						increase_wounds_effect = { REASON = battle }
					}
				}
				80 = { #Killed
					random_war_enemy = {
						if = {
							limit = { is_commanding_army = yes }
							save_scope_as = killer
						}
						else = {
							random_knight = {
								save_scope_as = killer
							}
						}
					}
					if = {
						limit = { exists = scope:killer }
						death = {
							death_reason = death_hunting_accident
							killer = scope:killer
						}
					}
				}
			}	
		}
		else = {
			random_list = {
				10 = { #Cancer
					contract_disease_effect = { DISEASE = cancer TREATMENT_EVENT = no }
				}
				90 = { #Hunting accident
					death = {
						death_reason = death_hunting_accident
					}
				}
			}	
		}
	}
}
		
### Alfred is pretty cool so we give him a nickname
bookmark.0002 = { #by Mathilda Bjarnehed
	type = character_event
	title = bookmark.0002.t
	desc = bookmark.0002.desc
	theme = crown
	left_portrait = {
		character = root
		animation = personality_honorable
	}
	
	trigger = {
		is_ai = no
		is_independent_ruler = yes
	}

	#Resend
	on_trigger_fail = {
		if = {
			limit = { is_ai = no }
			trigger_event = {
				id = bookmark.0002
				days = 1800 #~5 years
			}
		}
	}

	immediate = {
		play_music_cue = "mx_cue_positive_effect"
		capital_province = { save_scope_as = capital }
		random_realm_province = {
			limit = { NOT = { this = scope:capital } }
			save_scope_as = province
		}
		give_nickname = nick_the_great
	}

	option = {
		name = bookmark.0002.a
	}
}
	}
	
	{
### The Ragnarsson brothers catch King Aella ##
# The event can trigger when you imprison Aella as one of his sons
# It also works for other norse!

bookmark.0003 = { #by Mathilda Bjarnehed
	type = character_event
	hidden = yes
	
	trigger = {
		scope:imprisoner.faith = { trait_is_virtue = vengeful }
		scope:imprisoner = {
			any_close_family_member = {
				even_if_dead = yes
				exists = killer
				killer = root
				save_temporary_scope_as = killed_character
			}
		}
		#If the imprisoner don't know you're the killer you might reveal yourself if you're dumb or not sneaky
		trigger_if = {
			limit = {
				any_secret = {
					secret_type = secret_murder
					secret_target = scope:killed_character
					NOT = { any_secret_knower = { this = scope:imprisoner } }
				}
			}
			OR = {
				has_trait = intellect_bad
				has_trait = dull
				intrigue <= medium_skill_rating
			}
			NOR = {
				has_trait = shrewd
				has_trait = intellect_good
				has_trait = schemer
			}
		}
		trigger_if = {
			limit = { this = character:163103 } #Aella
			NOT = {
				is_target_in_global_variable_list = {
					name = triggered_bookmark_events
					target = flag:bookmark_867_northmen_aellas_capture
				}
			}
		}
	}

	immediate = {
		if = {
			limit = { this = character:163103 } #Aella
			add_to_global_variable_list = {
				name = triggered_bookmark_events
				target = flag:bookmark_867_northmen_aellas_capture
			}
		}
		save_scope_as = prisoner

		scope:imprisoner = {
			random_close_family_member = {
				even_if_dead = yes
				limit = {
					exists = killer
					killer = root
					this = character:163109 #Lodbrok
				}
				alternative_limit = {
					exists = killer
					killer = root
				}
				save_scope_as = dead
			}
			trigger_event = {
				id = bookmark.0004
				days = 1
			}
		}
	}
}
	}
	
	{
bookmark.0004 = { #by Mathilda Bjarnehed
	type = character_event
	title = bookmark.0004.t
	desc = {
		first_valid = {
			triggered_desc = {
			    trigger = { #You did not know they had killed your family-member
					scope:prisoner = {
						any_secret = {
	    					secret_type = secret_murder
	    					secret_target = scope:dead
	    					NOT = { any_secret_knower = { this = root } }
	    				}
					}
			    }
			    desc = bookmark.0004.desc_unknown
			}
			desc = bookmark.0004.desc
		}
	}
	theme = dungeon
	left_portrait = {
		character = scope:prisoner
		animation = fear
	}
	lower_right_portrait = scope:dead

	trigger = {
		NOT = {
			any_in_list = {
				list = captured_rivals
				this = scope:prisoner
			}
		}
	}
	
	immediate = {
		play_music_cue = "mx_cue_murder"
		if = {
			limit = {
				scope:prisoner = {
					any_secret = {
    					secret_type = secret_murder
    					secret_target = scope:dead
    					NOT = { any_secret_knower = { this = root } }
    				}
				}
			}
			scope:prisoner = {
				random_secret = {
					limit = {
						secret_type = secret_murder
						secret_target = scope:dead
						NOT = { any_secret_knower = { this = root } }
					}
					reveal_to = root
				}
			}
		}
	}

	#Blood eagle
	option = {
		name = bookmark.0004.a
		
		add_dread = medium_dread_gain
		add_prestige = medium_prestige_gain
		scope:prisoner = {
			death = {
				death_reason = death_execution_blood_eagle
				killer = root
			}
		}
		scope:dead = {
			every_close_family_member = {
				custom = bookmark.0004.a.custom
				limit = { NOT = { this = root } }
				add_opinion = {
					modifier = pleased_opinion
					opinion = 30
					target = root
				}
			}
		}
		execute_opinion_effect = { VICTIM = scope:prisoner EXECUTIONER = root }

		ai_chance = {
			base = 50
			modifier = {
				scope:dead = character:163109 #Lodbrok
				add = 1000
			}
		}
	}

	#Sacrifice to Odin
	option = {
		name = bookmark.0004.b
		trigger = { faith = { has_doctrine_parameter = human_sacrifice_active } }

		add_piety = major_piety_gain
		scope:prisoner = {
			death = {
				death_reason = death_execution_blood_eagle
				killer = root
			}
		}
		scope:dead = {
			every_close_family_member = {
				custom = bookmark.0004.a.custom
				limit = { NOT = { this = root } }
				add_opinion = {
					modifier = pleased_opinion
					opinion = 30
					target = root
				}
			}
		}
		execute_opinion_effect = { VICTIM = scope:prisoner EXECUTIONER = root }

		ai_chance = {
			base = 50
		}
	}
	
	#I have other plans...
	option = {
		name = bookmark.0004.c
		
		ai_chance = {
			base = 0
			modifier = {
				ai_vengefulness <= medium_negative_ai_value
				add = 100
			}
		}
	}
}
	}
	
	{
# The matter of Jaromir
bookmark.1069 = {
	type = character_event
	title = bookmark.1069.t
	desc = bookmark.1069.desc
	theme = faith
	override_background = { reference = holy_site_generic }
	override_effect_2d = {
		reference = rain
	}
	left_portrait = {
		character = character:john_monk
		animation = prayer
	}
	right_portrait = {
		character = scope:jaromir
		animation = dismissal
	}
	lower_right_portrait = root.faith.religious_head

	trigger = {
		character:528 ?= {
			is_alive = yes
			is_councillor_of = root
		}
		character:john_monk ?= {
			is_alive = yes
		}
	}

	immediate = {
		play_music_cue = "mx_cue_negative"
		character:528 = {
			save_scope_as = jaromir
		}
		character:john_monk = {
			save_scope_as = john_monk
		}
	}

	option = { # Replace Jaromir with John
		name = bookmark.1069.a
		flavor = bookmark.1069.a_flavor
		
		faith.religious_head = {
			add_opinion = {
				target = root
				modifier = impious_opinion
				opinion = -30
			}
		}
		
		create_title_and_vassal_change = {
  			type = granted
  			save_scope_as = change
  		}
  		title:c_opava = {
	  		change_title_holder = {
				holder = scope:john_monk
				change = scope:change
				take_baronies = no
			}
  		}
		resolve_title_and_vassal_change = scope:change
		scope:john_monk = {
			hidden_effect = {
				change_government = theocracy_government
			}
		}
		if = {
			limit = { character:528 = { is_councillor_of = root } }
			fire_councillor = character:528
		}
		assign_councillor_type = {
			type = councillor_court_chaplain
			remove_existing_councillor = yes
			target = character:john_monk
		}
		add_character_flag = {
			flag = bishop_assignment
			days = 1
		}
		ai_chance = {
			base = 25
		}
	}

	option = { # Make great concessions to Jaromir
		name = bookmark.1069.b
		flavor = bookmark.1069.b_flavor
		
		pay_short_term_gold = {
			target = scope:jaromir
			gold = medium_gold_value
		}
		
		scope:jaromir = {
			add_opinion = {
				target = root
				modifier = pleased_opinion
				opinion = 30
			}
			remove_relation_rival = root
		}

		ai_chance = {
			base = 75
		}
	}

	option = { # Make great concessions to Jaromir
		name = bookmark.1069.c
		flavor = bookmark.1069.c_flavor

		ai_chance = {
			base = 75
		}
	}
	
	after = {
		hidden_effect = {
			if = {
				limit = {
					has_character_flag = bishop_assignment
				}
				assign_councillor_type = {
					type = councillor_court_chaplain
					remove_existing_councillor = yes
					target = character:john_monk
				}
			}
		}
	}
}
	}
	
	{
###	Daurama takes Bawo under her wing.
bookmark.0101 = {
	type = character_event
	title = bookmark.0101.t
	desc = {
		desc = bookmark.0101.desc_intro
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:bayajidda = { is_alive = yes }
				}
				desc = bookmark.0101.desc_living
			}
			desc = bookmark.0101.desc_dead
		}
	}
	theme = crown
	left_portrait = {
		character = root
		animation = personality_rational
	}
	right_portrait = {
		character = scope:bayajidda
	}
	lower_center_portrait = {
		character = scope:bewo
	}

	trigger = {
		is_ai = no
		character:251181 = { is_alive = yes }
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		character:251180 = { save_scope_as = bayajidda }
		character:251181 = { save_scope_as = bewo }
		character:251252 = { save_scope_as = shawata }
		title:k_hausaland = { save_scope_as = hausaland}
	}

	# Remember your heritage, my child.
	option = {
		name = bookmark.0101.a

		#Move Bewo to Daurama's house.
		custom_tooltip = bookmark.0101.a.tt
		character:251181 = { set_house = root.house }
		add_courtier = character:251181 #Move him to your court

		#Bayajidda is, understandably, a little hurt by all this.
		character:251180 = {
			add_opinion = {
				modifier = hurt_opinion
				target = root
				opinion = -20
			}
		}

		ai_chance = {
			base = 0	#The AI should never get this event, but if they do, shouldn't opt in.
		}
	}
	
	# He is my blood, whatever his name.
	option = {
		name = bookmark.0101.b

		character:251180 = {
			add_opinion = {
				modifier = pleased_opinion
				target = root
				opinion = 40
			}
		}
		custom_tooltip = bookmark.0101.b.tt

		ai_chance = {
			base = 100	#AI doesn't get this event, but should always pick no.
		}
	}

	# The Magajiya will continue to rule!
	option = {
		name = bookmark.0101.c

		add_realm_law_skip_effects = female_preference_law
		scope:bewo = { 
			set_house = root.house
			add_trait = disinherited
		}
		scope:shawata = {	
			if = {
				limit = {
					is_alive = yes
					OR = {
						matrilinear_marriage = yes
						is_married = no
					}
				}
				custom_tooltip = bookmark.0101.c.tt
			}
			else = {
				custom_tooltip = bookmark.0101.b.tt
			}
		}
		

		ai_chance = {
			base = 0	#The AI should never get this event, but if they do, shouldn't opt in.
		}
	}
}
	}
	
	{
###	Matilda start-up event
bookmark.1066 = {
	type = character_event
	title = bookmark.1066.t
	desc = bookmark.1066.desc
	theme = marriage
	override_background = { reference = ep2_wedding_ceremony }
	override_effect_2d = {
		reference = rain	
	}
	left_portrait = {
		character = root
		animation = stress
	}
	right_portrait = {
		character = scope:hunchback
		animation = ecstasy
	}
	lower_right_portrait = {
		character = scope:hunchbacks_father
	}
	lower_left_portrait = {
		character = scope:mum
	}

	trigger = {
		#this = character:7757
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		character:20248 = { save_scope_as = hunchback }
		character:11030 = { save_scope_as = hunchbacks_father }
		mother = { save_scope_as = mum }
		hidden_effect = {
			add_opinion = {
				target = scope:hunchback
				modifier = disgusted_opinion
				opinion = -75
			}
		}
	}

	option = { # Murder the husband, with a *hefty* bonus (*Potentially* Historical Option)
		name = bookmark.1066.a
		flavor = bookmark.1066.a_flavor
		
		marry = scope:hunchback
		
		if = {
			limit = {
				NOT = {
					any_scheme = {
						scheme_type = murder
						scheme_target_character = scope:hunchback
					}
				}
			}
			start_scheme = {
				target_character = scope:hunchback
				type = murder
			}
		}
		custom_tooltip = diplomacy_family.2250.b.tt
		hidden_effect = {
			random_scheme = {
				limit = {
					scheme_type = murder
					scheme_target_character = scope:hunchback
				}
				add_scheme_modifier = {
					type = massive_extra_success_chance_modifier
				}
			}
		}

		ai_chance = {
			base = 100
		}
	}

	option = { # Physically abandon and permanently avoid him (Historical Option)
		name = bookmark.1066.b
		flavor = bookmark.1066.b_flavor
		
		add_character_modifier = {
			modifier = abandoned_marriage_modifier
		}
		
		if = {
			limit = {
				betrothed ?= scope:hunchback
			}
			break_betrothal = scope:hunchback
		}
		else_if = {
			limit = {
				is_spouse_of = scope:hunchback
			}
			divorce_effect = {
				DIVORCER = root
				DIVORCEE = scope:hunchback
			}
		}
		
		scope:hunchbacks_father = {
			if = {
				limit = {
					NOT = {
						scope:hunchback = {
							is_courtier_of = scope:hunchbacks_father
						}
					}
				}
				add_courtier = scope:hunchback
			}
		}
		
		reverse_add_opinion = {
			target = scope:hunchback
			modifier = abandoned_me_opinion
			years = 30
			opinion = -50
		}
		
		reverse_add_opinion = {
			target = scope:hunchbacks_father
			modifier = insulted_opinion
			years = 30
			opinion = -50
		}

		ai_chance = {
			base = 100
		}
	}

	option = { # Use your influence to flip the lineality of the marriage
		name = bookmark.1066.c
		flavor = bookmark.1066.c_flavor
		
		add_piety = -100
		
		marry_matrilineal = scope:hunchback
		
		reverse_add_opinion = {
			target = scope:hunchbacks_father
			modifier = annoyed_opinion
			opinion = -20
		}

		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				scope:hunchbacks_father = {
					is_ai = no
				}
			}
		}
	}

	option = { # Just hope he dies...
		name = bookmark.1066.d
		flavor = lineality_warning
		add_internal_flag = dangerous
		
		marry = scope:hunchback

		ai_chance = {
			base = 100
		}
	}
}
	}

	{
###We let the player decide which dynasty Sibylla's son will belong to avoid undesirable potential game overs
bookmark.0300 = { # by Nicholas Legault
	type = character_event
	title = bookmark.0300.t
	desc = bookmark.0300.desc

	theme = family
	left_portrait = {
		character = root
		animation = personality_rational
	}
	lower_center_portrait = {
		character = scope:dead_husband
		animation = dead
	}
	right_portrait = {
		character = scope:baby_baudouin
	}

	trigger = {
		is_ai = no
		AND = {
			character:223541 = {
				is_ai = yes
				is_alive = yes
			}
		}
	}

	immediate = {
		character:223541 = { save_scope_as = baby_baudouin }
		character:223540 = { save_scope_as = dead_husband }
	}

	option = {
		name = bookmark.0300.a

		character:223541 = { set_house = root.house }

		ai_chance = {
			base = 0 # The AI shouldn't get this event, but should want to maintain the status quo if it did
		}
	}
	
	option = {
		name = bookmark.0300.b
		
		ai_chance = {
			base = 100	# AI doesn't get this event, but should always pick no.
		}
		custom_tooltip = bookmark.0300.b.tt
	}
}
	}
}

"events/single_combat_events.txt" = {
	{
		# Historical
		dynasty = dynasty:1055
		house = house:house_british_isles_wessex
	}
	{
		dynasty = dynasty:vanity_riedinger
	}
}

"events/game_rule_events.txt" = {
	{
game_rule.1011 = {
	scope = none
	hidden = yes

	trigger = {
		game_start_date <= 867.1.1
	}

	immediate = {
		#launch_historical
		if = {
			limit = { has_game_rule = launch_historical }
			trigger_event = {
				id = game_rule.1012
				months = { 360 480 }
			}
		}
		#launch_immediate
		if = {
			limit = { has_game_rule = launch_immediate }
			character:159137 = {
				add_character_flag = undertaking_hungarian_migration
				start_war = {
					cb = hungarian_migration_cb
					target = character:70382
					target_title = title:k_hungary
				}
			}
		}
		#launch_random
		if = {
			limit = { has_game_rule = launch_random }
			trigger_event = {
				id = game_rule.1012
				months = { 60 480 }
			}
		}
		#launch_off: just do nothing.
	}
}
	}

	{
#	Figure out whether we should fire a conclusion event during the Conquest.
game_rule.1021 = {
	hidden = yes

	trigger = {
		exists = global_var:deterministic_conquest_of_england_1066
		NAND = {
			exists = global_var:norwegian_invasion_cb_concluded
			exists = global_var:norman_conquest_cb_concluded
		}
		OR = {
			has_game_rule = historicity_norman_conquest_determined_harold
			has_game_rule = historicity_norman_conquest_determined_harald
			game_rule_rig_norman_conquest_for_hereward_trigger = yes
			has_game_rule = historicity_norman_conquest_determined_edgar
			has_game_rule = historicity_norman_conquest_determined_margaret
			has_game_rule = historicity_norman_conquest_determined_aelfwine
			has_game_rule = historicity_norman_conquest_determined_svend
			has_game_rule = historicity_norman_conquest_determined_cadoc
		}
		any_character_war = {
			OR = {
				using_cb = norman_conquest_cb
				using_cb = norwegian_invasion_cb
			}
		}
	}

	immediate = {
		# We do this in the immediate because uhhh... it was _not_ liking being in the trigger for some reason.
		scope:army.involved_combat_side ?= {
			side_primary_participant = { save_scope_as = char_1 }
			enemy_side.side_primary_participant = {
				if = {
					limit = {
						any_character_war = {
							OR = {
								using_cb = norman_conquest_cb
								using_cb = norwegian_invasion_cb
							}
						}
					}
					save_scope_as = char_2
				}
			}
		}
		if = {
			limit = {
				exists = scope:char_1
				exists = scope:char_2
			}
			# Double check what narrative we'd use.
			scope:new_location = {
				# Historical settings.
				## Stamford Bridge.
				if = {
					limit = { this = province:1588 }
					save_scope_value_as = {
						name = locale
						value = flag:stamford_bridge
					}
				}
				## Hastings.
				else_if = {
					limit = { this = province:1509 }
					save_scope_value_as = {
						name = locale
						value = flag:hastings
					}
				}
				# Likely mechanical spots.
				## Dover.
				else_if = {
					limit = { this = province:1502 }
					save_scope_value_as = {
						name = locale
						value = flag:dover
					}
				}
				## Isle of Wight.
				else_if = {
					limit = { this = province:1549 }
					save_scope_value_as = {
						name = locale
						value = flag:isle_of_wight
					}
				}
				# Cities/places of interest by priority order.
				## Forest of Dean.
				### Yes, this belongs at the top.
				else_if = {
					limit = { this = province:1580 }
					save_scope_value_as = {
						name = locale
						value = flag:forest_of_dean
					}
				}
				## London.
				else_if = {
					limit = { this = province:1527 }
					save_scope_value_as = {
						name = locale
						value = flag:london
					}
				}
				## Winchester.
				else_if = {
					limit = { this = province:1544 }
					save_scope_value_as = {
						name = locale
						value = flag:winchester
					}
				}
				## York.
				else_if = {
					limit = { this = province:1595 }
					save_scope_value_as = {
						name = locale
						value = flag:york
					}
				}
				## Lincoln.
				else_if = {
					limit = { this = province:1583 }
					save_scope_value_as = {
						name = locale
						value = flag:lincoln
					}
				}
				## Oxford.
				else_if = {
					limit = { this = province:1558 }
					save_scope_value_as = {
						name = locale
						value = flag:oxford
					}
				}
				## Cirencester.
				else_if = {
					limit = { this = province:1582 }
					save_scope_value_as = {
						name = locale
						value = flag:cirencester
					}
				}
				## Guildford.
				else_if = {
					limit = { this = province:1511 }
					save_scope_value_as = {
						name = locale
						value = flag:guildford
					}
				}
				## Lindisfarne.
				else_if = {
					limit = { this = province:1610 }
					save_scope_value_as = {
						name = locale
						value = flag:lindisfarne
					}
				}
				## Land's End.
				else_if = {
					limit = { this = province:1575 }
					save_scope_value_as = {
						name = locale
						value = flag:lands_end
					}
				}
				## Stonehenge. Because you're a memelord.
				else_if = {
					limit = { this = province:1561 }
					save_scope_value_as = {
						name = locale
						value = flag:stonehenge
					}
				}
				## Southwark.
				else_if = {
					limit = { this = province:1526 }
					save_scope_value_as = {
						name = locale
						value = flag:southwark
					}
				}
				# Places outside England.
				## Scotland.
				else_if = {
					limit = {
						county = {
							any_this_title_or_de_jure_above = { this = title:k_scotland }
						}
					}
					save_scope_value_as = {
						name = locale
						value = flag:scotland
					}
				}
				## Wales.
				else_if = {
					limit = {
						county = {
							any_this_title_or_de_jure_above = { this = title:k_wales }
						}
					}
					save_scope_value_as = {
						name = locale
						value = flag:wales
					}
				}
				## Norway.
				else_if = {
					limit = {
						county = {
							any_this_title_or_de_jure_above = { this = title:k_norway }
						}
					}
					save_scope_value_as = {
						name = locale
						value = flag:norway
					}
				}
				## Normandy.
				else_if = {
					limit = {
						county = {
							any_this_title_or_de_jure_above = { this = title:d_normandy }
						}
					}
					save_scope_value_as = {
						name = locale
						value = flag:normandy
					}
				}
				## France.
				else_if = {
					limit = {
						county = {
							any_this_title_or_de_jure_above = { this = title:k_france }
						}
					}
					save_scope_value_as = {
						name = locale
						value = flag:france
					}
				}
				# Generic terrain/situations.
				## Riverside.
				else_if = {
					limit = { is_riverside_province = yes }
					save_scope_value_as = {
						name = locale
						value = flag:riverside
					}
				}
				## Coastal.
				else_if = {
					limit = { is_coastal = yes }
					save_scope_value_as = {
						name = locale
						value = flag:coastal
					}
				}
				## Forest.
				else_if = {
					limit = { terrain = forest }
					save_scope_value_as = {
						name = locale
						value = flag:forest
					}
				}
				## Plains.
				else_if = {
					limit = { terrain = plains }
					save_scope_value_as = {
						name = locale
						value = flag:plains
					}
				}
				## Farmlands.
				else_if = {
					limit = { terrain = farmlands }
					save_scope_value_as = {
						name = locale
						value = flag:farmlands
					}
				}
				## Wetlands.
				else_if = {
					limit = { terrain = wetlands }
					save_scope_value_as = {
						name = locale
						value = flag:wetlands
					}
				}
				## Hills.
				else_if = {
					limit = { terrain = hills }
					save_scope_value_as = {
						name = locale
						value = flag:hills
					}
				}
				# Fallback.
				else = {
					save_scope_value_as = {
						name = locale
						value = flag:fallback
					}
				}
			}
			# Now fire our actual events.
			if = {
				limit = { has_game_rule = historicity_norman_conquest_determined_harold }
				# Harold beats Harald.
				trigger_event = game_rule.1031
				# Harold beats William.
				trigger_event = game_rule.1032
			}
			else_if = {
				limit = { has_game_rule = historicity_norman_conquest_determined_harald }
				# Harold beats William.
				trigger_event = game_rule.1032
				# Harald beats Harold.
				trigger_event = game_rule.1041
				# Harald beats William.
				trigger_event = game_rule.1042
			}
			else_if = {
				limit = { game_rule_rig_norman_conquest_for_hereward_trigger = yes }
				# Harold beats Harald.
				trigger_event = game_rule.1031
				# William beats Harold.
				trigger_event = game_rule.1051
				# William beats Harald.
				trigger_event = game_rule.1052
			}
			else_if = {
				limit = { has_game_rule = historicity_norman_conquest_determined_edgar }
				save_scope_value_as = {
					name = witengamot_choice
					value = flag:edgar
				}
				# Harold beats Harald (but dies if last war).
				trigger_event = game_rule.1061
				# Harold beats William (but dies if last war).
				trigger_event = game_rule.1062
			}
			else_if = {
				limit = { has_game_rule = historicity_norman_conquest_determined_margaret }
				save_scope_value_as = {
					name = witengamot_choice
					value = flag:margaret
				}
				# Harold beats Harald (but dies if last war).
				trigger_event = game_rule.1061
				# Harold beats William (but dies if last war).
				trigger_event = game_rule.1062
			}
			else_if = {
				limit = { has_game_rule = historicity_norman_conquest_determined_aelfwine }
				save_scope_value_as = {
					name = witengamot_choice
					value = flag:aelfwine
				}
				# Harold beats Harald (but dies if last war).
				trigger_event = game_rule.1061
				# Harold beats William (but dies if last war).
				trigger_event = game_rule.1062
			}
			else_if = {
				limit = { has_game_rule = historicity_norman_conquest_determined_svend }
				save_scope_value_as = {
					name = witengamot_choice
					value = flag:svend
				}
				# Harold beats Harald (but dies if last war).
				trigger_event = game_rule.1061
				# Harold beats William (but dies if last war).
				trigger_event = game_rule.1062
			}
			else_if = {
				limit = { has_game_rule = historicity_norman_conquest_determined_cadoc }
				save_scope_value_as = {
					name = witengamot_choice
					value = flag:cadoc
				}
				# Harold beats Harald (but dies if last war).
				trigger_event = game_rule.1061
				# Harold beats William (but dies if last war).
				trigger_event = game_rule.1062
			}
		}
	}
}
	}

	{
# Harold beats Harald (but dies if last war).
game_rule.1061 = {
	hidden = yes

	trigger = {
		game_rule_1031_valid_participants_trigger = { CB = norwegian_invasion_cb }
	}

	immediate = {
		game_rule_1021_process_endings_effect = {
			WINNER = defender
			LOSER = attacker
			WINNER_EVENT = game_rule.1131
			LOSER_EVENT = game_rule.1132
			CB = norwegian_invasion_cb
		}
	}
}
# Harold beats William (but dies if last war).
game_rule.1062 = {
	hidden = yes

	trigger = {
		game_rule_1031_valid_participants_trigger = { CB = norman_conquest_cb }
	}

	immediate = {
		game_rule_1021_process_endings_effect = {
			WINNER = defender
			LOSER = attacker
			WINNER_EVENT = game_rule.1133
			LOSER_EVENT = game_rule.1134
			CB = norman_conquest_cb
		}
	}
}
	}

	{
scripted_effect game_rule_1131_rig_english_election_effect = {
	# First, we're gonna want a holding title for our history.
	hidden_effect = {
		create_dynamic_title = {
			tier = kingdom
			name = k_england
			adj = k_england_adj
		}
		scope:new_title = {
			copy_title_history = title:k_england
			set_coa = k_england
		}
	}
	# Right, now kill our incumbent k_england.holder.
	## On the battlefield if we can.
	if = {
		limit = { scope:army.army_commander = scope:winner }
		death = { death_reason = death_battle }
		# Plus easily register how for loc.
		save_scope_value_as = {
			name = death_locale
			value = flag:battlefield
		}
	}
	## Elsewise, off it.
	else = {
		death = { death_reason = death_heart_attack }
		# Plus easily register how for loc.
		save_scope_value_as = {
			name = death_locale
			value = flag:home
		}
	}
	# Now we need to rig the election appropriately.
	## First, select our lucky winner.
	switch = {
		trigger = scope:witengamot_choice
		flag:margaret = {
			character:113 = { save_scope_as = elect }
		}
		flag:edgar = {
			character:112 = { save_scope_as = elect }
		}
		flag:svend = {
			character:101515 = { save_scope_as = elect }
		}
		flag:aelfwine = {
			character:161260 = { save_scope_as = elect }
		}
		flag:cadoc = {
			character:161281 = { save_scope_as = elect }
		}
	}
	## Then save our loser (mostly for convenience).
	title:k_england.holder = { save_scope_as = jiltee }
	## And fire off our concluding events — if it'd make sense.
	if = {
		limit = {
			scope:elect = {
				NOT = { is_in_list = kill_list }
			}
			NOT = { scope:elect = scope:jiltee }
		}
		# Quietly erase our incumbent from the holders roll.
		hidden_effect = {
			title:k_england = { copy_title_history = scope:new_title }
		}
		# We launder this by a day because otherwise inheritance gets... finnicky.
		scope:elect = {
			trigger_event = {
				id = game_rule.1143
				days = 1
			}
		}
	}
}

#	Harold beats Harald (but dies if last war) (winner pov).
game_rule.1131 = {
	type = character_event
	title = {
		# Is this the first or second notable battle here?
		first_valid = {
			triggered_desc = {
				trigger = { global_var:conquest_first_battle ?= scope:new_location }
				desc = game_rule.1101.t.boilerplate.battle_2
			}
			desc = game_rule.1101.t.boilerplate.battle_1
		}
		# Now, what do we call the location?
		first_valid = {
			triggered_desc = {
				trigger = { scope:locale = flag:stamford_bridge }
				desc = game_rule.1101.t.boilerplate.location.stamford_bridge
			}
			triggered_desc = {
				trigger = { scope:locale = flag:forest_of_dean }
				desc = game_rule.1101.t.boilerplate.location.forest_of_dean
			}
			triggered_desc = {
				trigger = { scope:locale = flag:cirencester }
				desc = game_rule.1101.t.boilerplate.location.cirencester
			}
			triggered_desc = {
				trigger = { scope:locale = flag:lands_end }
				desc = game_rule.1101.t.boilerplate.location.lands_end
			}
			triggered_desc = {
				trigger = { scope:locale = flag:stonehenge }
				desc = game_rule.1101.t.boilerplate.location.stonehenge
			}
			# Whatever the province is called.
			desc = game_rule.1101.t.boilerplate.location.fallback
		}
	}
	desc = {
		# Who's fighting who?
		desc = game_rule.1101.desc.opposing_army
		# Where are we clashing?
		first_valid = {
			triggered_desc = {
				trigger = { scope:locale = flag:stamford_bridge }
				desc = game_rule.1101.desc.stamford_bridge
			}
			triggered_desc = {
				trigger = { scope:locale = flag:hastings }
				desc = game_rule.1101.desc.hastings
			}
			triggered_desc = {
				trigger = { scope:locale = flag:dover }
				desc = game_rule.1101.desc.dover
			}
			triggered_desc = {
				trigger = { scope:locale = flag:isle_of_wight }
				desc = game_rule.1101.desc.isle_of_wight
			}
			triggered_desc = {
				trigger = { scope:locale = flag:forest_of_dean }
				desc = game_rule.1101.desc.forest_of_dean
			}
			triggered_desc = {
				trigger = { scope:locale = flag:london }
				desc = game_rule.1101.desc.london
			}
			triggered_desc = {
				trigger = { scope:locale = flag:winchester }
				desc = game_rule.1101.desc.winchester
			}
			triggered_desc = {
				trigger = { scope:locale = flag:york }
				desc = game_rule.1101.desc.york
			}
			triggered_desc = {
				trigger = { scope:locale = flag:lincoln }
				desc = game_rule.1101.desc.lincoln
			}
			triggered_desc = {
				trigger = { scope:locale = flag:oxford }
				desc = game_rule.1101.desc.oxford
			}
			triggered_desc = {
				trigger = { scope:locale = flag:cirencester }
				desc = game_rule.1101.desc.cirencester
			}
			triggered_desc = {
				trigger = { scope:locale = flag:guildford }
				desc = game_rule.1101.desc.guildford
			}
			triggered_desc = {
				trigger = { scope:locale = flag:lindisfarne }
				desc = game_rule.1101.desc.lindisfarne
			}
			triggered_desc = {
				trigger = { scope:locale = flag:lands_end }
				desc = game_rule.1101.desc.lands_end
			}
			triggered_desc = {
				trigger = { scope:locale = flag:stonehenge }
				desc = game_rule.1101.desc.stonehenge
			}
			triggered_desc = {
				trigger = { scope:locale = flag:southwark }
				desc = game_rule.1101.desc.southwark
			}
			triggered_desc = {
				trigger = { scope:locale = flag:scotland }
				desc = game_rule.1101.desc.scotland
			}
			triggered_desc = {
				trigger = { scope:locale = flag:wales }
				desc = game_rule.1101.desc.wales
			}
			triggered_desc = {
				trigger = { scope:locale = flag:norway }
				desc = game_rule.1101.desc.norway
			}
			triggered_desc = {
				trigger = { scope:locale = flag:normandy }
				desc = game_rule.1101.desc.normandy
			}
			triggered_desc = {
				trigger = { scope:locale = flag:france }
				desc = game_rule.1101.desc.france
			}
			triggered_desc = {
				trigger = { scope:locale = flag:riverside }
				desc = game_rule.1101.desc.riverside
			}
			triggered_desc = {
				trigger = { scope:locale = flag:coastal }
				desc = game_rule.1101.desc.coastal
			}
			triggered_desc = {
				trigger = { scope:locale = flag:forest }
				desc = game_rule.1101.desc.forest
			}
			triggered_desc = {
				trigger = { scope:locale = flag:plains }
				desc = game_rule.1101.desc.plains
			}
			triggered_desc = {
				trigger = { scope:locale = flag:farmlands }
				desc = game_rule.1101.desc.farmlands
			}
			triggered_desc = {
				trigger = { scope:locale = flag:wetlands }
				desc = game_rule.1101.desc.wetlands
			}
			triggered_desc = {
				trigger = { scope:locale = flag:hills }
				desc = game_rule.1101.desc.hills
			}
			triggered_desc = {
				trigger = { scope:locale = flag:fallback }
				desc = game_rule.1101.desc.fallback
			}
		}
		# Are we there in person?
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:is_commanding }
				desc = {
					desc = game_rule.1101.desc.combat.commander
					desc = double_line_break
					first_valid = {
						triggered_desc = {
							trigger = {
								scope:locale = flag:stamford_bridge
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.stamford_bridge
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:hastings
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.hastings
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:dover
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.dover
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:isle_of_wight
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.isle_of_wight
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:forest_of_dean
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.forest_of_dean
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:london
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.london
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:cirencester
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.cirencester
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:guildford
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.guildford
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:lindisfarne
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.lindisfarne
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:lands_end
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.lands_end
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:stonehenge
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.stonehenge
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:southwark
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.southwark
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:riverside
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.riverside
						}
						desc = {
							random_valid = {
								desc = game_rule.1101.desc.combat.random.present.1
								desc = game_rule.1101.desc.combat.random.present.2
								desc = game_rule.1101.desc.combat.random.present.3
							}
						}
					}
				}
			}
			desc = {
				desc = game_rule.1101.desc.combat.not_present
				desc = double_line_break
				desc = {
					random_valid = {
						desc = game_rule.1101.desc.combat.random.absent.1
						desc = game_rule.1101.desc.combat.random.absent.2
						desc = game_rule.1101.desc.combat.random.absent.3
					}
				}
			}
		}
		# Finish up.
		desc = double_line_break
		desc = {
			first_valid = {
				triggered_desc = {
					trigger = {
						exists = scope:is_commanding
						NOT = { exists = scope:other_war_remains }
					}
					desc = game_rule.1131.desc.conquest_finished.die_battlefield
				}
				triggered_desc = {
					trigger = {
						NOT = { exists = scope:other_war_remains }
					}
					desc = game_rule.1131.desc.conquest_finished.die_home
				}
				triggered_desc = {
					trigger = { exists = scope:is_commanding }
					desc = game_rule.1101.desc.outro.present
				}
				desc = game_rule.1101.desc.outro.absent
			}
		}
	}
	theme = war
	left_portrait = {
		character = scope:winner
		scripted_animation = duel_celebrate
	}
	right_portrait = {
		character = scope:loser
		triggered_animation = {
			trigger = {
				scope:loser = {
					NOT = { is_in_list = kill_list }
				}
			}
			animation = random_weapon_yield
		}
		triggered_animation = {
			trigger = {
				scope:loser = { is_in_list = kill_list }
			}
			animation = map_fear
		}
	}
	override_background = { reference = battlefield }

	immediate = {
		# Illustrate our ending (applied in the effect that triggers this event).
		show_as_tooltip = {
			scope:war = {
				game_rule_1021_process_endings_guts_effect = { WINNER = defender }
			}
		}
		game_rule_1101_register_presence_effect = yes
		# If no opposing side war, then we're gonna launch into our council sequence.
		if = {
			limit = {
				NOT = {
					any_character_war = { using_cb = norman_conquest_cb }
				}
			}
			game_rule_1131_rig_english_election_effect = yes
		}
		else = {
			save_scope_value_as = {
				name = other_war_remains
				value = yes
			}
		}
	}

	option = {
		name = game_rule.1131.a
		trigger = {
			scope:loser = {
				NOT = { is_in_list = kill_list }
			}
		}

		# No stress, no AI.
	}

	option = {
		name = game_rule.1131.b
		trigger = {
			scope:loser = { is_in_list = kill_list }
		}

		# No stress, no AI.
	}
}
	}

	{
#	Harold beats William (but dies if last war) (winner pov).
game_rule.1133 = {
	type = character_event
	title = {
		# Is this the first or second notable battle here?
		first_valid = {
			triggered_desc = {
				trigger = { global_var:conquest_first_battle ?= scope:new_location }
				desc = game_rule.1101.t.boilerplate.battle_2
			}
			desc = game_rule.1101.t.boilerplate.battle_1
		}
		# Now, what do we call the location?
		first_valid = {
			triggered_desc = {
				trigger = { scope:locale = flag:stamford_bridge }
				desc = game_rule.1101.t.boilerplate.location.stamford_bridge
			}
			triggered_desc = {
				trigger = { scope:locale = flag:forest_of_dean }
				desc = game_rule.1101.t.boilerplate.location.forest_of_dean
			}
			triggered_desc = {
				trigger = { scope:locale = flag:cirencester }
				desc = game_rule.1101.t.boilerplate.location.cirencester
			}
			triggered_desc = {
				trigger = { scope:locale = flag:lands_end }
				desc = game_rule.1101.t.boilerplate.location.lands_end
			}
			triggered_desc = {
				trigger = { scope:locale = flag:stonehenge }
				desc = game_rule.1101.t.boilerplate.location.stonehenge
			}
			# Whatever the province is called.
			desc = game_rule.1101.t.boilerplate.location.fallback
		}
	}
	desc = {
		# Who's fighting who?
		desc = game_rule.1103.desc.opposing_army
		# Where are we clashing?
		first_valid = {
			triggered_desc = {
				trigger = { scope:locale = flag:stamford_bridge }
				desc = game_rule.1101.desc.stamford_bridge
			}
			triggered_desc = {
				trigger = { scope:locale = flag:hastings }
				desc = game_rule.1101.desc.hastings
			}
			triggered_desc = {
				trigger = { scope:locale = flag:dover }
				desc = game_rule.1101.desc.dover
			}
			triggered_desc = {
				trigger = { scope:locale = flag:isle_of_wight }
				desc = game_rule.1101.desc.isle_of_wight
			}
			triggered_desc = {
				trigger = { scope:locale = flag:forest_of_dean }
				desc = game_rule.1101.desc.forest_of_dean
			}
			triggered_desc = {
				trigger = { scope:locale = flag:london }
				desc = game_rule.1101.desc.london
			}
			triggered_desc = {
				trigger = { scope:locale = flag:winchester }
				desc = game_rule.1101.desc.winchester
			}
			triggered_desc = {
				trigger = { scope:locale = flag:york }
				desc = game_rule.1101.desc.york
			}
			triggered_desc = {
				trigger = { scope:locale = flag:lincoln }
				desc = game_rule.1101.desc.lincoln
			}
			triggered_desc = {
				trigger = { scope:locale = flag:oxford }
				desc = game_rule.1101.desc.oxford
			}
			triggered_desc = {
				trigger = { scope:locale = flag:cirencester }
				desc = game_rule.1101.desc.cirencester
			}
			triggered_desc = {
				trigger = { scope:locale = flag:guildford }
				desc = game_rule.1101.desc.guildford
			}
			triggered_desc = {
				trigger = { scope:locale = flag:lindisfarne }
				desc = game_rule.1101.desc.lindisfarne
			}
			triggered_desc = {
				trigger = { scope:locale = flag:lands_end }
				desc = game_rule.1101.desc.lands_end
			}
			triggered_desc = {
				trigger = { scope:locale = flag:stonehenge }
				desc = game_rule.1101.desc.stonehenge
			}
			triggered_desc = {
				trigger = { scope:locale = flag:southwark }
				desc = game_rule.1101.desc.southwark
			}
			triggered_desc = {
				trigger = { scope:locale = flag:scotland }
				desc = game_rule.1101.desc.scotland
			}
			triggered_desc = {
				trigger = { scope:locale = flag:wales }
				desc = game_rule.1101.desc.wales
			}
			triggered_desc = {
				trigger = { scope:locale = flag:norway }
				desc = game_rule.1101.desc.norway
			}
			triggered_desc = {
				trigger = { scope:locale = flag:normandy }
				desc = game_rule.1101.desc.normandy
			}
			triggered_desc = {
				trigger = { scope:locale = flag:france }
				desc = game_rule.1101.desc.france
			}
			triggered_desc = {
				trigger = { scope:locale = flag:riverside }
				desc = game_rule.1101.desc.riverside
			}
			triggered_desc = {
				trigger = { scope:locale = flag:coastal }
				desc = game_rule.1101.desc.coastal
			}
			triggered_desc = {
				trigger = { scope:locale = flag:forest }
				desc = game_rule.1101.desc.forest
			}
			triggered_desc = {
				trigger = { scope:locale = flag:plains }
				desc = game_rule.1101.desc.plains
			}
			triggered_desc = {
				trigger = { scope:locale = flag:farmlands }
				desc = game_rule.1101.desc.farmlands
			}
			triggered_desc = {
				trigger = { scope:locale = flag:wetlands }
				desc = game_rule.1101.desc.wetlands
			}
			triggered_desc = {
				trigger = { scope:locale = flag:hills }
				desc = game_rule.1101.desc.hills
			}
			triggered_desc = {
				trigger = { scope:locale = flag:fallback }
				desc = game_rule.1101.desc.fallback
			}
		}
		# Are we there in person?
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:is_commanding }
				desc = {
					desc = game_rule.1101.desc.combat.commander
					desc = double_line_break
					first_valid = {
						triggered_desc = {
							trigger = {
								scope:locale = flag:stamford_bridge
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.stamford_bridge
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:hastings
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.hastings
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:dover
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.dover
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:isle_of_wight
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.isle_of_wight
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:forest_of_dean
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.forest_of_dean
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:london
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.london
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:cirencester
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.cirencester
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:guildford
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.guildford
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:lindisfarne
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.lindisfarne
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:lands_end
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.lands_end
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:stonehenge
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.stonehenge
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:southwark
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.southwark
						}
						triggered_desc = {
							trigger = {
								scope:locale = flag:riverside
								NOT = { global_var:conquest_first_battle ?= scope:new_location }
							}
							desc = game_rule.1101.desc.combat.locale.riverside
						}
						desc = {
							random_valid = {
								desc = game_rule.1101.desc.combat.random.present.1
								desc = game_rule.1101.desc.combat.random.present.2
								desc = game_rule.1101.desc.combat.random.present.3
							}
						}
					}
				}
			}
			desc = {
				desc = game_rule.1101.desc.combat.not_present
				desc = double_line_break
				desc = {
					random_valid = {
						desc = game_rule.1101.desc.combat.random.absent.1
						desc = game_rule.1101.desc.combat.random.absent.2
						desc = game_rule.1101.desc.combat.random.absent.3
					}
				}
			}
		}
		# Finish up.
		desc = double_line_break
		desc = {
			first_valid = {
				triggered_desc = {
					trigger = {
						exists = scope:is_commanding
						NOT = { exists = scope:other_war_remains }
					}
					desc = game_rule.1133.desc.conquest_finished.die_battlefield
				}
				triggered_desc = {
					trigger = {
						NOT = { exists = scope:other_war_remains }
					}
					desc = game_rule.1133.desc.conquest_finished.die_home
				}
				triggered_desc = {
					trigger = { exists = scope:is_commanding }
					desc = game_rule.1103.desc.outro.present
				}
				desc = game_rule.1103.desc.outro.absent
			}
		}
	}
	theme = war
	left_portrait = {
		character = scope:winner
		scripted_animation = duel_celebrate
	}
	right_portrait = {
		character = scope:loser
		triggered_animation = {
			trigger = {
				scope:loser = {
					NOT = { is_in_list = kill_list }
				}
			}
			animation = random_weapon_yield
		}
		triggered_animation = {
			trigger = {
				scope:loser = { is_in_list = kill_list }
			}
			animation = map_fear
		}
	}
	override_background = { reference = battlefield }

	immediate = {
		# Illustrate our ending (applied in the effect that triggers this event).
		show_as_tooltip = {
			scope:war = {
				game_rule_1021_process_endings_guts_effect = { WINNER = defender }
			}
		}
		game_rule_1101_register_presence_effect = yes
		# If no opposing side war, then we're gonna launch into our council sequence.
		if = {
			limit = {
				NOT = {
					any_character_war = { using_cb = norwegian_invasion_cb }
				}
			}
			game_rule_1131_rig_english_election_effect = yes
		}
		else = {
			save_scope_value_as = {
				name = other_war_remains
				value = yes
			}
		}
	}

	option = {
		name = game_rule.1133.a
		trigger = {
			scope:loser = {
				NOT = { is_in_list = kill_list }
			}
		}

		# No stress, no AI.
	}

	option = {
		name = game_rule.1133.b
		trigger = {
			scope:loser = { is_in_list = kill_list }
		}

		# No stress, no AI.
	}
}
	}

	{
#	Elect receives England.
game_rule.1141 = {
	type = character_event
	title = game_rule.1141.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:death_locale = flag:battlefield }
				desc = game_rule.1141.intro.battlefield
			}
			triggered_desc = {
				trigger = { scope:death_locale = flag:home }
				desc = game_rule.1141.intro.home
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { scope:witengamot_choice = flag:margaret }
				desc = game_rule.1141.choice.margaret
			}
			triggered_desc = {
				trigger = { scope:witengamot_choice = flag:edgar }
				desc = game_rule.1141.choice.edgar
			}
			triggered_desc = {
				trigger = { scope:witengamot_choice = flag:svend }
				desc = game_rule.1141.choice.svend
			}
			triggered_desc = {
				trigger = { scope:witengamot_choice = flag:aelfwine }
				desc = game_rule.1141.choice.aelfwine
			}
			triggered_desc = {
				trigger = { scope:witengamot_choice = flag:cadoc }
				desc = game_rule.1141.choice.cadoc
			}
		}
	}
	theme = war
	left_portrait = {
		character = scope:elect
		triggered_animation = {
			trigger = { this = character:161260 }
			animation = stress
		}
		triggered_animation = {
			trigger = { this = character:101515 }
			animation = personality_bold
		}
		animation = shock
	}
	right_portrait = {
		character = scope:jiltee
		animation = rage
	}
	override_background = { reference = battlefield }

	immediate = {
		# Illustrate our ending (applied in the effect that triggers this event).
		show_as_tooltip = { game_rule_1131_usurp_england_effect = yes }
	}

	option = {
		name = {
			text = {
				first_valid = {
					triggered_desc = {
						trigger = { scope:witengamot_choice = flag:margaret }
						desc = game_rule.1141.a.margaret
					}
					triggered_desc = {
						trigger = { scope:witengamot_choice = flag:edgar }
						desc = game_rule.1141.a.edgar
					}
					triggered_desc = {
						trigger = { scope:witengamot_choice = flag:svend }
						desc = game_rule.1141.a.svend
					}
					triggered_desc = {
						trigger = { scope:witengamot_choice = flag:aelfwine }
						desc = game_rule.1141.a.aelfwine
					}
					triggered_desc = {
						trigger = { scope:witengamot_choice = flag:cadoc }
						desc = game_rule.1141.a.cadoc
					}
				}
			}
		}

		add_prestige = 500

		# No stress, no AI.
	}
}

#	Jiltee is told of how things suck for them.
game_rule.1142 = {
	type = character_event
	title = game_rule.1142.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:death_locale = flag:battlefield }
				desc = game_rule.1142.intro.battlefield
			}
			triggered_desc = {
				trigger = { scope:death_locale = flag:home }
				desc = game_rule.1142.intro.home
			}
		}
		desc = game_rule.1142.choice.preamble
		first_valid = {
			triggered_desc = {
				trigger = { scope:witengamot_choice = flag:margaret }
				desc = game_rule.1142.choice.margaret
			}
			triggered_desc = {
				trigger = { scope:witengamot_choice = flag:edgar }
				desc = game_rule.1142.choice.edgar
			}
			triggered_desc = {
				trigger = { scope:witengamot_choice = flag:svend }
				desc = game_rule.1142.choice.svend
			}
			triggered_desc = {
				trigger = { scope:witengamot_choice = flag:aelfwine }
				desc = game_rule.1142.choice.aelfwine
			}
			triggered_desc = {
				trigger = { scope:witengamot_choice = flag:cadoc }
				desc = game_rule.1142.choice.cadoc
			}
		}
		desc = game_rule.1142.outro
	}
	theme = war
	left_portrait = {
		character = scope:jiltee
		animation = rage
	}
	right_portrait = {
		character = scope:elect
		triggered_animation = {
			trigger = { this = character:161260 }
			animation = stress
		}
		triggered_animation = {
			trigger = { this = character:101515 }
			animation = personality_bold
		}
		animation = shock
	}
	override_background = { reference = battlefield }

	immediate = {
		# Illustrate our ending (applied in the effect that triggers this event).
		show_as_tooltip = { game_rule_1131_usurp_england_effect = yes }
		add_prestige = -250
	}

	# Outrage.
	option = {
		name = game_rule.1142.a

		add_opinion = {
			target = scope:elect
			modifier = usurped_title
			opinion = -75
		}
		if = {
			limit = {
				can_set_relation_rival_trigger = { CHARACTER = scope:elect }
			}
			set_relation_rival = {
				target = scope:elect
				reason = rival_usurper
			}
		}
		reverse_add_opinion = {
			target = scope:elect
			modifier = respect_opinion
			opinion = -50
		}

		# No stress, no AI.
	}

	# Let things be.
	option = {
		name = game_rule.1142.b
		trigger = { is_ai = no }
		
		reverse_add_opinion = {
			target = scope:elect
			modifier = grateful_opinion
			opinion = 50
		}
		if = {
			limit = {
				can_set_relation_potential_friend_trigger = { CHARACTER = scope:elect }
			}
			set_relation_potential_friend = scope:elect
		}

		# No stress, no AI.
	}

	# Warg into them.
	option = {
		name = game_rule.1142.c
		trigger = {
			is_ai = no
			scope:elect = { is_ai = yes }
		}
		
		set_player_character = scope:elect
		trigger_event = {
			id = game_rule.1143
			days = 1
		}

		# No stress, no AI.
	}
}
	}

	{
#	Delayed election rigging.
game_rule.1143 = {
	hidden = yes

	immediate = {
		scope:elect = { trigger_event = game_rule.1141 }
		scope:jiltee = { trigger_event = game_rule.1142 }
		hidden_effect = { game_rule_1131_usurp_england_effect = yes }
	}
}
	}
}

"gfx\portraits\portrait_animations\animations.txt" = {
	{
				modifier = {
					add = 5000
					this = character:83355
				}
	}
	{
				modifier = {
					add = 5000
					this = character:1128
				}
	}
	{
				modifier = {
					add = 5000
					this = character:3924
				}
	}
	{
				modifier = {
					add = -100
					this = character:7757
				}
	}
	{
				modifier = {
					add = 5000
					OR = {
						this = character:7757
						this = character:41702
					}
				}
	}
	{
					NOT = { this = character:41702 }
	}
}

"gfx/portraits/portrait_modifiers/02_all_developer_characters.txt" = {
	{
	isabella_welch = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = clothes
				template = dde_hre_high_nobility_clothes
				value = 0.1 # Please replace with accessory = accessory_name
			}
		}
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_isabella_welch
				this = character:easteregg_isabella_welch
			}
		}
	}   
	}

	{
	elisabeth_gangenes = {
		dna_modifiers = {
			accessory = {
				mode = add
				gene = clothes
				template = fp1_high_nobility_clothes
				value = 1.0 
			}
			accessory = {
				mode = add
				gene = hairstyles
				template = fp1_hairstyles_wavy
				value = 0.0 # Please replace with accessory = accessory_name
				#accessory = female_hair_fp1_02
			}
			accessory = {
				mode = add			  
				gene = cloaks
				template = fp1_cloak
				value = 0
			}
			morph = {
				mode = modify_multiply
				gene = gene_bs_bust
				value = 1.0
				template = bust_clothes
			}
			morph = {
				mode = modify_multiply
				gene = gene_bs_body_shape
				value = 1.0
				template = body_shape_average_clothed
			}
		}
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_elisabeth_gangenes
				this = character:easteregg_elisabeth_gangenes
			}
		}
	}
	}

	{
	rebecca_ronnback = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0 # Please replace with accessory = accessory_name
			}
		}
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_rebecca_gottfredsson
				this = character:easteregg_rebecca_gottfredsson
			}
		}
	}
	}

	{
	hanna_lohman = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.51 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_hanna_lohman
				this = character:easteregg_hanna_lohman
			}
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_anna_strom
				this = character:easteregg_anna_strom
			}
		}
	}
	}

	{
	marcus_bose = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = no_hairstyles
				value = 0.27 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.87 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_marcus_bose
				this = character:easteregg_marcus_bose
			}
		}
	}
	}

	{
	jesse_kopparvall = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = no_hairstyles
				value = 0.27 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_02
				value = 0.3 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_jesse_kopparvall
				this = character:easteregg_jesse_kopparvall
			}
		}
	}
	}

	{
	lukasz_opara = { 
		dna_modifiers = {
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_lukasz_opara
				this = character:easteregg_lukasz_opara
			}
		}
	}
	}

	{
	mateusz_mierzwa = { 
		dna_modifiers = {
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_mateusz_mierzwa
				this = character:easteregg_mateusz_mierzwa
			}
		}
	}

	natalia_lechnata = { 
		dna_modifiers = {
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_natalia_lechnata
				this = character:easteregg_natalia_lechnata
			}
		}
	}

	natalia_poreba = { 
		dna_modifiers = {
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_natalia_poreba
				this = character:easteregg_natalia_poreba
			}
		}
	}
	}

	{
	struan_mccallum = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.62 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.74 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_struan_mccallum
				this = character:easteregg_struan_mccallum
			}
		}
	}
	}

	{
	riad_deneche = { 
		dna_modifiers = {
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_riad_deneche
				this = character:easteregg_riad_deneche
			}
		}
	}
	}

	{
	anton_leirnes = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = all_hairstyles
				accessory = male_hair_western_07
			}
			accessory = {
				mode = add
				gene = beards
				template = all_beards
				accessory = male_beard_mena_04
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_tomasz_ender
				this = character:easteregg_tomasz_ender
			}
		}
	}
	}

	{
	stella_carrick = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.04 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = cloaks
				template = fp1_cloak
				value = 1
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_stella_carrick
				this = character:easteregg_stella_carrick
			}
		}
	}
	}

	{
	fenni_johansson = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.04 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_fenni_johansson
				this = character:easteregg_fenni_johansson
			}
		}
	}
	}

	{
	james_beaumont = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.32 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.04 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_james_beaumont
				this = character:easteregg_james_beaumont
			}
		}
	}
	}

	{
	bahar_shefket = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.73 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_bahar_shefket
				this = character:easteregg_bahar_shefket
			}
		}
	}
	}

	{
	hugo_cortell = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.38 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_02
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_hugo_cortell
				this = character:easteregg_hugo_cortell
			}
		}
	}
	}

	{
	alexander_newcombe = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.1 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_02
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_alexander_newcombe
				this = character:easteregg_alexander_newcombe
			}
		}
	}
	}

	{
	elena_zenko = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.51 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_elena_zenko
				this = character:easteregg_elena_zenko
			}
		}
	}
	}

	{
	fei_berg_hulthen = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.0 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = no_beard
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_fei_berg_hulthen
				this = character:easteregg_fei_berg_hulthen
			}
		}
	}
	}

	{
	stina_arvidsson_radestig = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.6# Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_stina_arvidsson_radestig
				this = character:easteregg_stina_arvidsson_radestig
			}
		}
	}
	}

	{
	ola_jentzsch = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.99 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.61 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = headgear
				template = no_headgear
				value = 0.5 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_ola_jentzsch
				this = character:easteregg_ola_jentzsch
			}
		}
	}
	}

	{
	nikola_stokic = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				accessory = male_hair_fp1_09
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_nikola_stokic
				this = character:easteregg_nikola_stokic
			}
		}
	}
	}

	{
	sandra_runge_moller = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.54 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_sandra_runge_moller
				this = character:easteregg_sandra_runge_moller
			}
		}
	}
	}

	{
	alessandro_bragalini = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = no_hairstyles
				value = 0.99 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.45 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_alessandro_bragalini
				this = character:easteregg_alessandro_bragalini
			}
		}
	}
	}

	{
	jon_astrup_hallkvist = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.2 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = no_beard
				value = 0.45 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_jon_astrup_hallkvist
				this = character:easteregg_jon_astrup_hallkvist
			}
		}
	}
	}

	{
	maxence_voleau = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 1 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_02
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_maxence_voleau
				this = character:easteregg_maxence_voleau
			}
		}
	}
	}

	{
	jason_cantalini = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.15 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.45 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_jason_cantalini
				this = character:easteregg_jason_cantalini
			}
		}
	}
	}

	{
	chad_uhl = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				accessory = male_hair_western_02
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_03
				accessory = m_beard_ep2_western_01 #m_beard_sep_western_01
			}
		}
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_chad_uhl
				this = character:easteregg_chad_uhl
			}
		}
	}
	}

	{
	fabian_franzen = { 
		dna_modifiers = {
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_fabian_franzen
				this = character:easteregg_fabian_franzen
			}
		}
	}
	}

	{
	zack_holmgren = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.27 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = no_beard
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_zack_holmgren
				this = character:easteregg_zack_holmgren
			}
		}
	}
	}

	{
	claudia_baldassi = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.23 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_claudia_baldassi
				this = character:easteregg_claudia_baldassi
			}
		}
	}
	}

	{
	joe_parkin = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = no_hairstyles
				value = 0.27 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = no_beard
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_joe_parkin
				this = character:easteregg_joe_parkin
			}
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_mathias_frostewarn
				this = character:easteregg_mathias_frostewarn
			}
		}
	}
	}

	{
	veronica_pazos = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.04 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_veronica_pazos
				this = character:easteregg_veronica_pazos
			}
		}
	}

	weronika_kowalczyk = { 
		dna_modifiers = {
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_weronika_kowalczyk
				this = character:easteregg_weronika_kowalczyk
			}
		}
	}

	jakob_jorstedt = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.84 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = no_beard
				value = 0.45 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_jakob_jorstedt
				this = character:easteregg_jakob_jorstedt
			}
		}
	}

	tess_lindholm = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.13 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_berrak_oz
				this = character:easteregg_berrak_oz
			}
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_tess_lindholm
				this = character:easteregg_tess_lindholm
			}
		}
	}

	luke_bean = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.1 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.45 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_luke_bean
				this = character:easteregg_luke_bean
			}
		}
	}

	artur_kacprzak = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.2 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_artur_kacprzak
				this = character:easteregg_artur_kacprzak
			}
		}
	}

	tomas_versekys = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.1 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = no_beard
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_tomas_versekys
				this = character:easteregg_tomas_versekys
			}
		}
	}

	ida_hedberg = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.1 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_ida_hedberg
				this = character:easteregg_ida_hedberg
			}
		}
	}

	alexander_windahl = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.77 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = no_beard
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_alexander_windahl
				this = character:easteregg_alexander_windahl
			}
		}
	}

	johan_husen = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = no_hairstyles
				value = 0.77 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.04 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_johan_husen
				this = character:easteregg_johan_husen
			}
		}
	}

	daan_broekhof = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.87 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = no_beard
				value = 0.04 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_daan_broekhof
				this = character:easteregg_daan_broekhof
			}
		}
	}

	alexia_belfort = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.73 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_alexia_belfort
				this = character:easteregg_alexia_belfort
			}
		}
	}
	
	david_drake = {
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = no_hairstyles
				value = 0.77 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = all_beards
				accessory = m_beard_sp2_western_01
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_david_drake
				this = character:easteregg_david_drake
			}
		}
	}

	ernesto_lopez = {
		dna_modifiers = {
			accessory = {
				mode = add
				gene = beards
				template = all_beards
				accessory = male_beard_fp2_iberian_christian_01
			}
			accessory = {
				mode = add
				gene = hairstyles
				template = all_hairstyles
				accessory = male_hair_western_01
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_ernesto_lopez
				this = character:easteregg_ernesto_lopez
			}
		}
	}

	lucas_ribeiro = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = fp3_hairstyles_iranian_straight
				value = 0.1
			}
			accessory = {
				mode = add
				gene = beards
				template = no_beard
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_lucas_ribeiro
				this = character:easteregg_lucas_ribeiro
			}
		}
	}
	
	daniel_velasquez = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = all_hairstyles
				accessory = male_hair_fp2_iberian_muslim_01
			}
			accessory = {
				mode = add
				gene = beards
				template = all_beards
				accessory = male_beard_fp2_iberian_christian_01
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_daniel_velasquez
				this = character:easteregg_daniel_velasquez
			}
		}
	}

	jakob_eklund = {
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = all_hairstyles
				accessory = male_hair_indian_03
			}
			accessory = {
				mode = add
				gene = beards
				template = no_beard
				value = 0.11 # Please replace with accessory = accessory_name
			}
		}
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_jakob_eklund
				this = character:easteregg_jakob_eklund
			}
		}
	} # jakob_eklund

	emelie_verdugo = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				range = {0.83 0.98} # Mix between all FP1 scripted char hairstyles
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_emelie_verdugo
				this = character:easteregg_emelie_verdugo
			}
		}
	}

	anton_holmqvist = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = no_hairstyles
				value = 0.27 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = all_beards
				accessory = m_beard_ep2_western_03
			}
		}
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_anton_holmqvist
				this = character:easteregg_anton_holmqvist
			}
		}
	}

	samet_atasoy = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = all_hairstyles
				accessory = male_hair_western_04
			}
			accessory = {
				mode = add
				gene = beards
				template = all_beards
				accessory = male_beard_western_03
			}
		}
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_samet_atasoy
				this = character:easteregg_samet_atasoy
			}
		}
	}

	richard_lindkvist = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = all_hairstyles
				accessory = male_hair_indian_01
			}
			accessory = {
				mode = add
				gene = beards
				template = all_beards
				accessory = male_beard_western_03
			}
		}
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_richard_lindkvist
				this = character:easteregg_richard_lindkvist
			}
		}
	}

	daniel_tolman = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = all_hairstyles
				accessory = male_hair_western_03
			}
			accessory = {
				mode = add
				gene = beards
				template = all_beards
				accessory = male_beard_western_02
			}
		}
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_daniel_tolman
				this = character:easteregg_daniel_tolman
			}
		}
	}

	jacopo_freddi = {
		dna_modifiers = {
			accessory = {
				mode = add
				gene = beards
				template = fp2_beards_straight
				accessory = male_beard_fp2_iberian_christian_01
			}
			accessory = {
				mode = add
				gene = cloaks
				template = fp4_cloak_western
				accessory = m_cloaks_sec_fp4_western_era3_nob_02
			}
			accessory = {
				mode = add
				gene = hairstyles
				template = all_hairstyles
				accessory = male_hair_indian_01
			}
		}
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_jacopo_freddi
				this = character:easteregg_jacopo_freddi
			}
		}
	}

	female_hair_steppe_01 = { # Twin braids with ribbons and earrings
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.76 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0
		}
	}

	female_hair_steppe_02 = { # Tight with twin braids rolled up into two balls, earrings
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.79 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0
		}
	}

	### FP2 Hair ###



	female_hair_fp2_iberian_muslim_01 = { # Let out but with smaller braids braided in
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.1 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_ida_hedberg
				this = character:easteregg_ida_hedberg
			}
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_francesca_passoni
				this = character:easteregg_francesca_passoni
			}
		}
	}

	female_hair_fp2_iberian_muslim_02 = { # Let out but with smaller braids braided in
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.2 # For the randomness to work correctly
			}
		}
		weight = {
			base = 0
		}
	}

	female_hair_fp2_iberian_muslim_03 = { # Let out but with smaller braids braided in
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.4 # For the randomness to work correctly
			}
		}
		weight = {
			base = 0

			 modifier = {
				add = 999
				exists = this
				exists = character:73683
				this = character:73683
			}
		}
	}

	female_hair_fp2_iberian_christian_01 = { # Let out but with smaller braids braided in
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.6 # For the randomness to work correctly
			}
		}
		weight = {
			base = 0

			 modifier = {
				add = 999
				exists = this
				exists = character:73759
				this = character:73759
			}
		}
	}

	female_hair_fp2_iberian_christian_02 = { # Let out but with smaller braids braided in
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.83 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0

			 modifier = {
				add = 999
				exists = this
				exists = character:73857
				this = character:73857
			}

			modifier = {
				add = 999
				exists = this
				exists = character:70292
				this = character:70292
			}

			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_melanie_albarn
				this = character:easteregg_melanie_albarn
			}
		}
	}

	female_hair_fp2_iberian_christian_03 = { # Let out but with smaller braids braided in
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 1 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0

			 modifier = {
				add = 999
				exists = this
				exists = character:73783
				this = character:73783
			}
		}
	}



	### FP1 Hair ###

	female_hair_fp1_01 = { # Let out but with smaller braids braided in
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.83 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0
		}
	}

	female_hair_fp1_02 = { # Very big loose braid on one shoulder
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.86 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0
		}
	}

	female_hair_fp1_03 = { # Pigtail braids
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.90 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0
		}
	}

	female_hair_fp1_04 = { # Crown braid with ribbon
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.92 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0
		}
	}

	female_hair_fp1_05 = { # Twin tails on chest, let out in back
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.95 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0
		}
	}

	female_hair_fp1_06 = { # Let out fluffy straight
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.98 # For the randomness to work correctly
			}
		}   
		weight = {
			base = 0

			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_alva_granholm
				this = character:easteregg_alva_granholm
			}
		}
	}

	### FP3 Hair

	m_hair_fp3_iranian_01 = { # Long split strands
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_05
				value = 0.1 # For the randomness to work correctly
			}
		}
		weight = {
			base = 0

			modifier = {
				add = 999
				exists = this
				exists = character:163157 #Ismail Samani
				this = character:163157 #Ismail Samani
			}
		}
	}

	m_hair_fp3_iranian_02 = { # Seljuk Braids
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_05
				value = 0.6 # For the randomness to work correctly
			}
		}
		weight = {
			base = 0
		}
	}

	m_hair_fp3_iranian_03 = { # Medium wavy ends
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_05
				value = 0.9 # For the randomness to work correctly
			}
		}
		weight = {
			base = 0

			modifier = {
				add = 999
				exists = this
				exists = character:1230316 #Suri of Mandesh
				this = character:1230316 #Suri of Mandesh
			}
		}
	}

	f_hair_fp3_iranian_01 = { #  Medium Curls with Earrings
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_05
				value = 0.6 # For the randomness to work correctly
			}
		}
		weight = {
			base = 0
		}
	}

	f_hair_fp3_iranian_02 = { # Long Split with Earrings
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_05
				value = 0.75 # For the randomness to work correctly
			}
		}
		weight = {
			base = 0
		}
	}

	f_hair_fp3_iranian_03 = { # Medium buns with earrings
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_05
				value = 0.9 # For the randomness to work correctly
			}
		}
		weight = {
			base = 0
		}
	}

	david_ostlund = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.078 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.855 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_david_ostlund
				this = character:easteregg_david_ostlund
			}
		}
	}

	philip_wessman = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_01
				value = 0.247 # Please replace with accessory = accessory_name
			}
			accessory = {
				mode = add
				gene = beards
				template = scripted_character_beards_01
				value = 0.098 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_philip_wessman
				this = character:easteregg_philip_wessman
			}
		}
	}

	neyla_garcia = { 
		dna_modifiers = {
			accessory = {
				mode = add
				gene = hairstyles
				template = scripted_character_hairstyles_03
				value = 0.51 # Please replace with accessory = accessory_name
			}
		}   
		weight = {
			base = 0
			modifier = {
				add = 999
				exists = this
				exists = character:easteregg_neyla_garcia
				this = character:easteregg_neyla_garcia
			}
		}
	}
	}
}

"common/on_action/prison_on_actions.txt" = {
	{
		bookmark.0003			# King Aella gets imprisoned by one of Ragnarr Lodbrok's sons
	}
}

"common/decisions/80_major_decisions_british_isles.txt" = {
	{
			dynasty = dynasty:1029001	#The Cornish royal house is always able to get away with these shenanigans.
	}
	{
			dynasty = dynasty:1029001	#The Cornish royal house is at it again.
	}
}

"common/decisions/80_major_decisions_middle_europe.txt" = {
	{
#############################
# Refound HRE 				#
# by Ewan Cowhig Croft		#
#############################
restore_holy_roman_empire_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_dynasty_house.dds"
	}
	decision_group_type = major

	ai_check_interval = 12

	desc = restore_holy_roman_empire_decision_desc
	selection_tooltip = restore_holy_roman_empire_decision_tooltip

	is_shown = {
		is_landed_or_landless_administrative = yes
		exists = dynasty # Everyone should have a dynasty, but in case they don't...
		NOT = { has_global_variable = flag_restored_roman_empire } # Not if Rome already exists (prevent Rome from restoring HRE)
		NOR = {	#Title existence cnditions.
			exists = title:e_hre.holder	#Well, that'd be redundant.
			#highest_held_title_tier = tier_empire	#Existing emperors likewise should not be giving up their empire.
		}
		NOR = { #It doesn't make sense for these competing empires.
			has_title = title:e_byzantium
			has_title = title:e_roman_empire
			mpo_has_gok_mongol_empire_trigger = yes
		}
		AND = {	#Faith conditions.
			NOT = { this = faith.religious_head }	#Nice try, Mr. Pope.
			faith = {
				religion_tag = christianity_religion
				has_doctrine_parameter = spiritual_head_of_faith	#Gotta be invested with the authority by someone other than yourself.
			}
			NAND = {	#No need for a competing empire if your faith controls the ERE.
				exists = title:e_byzantium.holder
				faith = title:e_byzantium.holder.faith
			}
		}
		OR = {	#Government conditions.
			government_has_flag = government_is_feudal
			government_has_flag = government_is_clan
			government_allows = administrative
		}
		exists = faith.religious_head
	}

	is_valid = {
		#Standard requirements.
		is_independent_ruler = yes
		trigger_if = {
			limit = {
				is_ai = no
			}
			prestige_level >= high_prestige_level
		}
		#Title ownership conditions.
		OR = { #Gotta be King of a core Carolingian Kingdom.
			has_title = title:k_east_francia
			has_title = title:k_bavaria
			has_title = title:k_france
			has_title = title:k_italy
			has_title = title:k_lotharingia
			any_vassal = {
				OR = {
					has_title = title:k_east_francia
					has_title = title:k_bavaria
					has_title = title:k_france
					has_title = title:k_italy
					has_title = title:k_lotharingia
				}
			}
		}
		trigger_if = {
			limit = {
				is_ai = no
			}
			custom_description = {	#And have some additional royal dignity for good measure.
				text = decision_refound_hre_own_three_kingdoms.tt
				any_held_title = {
					tier = tier_kingdom
					count >= 3
				}
			}
		}
		sub_realm_size >= 120	#Plus your various kingdoms should be ruling something.
		#HoF preference conditions.
		trigger_if = {
			limit = {
				is_ai = no
			}
			OR = {
				faith.religious_head = {	#And they have to actually like you enough to want to invest you.
					opinion = {
						target = root
						value >= high_positive_opinion
					}
				}
				root = { has_strong_usable_hook = faith.religious_head }	#Or you have a strong hook on them that you can actually use.
				root = { has_weak_hook = faith.religious_head }	#Or a regular hook, to be fair, provided you meet the other criteria.
			}
		}
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		faith.religious_head = { is_available_adult = yes }
		NOR = {
			has_trait = excommunicated
			is_at_war_with = faith.religious_head
		}
	}

	effect = {
		show_as_tooltip = {
			restore_holy_roman_empire_decision_scripted_effect = yes
		}
		gain_heroic_legend_seed_tooltip_effect = yes
		save_scope_as = founder
		faith.religious_head = { save_scope_as = founder_hof }
		if = {
			limit = {
				faith.religious_head = { is_playable_character = yes }
			}
			faith.religious_head.capital_province = { save_scope_as = ceremony_locale }
		}
		else = {
			capital_province = { save_scope_as = ceremony_locale }
		}
		trigger_event = {
			id = middle_europe_decisions.0015
		}
		#Notify other players.
		every_player = {
			limit = {
				NOT = { this = root }
				is_within_diplo_range = { CHARACTER = root }
			}
			trigger_event = middle_europe_decisions.0016
		}
		if = {
			limit = {
				is_ai = no
				NOT = { exists = global_var:restore_holy_roman_empire_decision  }
			}
			set_global_variable = {
				name = restore_holy_roman_empire_decision
				value = root
			}
		}
		# Assign Dynamic Prince-Electors
		hidden_effect = {
			if = {
				limit = { has_global_variable_list = hre_elector_list }
				clear_global_variable_list = hre_elector_list
			}
			while = {
				count = 7
				random_vassal = {
					limit = {
						capital_province.empire = title:e_hre # must be de-jure vassal of empire
						OR = { # prince-bishopric or duchy
							AND = {
								government_has_flag = government_is_theocracy
								primary_title.tier >= tier_county
							}
							primary_title.tier >= tier_duchy
						}
						NOT = { # not already selected
							is_target_in_global_variable_list = {
								name = hre_elector_list
								target = primary_title
							}
						}
					}
					weight = {
						modifier = { # major vassals heavily weighted
							factor = 10
							is_powerful_vassal = yes
						}
						modifier = { # same culture as emperor preferred
							factor = 4
							culture = root.culture
						}
						modifier = { # we don't mind going outside Germania, but prefer it
							factor = 1.5
							trigger = { exists = primary_title.title_province }
							primary_title.title_province.barony = {
								OR = {
									target_is_de_jure_liege_or_above = title:k_bavaria
									target_is_de_jure_liege_or_above = title:k_bohemia
									target_is_de_jure_liege_or_above = title:k_east_francia
									target_is_de_jure_liege_or_above = title:k_frisia
									target_is_de_jure_liege_or_above = title:k_lotharingia
									target_is_de_jure_liege_or_above = title:k_pomerania
								}
							}
						}
						modifier = { # we want at least 3 theocracies ideally
							factor = 10
							any_in_global_list = {
								variable = hre_elector_list
								count < 3
								holder = { government_has_flag = government_is_theocracy }
							}
							government_has_flag = government_is_theocracy
						}
						modifier = { # 3 is enough theocracies unless we can't find feudal
							factor = 0.1
							any_in_global_list = {
								variable = hre_elector_list
								count >= 3
								holder = { government_has_flag = government_is_theocracy }
							}
							government_has_flag = government_is_theocracy
						}
					}
					add_to_global_variable_list = {
						name = hre_elector_list
						target = primary_title
					}
				}
			}
			hre_elector_list_save_effect = yes # saves list scopes to title as variables for tooltip
		}
	}

	cost = {
		gold = {
			if = {
				limit = {
					is_ai = no
				}
				add = 500
			}
		}
		piety = 200
	}

	ai_potential = {
		is_independent_ruler = yes
		highest_held_title_tier >= tier_kingdom
	}

	ai_will_do = {
		base = 100

		modifier = { # We don't want a solo-France to form the HRE
			factor = 0
			NOR = {
				has_title = title:k_east_francia
				has_title = title:k_bavaria
				has_title = title:k_italy
				has_title = title:k_lotharingia
				any_vassal = {
					OR = {
						has_title = title:k_east_francia
						has_title = title:k_bavaria
						has_title = title:k_italy
						has_title = title:k_lotharingia
					}
				}
			}
		}
	}
}
	}
}

"common/legends/chronicles/00_chronicles.txt" = {
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:6392
				}
				desc = legend_carolingian
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:6392
				}
				desc = legend_carolingian_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:82233
				}
				desc = legend_the_wheelwright
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:82233
				}
				desc = legend_the_wheelwright_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:159058
				}
				desc = legend_cadell
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:159058
				}
				desc = legend_cadell_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:107590
				}
				desc = legend_el_cid
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:107590
				}
				desc = legend_el_cid_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:1700
				}
				desc = legend_peasant_emperor
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:1700
				}
				desc = legend_peasant_emperor_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:168345
				}
				desc = legend_premysl
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:168345
				}
				desc = legend_premysl_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:303250
				}
				desc = legend_borjigin
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:303250
				}
				desc = legend_borjigin_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:7255
				}
				desc = legend_the_red_hand
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:7255
				}
				desc = legend_the_red_hand_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:180637
				}
				desc = legend_yazdagird_iii
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:180637
				}
				desc = legend_yazdagird_iii_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:180645
				}
				desc = legend_bahram_gur
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:180645
				}
				desc = legend_bahram_gur_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:188637
				}
				desc = legend_saman_khudah
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:188637
				}
				desc = legend_saman_khudah_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:163109
				}
				desc = legend_ragnarr
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:163109
				}
				desc = legend_ragnarr_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:7627
				}
				desc = legend_alfred_of_wessex
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:7627
				}
				desc = legend_alfred_of_wessex_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:168130
				}
				desc = legend_william_gellones
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:168130
				}
				desc = legend_william_gellones_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:99
				}
				desc = legend_edward_the_martyr
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:99
				}
				desc = legend_edward_the_martyr_desc
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:40605
				}
				desc = legend_sons_of_rurik
			}
	}
	{
			triggered_desc = {
				trigger = {
					scope:ancestor = character:40605
				}
				desc = legend_sons_of_rurik_desc
			}
	}
}

"events/diarchy_events/diarchy_events.txt" = {
	{
		# Historic setup stuff.
		## Fatimids start basically completely screwed.
		if = {
			limit = { this = character:3096 }
			set_diarchy_swing = 100
		}
		## Kara Khitai Zhilugu was put on the throne cause Wolila killed the previous empress
		else_if = {
			limit = { this = character:188912 }
			set_diarchy_swing = 60
		}
	}
}

"events/dlc/fp1/fp1_major_decision_events.txt" = {
	{
scripted_effect fp1_1011_gib_pretty_hair_effect = {
	# Gain the famous nickname.
	give_nickname = nick_fairhair
	# And a bit of diplomacy for your long vow.
	add_diplomacy_skill = 2
	# Plus that haircut.
	remove_character_modifier = harald_tanglehairs_vow_modifier
}

#	Tanglehair becomes Fairhair.
fp1_major_decisions.1011 = {
	type = character_event
	title = fp1_major_decisions.1011.t
	desc = {
		desc = fp1_major_decisions.1011.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:gyda }
				desc = fp1_major_decisions.1011.desc.gyda
			}
			desc = fp1_major_decisions.1011.desc.oath
		}
		desc = fp1_major_decisions.1011.desc.outro
	}
	theme = crown
	left_portrait = {
		character = root
		animation = personality_honorable
	}
	right_portrait = {
		character = scope:gyda
		animation = admiration
	}
	override_background = { reference = fp1_ocean_norse }

	trigger = {
		# This character is Harald Fairhair.
		exists = character:144000
		this = character:144000
		# The title they've acquired is Norway.
		scope:title = title:k_norway
		# Norway has been created by them.
		scope:transfer_type = flag:created
		# Norway has not been created previously.
		NOT = { exists = global_var:norway_created }
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		# Check to see if Gyda is still around and kicking, and if so, treat this as a romance.
		character:166044 = {
			if = {
				limit = {
					is_alive = yes
					can_marry_character_trigger = { CHARACTER = root }
					has_any_bad_relationship_with_root_trigger = no
					is_ai = yes
				}
				save_scope_as = gyda
			}
		}
	}

	# My vow fulfilled!
	option = {
		name = fp1_major_decisions.1011.a

		# Apply standard haircut effects.
		fp1_1011_gib_pretty_hair_effect = yes

		ai_chance = {
			# AI should only default to this if Gyda is unavailable.
			base = 0
		}
	}
	
	# Gyda, my love!
	option = {
		name = fp1_major_decisions.1011.b
		trigger = {
			# Gyda must have been valid.
			exists = scope:gyda
			# And, for MP, remain valid.
			can_marry_character_trigger = { CHARACTER = scope:gyda }
		}

		# Apply standard haircut effects.
		fp1_1011_gib_pretty_hair_effect = yes
		# Harald & Gyda are wed.
		if = {
			limit = {
				has_ep2_dlc_trigger = yes
			}
			create_grand_wedding_betrothal = {
				SPOUSE_1 = root
				SPOUSE_2 = scope:gyda
				HOST = root
				PROMISEE = scope:gyda
			}
		}
		else = { marry = scope:gyda }
		# And rather happy about it.
		add_opinion = {
			target = scope:gyda
			modifier = love_opinion
			opinion = 50
		}
		reverse_add_opinion = {
			target = scope:gyda
			modifier = love_opinion
			opinion = 50
		}

		ai_chance = {
			# AI should always select this option if it's present.
			base = 100
		}
	}
	
	# Leave it; it is a mark of the struggles I have been through.
	option = {
		name = fp1_major_decisions.1011.c
		trigger = { is_ai = no }

		# Harald Tanglehair keeps his wild locks.
		custom_tooltip = fp1_major_decisions.1011.c.tt
		## We swap the modifiers out so the copy responds correctly.
		hidden_effect = {
			remove_character_modifier = harald_tanglehairs_vow_modifier
			add_character_modifier = harald_tanglehairs_reminder_modifier
		}
		# And a bit of learning for the lessons you've endured.
		add_learning_skill = 2

		ai_chance = {
			# Option here for player choice.
			base = 0
		}
	}
}
	}
	
	{
		# And if it's not Harald Fairhair who did it, shame him.
		if = {
			limit = {
				exists = character:144000
				NOT = { this = character:144000 }
				character:144000 = { is_alive = yes }
			}
			hidden_effect = {
				# Save the current King of Norway.
				save_scope_as = king_of_norway
				# And message Harald with the bad news.
				character:144000 = {
					send_interface_toast = {	
						title = fp1_major_decisions.1012.t
						left_icon = scope:king_of_norway
						hidden_effect = { remove_character_modifier = harald_tanglehairs_vow_modifier }
						add_character_modifier = harald_tanglehairs_vow_broken_modifier
					}
				}
			}
		}
	}
}

"events/decisions_events/middle_europe_decisions_events.txt" = {
	{
#	Conduct the reformation
middle_europe_decisions.0015 = {
	type = character_event
	title = middle_europe_decisions.0015.t
	desc = middle_europe_decisions.0015.desc
	theme = realm
	left_portrait =	{
		character = scope:founder
		animation = personality_bold
	}

	immediate = {
		play_music_cue = "mx_cue_epic_sacral_moment"
		restore_holy_roman_empire_decision_scripted_effect = yes
		legend_seed_new_title_effect = yes
		create_artifact_reichskrone_effect = { OWNER = this }
	}

	#Renovatio Imperii!
	option = {
		name = middle_europe_decisions.0015.a
		give_nickname = nick_the_great
		add_prestige_experience = monumental_fame_gain
		every_vassal = {
			add_opinion = {
				modifier = reformed_holy_roman_empire_opinion
				target = root
			}
			custom = restore_holy_roman_empire_decision_effects_vassal_opinion.tt
		}
		ai_chance = {	#When taken, the AI should always pick this.
			base = 100
		}
	}
	
	##No Germany please, we're Byzantine.
	#option = {
	#	name = middle_europe_decisions.0015.b
	#	ai_chance = {	#When taken, the AI should always go for the decision.
	#		base = 0
	#	}
	#}
}
	}
}

"events/dlc/fp1/fp1_scandinavian_adventurer_events.txt" = {
	{
#	Drag in famous landless Norse characters if they haven't become landed after twenty years.
fp1_scandinavian_adventurers.0011 = {
	scope = none
	hidden = yes

	trigger = {
		# DLC check.
		has_fp1_dlc_trigger = yes
		# No point in later starts.
		game_start_date = 867.1.1
	}

	immediate = {
		trigger_event = {
			id = fp1_scandinavian_adventurers.0012
			years = 20
		}
	}
}
	}
	
	{
scripted_effect scandi_adventurers_grab_famous_character_effect = {
	$CHARACTER$ ?= {
		if = {
			limit = {
				# Still kickin'.
				is_physically_able_adult = yes
				# Shouldn't ever really be an issue, but y'never know.
				is_ai = yes
				# Hasn't got anything dynastic of note going on.
				is_ruler = no
				any_heir_title = { count = 0 }
				# And is free and clear to go.
				is_imprisoned = no
				OR = {
					is_married = no
					AND = {
						is_female = yes
						matrilinear_marriage = yes
					}
					AND = {
						is_male = yes
						patrilinear_marriage = yes
					}
				}
				# And is still North Germanic/not in either of the lists.
				culture = { has_cultural_pillar = heritage_north_germanic }
				NOR = {
					save_temporary_scope_as = character
					any_in_global_list = {
						variable = western_scandinavian_adventurer_list
						this = scope:character
					}
					any_in_global_list = {
						variable = eastern_scandinavian_adventurer_list
						this = scope:character
					}
				}
			}
			# Norse, Norwegians, & Danes go into the western adventurer list.
			if = {
				limit = {
					OR = {
						has_culture = culture:norse
						has_culture = culture:norwegian
						has_culture = culture:danish
					}
				}
				add_to_global_variable_list = {
					name = western_scandinavian_adventurer_list
					target = this
				}
			}
			# Norse & Swedes go into the eastern adventurer list.
			if = {
				limit = {
					OR = {
						has_culture = culture:norse
						has_culture = culture:swedish
					}
				}
				add_to_global_variable_list = {
					name = eastern_scandinavian_adventurer_list
					target = this
				}
			}
			# Either way, flag 'em for priority in the system.
			add_character_flag = prioritised_scandinavian_adventurer
		}
	}
}
	}
	
	{
fp1_scandinavian_adventurers.0012 = {
	hidden = yes
	scope = none

	trigger = {
		# DLC check.
		has_fp1_dlc_trigger = yes
		# No point in later starts.
		game_start_date = 867.1.1

		OR = {
			exists = character:242
			exists = character:163119
		}

	}

	immediate = {
		# Nab Rollo.
		scandi_adventurers_grab_famous_character_effect = { CHARACTER = character:242 }
		# Nab Ubbe.
		scandi_adventurers_grab_famous_character_effect = { CHARACTER = character:163119 }
	}
}
	}
	
	{
fp1_scandinavian_adventurers.0021 = {
	hidden = yes
	scope = none

	trigger = {
		# DLC check.
		has_fp1_dlc_trigger = yes
		# No point in later starts.
		game_start_date = 867.1.1
	}

	immediate = {
		# Haesteinn.
		character:6878 = { add_character_flag = prioritised_scandinavian_adventurer }
		# Ivar the Boneless.
		character:163111 = { add_character_flag = prioritised_scandinavian_adventurer }
		# Halfdan Whiteshirt.
		character:163112 = { add_character_flag = prioritised_scandinavian_adventurer }
		# Sigurdr Snake-in-the-Eye.
		character:163110 = { add_character_flag = prioritised_scandinavian_adventurer }
		# Bjorn Ironside.
		character:163108 = { add_character_flag = prioritised_scandinavian_adventurer }
		# Rurik the Troublemaker.
		character:40605 = { add_character_flag = prioritised_scandinavian_adventurer }
		# Dyre the Stranger.
		character:6811 = { add_character_flag = prioritised_scandinavian_adventurer }
		# Harald Fairhair.
		character:144000 = { add_character_flag = prioritised_scandinavian_adventurer }
		# Audr the Deep-Minded.
		character:168609 = { add_character_flag = prioritised_scandinavian_adventurer }
	}
}
	}
}

"common\on_action\yearly_groups_on_actions.txt" = {
	{
		160 = fp2_yearly.1004   # The Hawk of Quarysh 
	}
	{
		250 = fp3_yearly.8020 # The Lady of the Land
	}
}

"events\dlc\fp2\fp2_yearly_events.txt" = {
	{
###################################
# The Hawk of Quarysh
# By Daniel Moore
###################################
fp2_yearly.1004 = {
	type = character_event
	title = fp2_yearly.1004.t
	desc = fp2_yearly.1004.desc
	theme = learning
	left_portrait = {
		character = root
		animation = worry
	}


	trigger = {
		has_fp2_dlc_trigger = yes

		has_religion = religion:islam_religion

		capital_province = {
			geographical_region = world_europe_west_iberia
		}

		NOT = {
			has_character_flag = fp2_yearly.1004
		}
	}

	cooldown = {
		years = 50
	}

	immediate = {
		add_character_flag = fp2_yearly.1004

		character:73679 = {
			save_scope_as = hawk_of_quraysh
		}

		dynasty:597 = {
			save_scope_as = hawk_dynasty
		}

		dynasty:100721 = {
			save_scope_as = abbasid_dynasty
		}
	}

	option = { #I'm related!
		name = fp2_yearly.1004.c
		trigger = {
			dynasty = {
				this = scope:hawk_dynasty
			}
		}

		ai_chance = {
			base = 1000
		}
		add_prestige = medium_prestige_value
	}

	option = { #How he inspired soldiers
		name = fp2_yearly.1004.a
			add_character_modifier = {
				modifier = fp2_hawk_of_quarysh_martial_modifier
				years = 10
			}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_energy = 1
				ai_boldness = 1
			}
		}
	}

	option = { #How diplomatic he was
		name = fp2_yearly.1004.b
			add_character_modifier = {
				modifier = fp2_hawk_of_quarysh_diplomacy_modifier
				years = 10
			}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_sociability = 1
				ai_compassion = 1
			}
		}
	}
}
	}
}

"events\dlc\fp3\fp3_heritage_events.txt" = {
	{
fp3_yearly.8020 = {
	type = character_event  
	title = fp3_yearly.8020.t
	desc = fp3_yearly.8020.desc	
	theme = faith 

	left_portrait = {
		character = root
		animation = personality_rational
	}

	right_portrait = {
		character = scope:pious_woman
		animation = paranoia
	}

	lower_left_portrait = {
		character = scope:righteous_caliph
	}



	trigger = {

		#standard sanity checks
		has_fp3_dlc_trigger = yes
		is_ruler = yes
		is_available_healthy_adult = yes

		#premise checks - we need ROOT's faith to not have been reformed into a matriarchal faith for this historical context 
		OR = {
			has_religion = religion:islam_religion
			has_religion = religion:christianity_religion
		}

		has_game_rule = default_gender_equality #this triggers an error. Suspected code issue.

		NOT = {
			faith = { has_doctrine = doctrine_gender_female_dominated } 
		}

		#checking for approppriate county 
		any_held_county = {
			OR = {
				this = title:c_rayy
				any_county_province = { 
					barony = { fp3_zoroastrian_holy_sites_province_trigger = yes }	
				}
			}
		}

		#checking that we have a HoF with the appropriate interests 
		NOT = { faith.religious_head = root }

		exists = root.faith.religious_head

		root.faith.religious_head = { 
			fp3_zealous_caliph_trigger = yes
			#checking that his Islam hasn't been reformed into something that'd make the event's premise weird
			faith = { 
				NOT = {
					has_doctrine = doctrine_gender_female_dominated 
				}	
			}	
		}	

		#checking that we have a spouse or daughter that would fit the scope
		OR = { 
			any_spouse = { 
				fp3_bibi_shahrbanu_devotee_trigger = yes
			}
			any_concubine = { 
				fp3_bibi_shahrbanu_devotee_trigger = yes
			}
			any_child = {
				fp3_bibi_shahrbanu_devotee_trigger = yes
			}
			any_courtier_or_guest = {
				fp3_bibi_shahrbanu_devotee_trigger = yes
				has_relation_friend = root
			}
		}	
	}

	immediate = {

		
		#Saving relevant historical characters and faiths as scopes
		character:180638 = { save_scope_as = bibi_shahrbanu }

		character:33912 = { save_scope_as = imam_husayn }

		religion:zoroastrianism_religion = { save_scope_as = anahita_faith }

		#saving the caliph as a scope
		root.faith.religious_head = { 
			if = {
				limit = {
					fp3_zealous_caliph_trigger = yes
					faith = { 
						NOT = {
							has_doctrine = doctrine_gender_female_dominated 
						}
					}	
				}	
			}
			save_scope_as = righteous_caliph
		}

		random_held_county = {
			limit = { this = title:c_rayy }
			save_scope_as = temple_county
		}

		if = { 
			limit = {
				NOT = {	exists = scope:temple_county }
			}
			random_held_county = {
				limit = { 
					any_county_province = {
						barony = { fp3_zoroastrian_holy_sites_province_trigger = yes }
					}
				}
				save_scope_as = temple_county
			}
		}

		#getting the best pious woman for our purposes
		if = {
			limit = { 
				any_spouse = { fp3_bibi_shahrbanu_devotee_trigger = yes	}
			}
			random_spouse = {
				limit = { 
					fp3_bibi_shahrbanu_devotee_trigger = yes
				}
				save_scope_as = pious_woman	
			}
		}
		else_if = {
			limit = { 
				any_concubine = { fp3_bibi_shahrbanu_devotee_trigger = yes	}
			}
			random_concubine = {
				limit = { 
					any_concubine = { fp3_bibi_shahrbanu_devotee_trigger = yes	}
				}
				save_scope_as = pious_woman	
			}
		}
		else_if = {
			limit = { 
				any_child = { fp3_bibi_shahrbanu_devotee_trigger = yes	}
			}
			random_child = {
				limit = { 
					any_child = { fp3_bibi_shahrbanu_devotee_trigger = yes	}
				}
				save_scope_as = pious_woman	
			}
		}
		else_if = {
			limit = { 
				any_courtier_or_guest = { 
					fp3_bibi_shahrbanu_devotee_trigger = yes
					has_relation_friend = root	
				}
			}
			random_courtier_or_guest = {
				limit = { 
					any_courtier_or_guest = { 
						fp3_bibi_shahrbanu_devotee_trigger = yes
						has_relation_friend = root	
					}
				}
				save_scope_as = pious_woman	
			}
		}
	}

	cooldown = { years = 100 }

	option = {
		name = fp3_yearly.8020.a #triggered option if you like them very very much

		trigger = {
			
			reverse_opinion = {
				target = scope:pious_woman
				value >= 30
			}
		}

		remove_short_term_gold = minor_gold_value

		scope:pious_woman = { 
			if = {
				limit = { 
					OR = { 
						has_relation_lover = root
						has_relation_soulmate = root 
					}
				}
				add_opinion = {
					target = root
					modifier = happy_opinion
					opinion = 20 
				}
			}	
			else = {
				root = {
					progress_towards_lover_effect = {
						CHARACTER = scope:pious_woman
						REASON = lover_sided_with_me_against_hof
						OPINION = 20 
					}
				}
			}	
		}

		scope:righteous_caliph = {
			add_opinion = { 
				target = root
				opinion = -30
				modifier = angry_opinion
			}
		}

		stress_impact = {
   			callous = major_stress_impact_gain
   			shy = medium_stress_impact_gain
   			zealous = major_stress_impact_gain
		}

		ai_chance = { 
        	base = 100
        	ai_value_modifier = {
            	ai_sociability = 0.5
            	ai_boldness = 1
            	ai_rationality = 1
            	ai_compassion = 1
        	}
   		}
	}

	option = {
		name = fp3_yearly.8020.b
		flavor = supporting_womens_faith_flavor

		remove_short_term_gold = medium_gold_value

		scope:temple_county = { 
			add_county_modifier = {
				modifier = fp3_persian_resurgence_county_modifier 
				years = 50
			}
		}

		scope:righteous_caliph = {
			add_opinion = { 
				target = root
				opinion = -30
				modifier = angry_opinion
			}
		}

		scope:pious_woman = {
			add_opinion = { 
				target = root
				opinion = 20
				modifier = happy_opinion
			}
		}

		stress_impact = {
   			compassionate = minor_stress_impact_loss
   			cynical = medium_stress_impact_gain 
   			zealous = major_stress_impact_gain
		}

		ai_chance = { 
        	base = 100
        	ai_value_modifier = {
            	ai_energy = 0.5
            	ai_boldness = 1
            	ai_vengefulness = 0.5
        	}
   		}
	}

	option = {
		name = fp3_yearly.8020.c

		add_piety = major_piety_gain

		scope:righteous_caliph = {
			add_opinion = { 
				target = root
				opinion = 20
				modifier = pleased_opinion
			}
		}

		scope:pious_woman = {
			if = {
				limit = { #if she has a forceful personality, she'll be galvanized in her faith by this
					fp3_assertive_female_believer_trigger = yes
				}
				add_character_modifier = {
					modifier = fp3_womens_faith_galvanized_modifier
					years = 25
				}
			}
			else = { #otherwise, she'll just be sad or angry 
				add_opinion = { 
					target = root
					opinion = -20
					modifier = fp3_persecuted_my_faith_opinion
				}
			}
		}

		hidden_effect = {
			custom_tooltip = fp3_sharhabanu_devotees_angry.tt
			random_courtier = { #female courtiers might get galvanized too, depending on their personality 
				if = { 
					limit = {
						fp3_bibi_shahrbanu_devotee_trigger = yes
						fp3_assertive_female_believer_trigger = yes  
						NOT = { this = scope:pious_woman }
					}
					add_character_modifier = {
						modifier = fp3_womens_faith_galvanized_modifier
						years = 25
					}
				}
			}
		}

		stress_impact = {
   			zealous = minor_stress_impact_loss
   			compassionate = medium_stress_impact_gain 
   			content = medium_stress_impact_gain
   			lazy = medium_stress_impact_gain
		}

		ai_chance = { 
        	base = 100
        	ai_value_modifier = {
            	ai_energy = 0.5
            	ai_boldness = 1
            	ai_vengefulness = 0.5
        	}
   		}
	}
}
	}
}

"common\decisions\dlc_decisions\fp_3\fp3_islamic_decisions.txt" = {
	{
avenge_the_battle_of_nahrawan_decision = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/fp3/fp3_decision_supremacy.dds"
	}
	decision_group_type = major
	ai_check_interval = 120
	sort_order = 30

	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					faith = {
						OR = {
							has_doctrine = tenet_fp3_fedayeen
							has_doctrine = tenet_warmonger 
							has_doctrine_parameter = pluralism_fundamentalist_proselytization_bonus
						}
					}
				}
				desc = destroy_the_apostates_decision_name
			}
			desc = avenge_the_battle_of_nahrawan_decision_name
		}
	}

	desc = avenge_the_battle_of_nahrawan_decision_desc

	selection_tooltip = avenge_the_battle_of_nahrawan_decision_tooltip

	is_shown = {
		has_fp3_dlc_trigger = yes
		faith = { has_doctrine = muhammad_succession_muhakkima_doctrine	}
		exists = capital_province
		capital_province = {
			OR = {
				geographical_region = world_persian_empire
				geographical_region = world_middle_east 
			}		
		}
		NOT = {
			is_target_in_global_variable_list = {
				name = unavailable_unique_decisions
				target = flag:avenge_the_battle_of_nahrawan_decision
			}
		}
	}

	is_valid = {
		completely_controls_region = world_mesopotamia
		custom_description = {
			text = "restore_high_priesthood_holy_sites"
			faith = {
				any_holy_site = {
					OR = {
						county.holder = root
						county.holder.top_liege = { this = root }
					}
					count >= 3
				}
			}
		}
		custom_description = {
			text = avenge_the_battle_of_nahrawan_sunni_caliphate_irrelevant
			NOT = { exists = title:d_sunni.holder }
		}
		custom_description = {
			text = avenge_the_battle_of_nahrawan_shia_caliphate_irrelevant
			NOT = { exists = title:d_shiite.holder }
		}
	}	

	is_valid_showing_failures_only = {
		is_alive = yes
		not = { exists = involved_activity }
		is_imprisoned = no
	}


	effect = {
		save_scope_as = avenger
		
		#Sunni penalty scope save
		title:e_arabia = {
			random_de_jure_county_holder = { #If there's a big Sunni presence in Arabia
				limit = {
					faith = { has_doctrine = muhammad_succession_sunni_doctrine } 
					highest_held_title_tier = tier_empire
				}
				alternative_limit = {
					faith = { has_doctrine = muhammad_succession_sunni_doctrine }
					highest_held_title_tier = tier_kingdom
				}
				alternative_limit = {
					faith = { has_doctrine = muhammad_succession_sunni_doctrine }
					highest_held_title_tier = tier_duchy
				}
				faith = {
					save_scope_as = sunni_faith
				}
			}
		}

		title:e_persia = {
			random_de_jure_county_holder = { #If there's a big Sunni presence in Persia
				limit = {
					faith = { has_doctrine = muhammad_succession_sunni_doctrine } 
					highest_held_title_tier = tier_empire
				}
				alternative_limit = {
					faith = { has_doctrine = muhammad_succession_sunni_doctrine }
					highest_held_title_tier = tier_kingdom
				}
				alternative_limit = {
					faith = { has_doctrine = muhammad_succession_sunni_doctrine }
					highest_held_title_tier = tier_duchy
				}
				faith = {
					save_scope_as = sunni_faith
				}
			}
		}

		#Shia penalty scope save
		title:e_arabia = {
			random_de_jure_county_holder = { #If there's a big Shia presence in Arabia
				limit = {
					faith = { has_doctrine = muhammad_succession_shia_doctrine } 
					highest_held_title_tier = tier_empire
				}
				alternative_limit = {
					faith = { has_doctrine = muhammad_succession_shia_doctrine }
					highest_held_title_tier = tier_kingdom
				}
				alternative_limit = {
					faith = { has_doctrine = muhammad_succession_shia_doctrine }
					highest_held_title_tier = tier_duchy
				}
				faith = {
					save_scope_as = shia_faith
				}
			}
		}

		#Shia penalty scope save
		title:e_persia = {
			random_de_jure_county_holder = { #If there's a big Shia presence in Persia
				limit = {
					faith = { has_doctrine = muhammad_succession_shia_doctrine } 
					highest_held_title_tier = tier_empire
				}
				alternative_limit = {
					faith = { has_doctrine = muhammad_succession_shia_doctrine }
					highest_held_title_tier = tier_kingdom
				}
				alternative_limit = {
					faith = { has_doctrine = muhammad_succession_shia_doctrine }
					highest_held_title_tier = tier_duchy
				}
				faith = {
					save_scope_as = shia_faith
				}
			}
		}

		show_as_tooltip = { avenge_the_battle_of_nahrawan_scripted_effect = yes } #Actually applied in fp3_decision.0011 - Prestige, religion bonuses

		#Events
		trigger_event = fp3_decision.0011
		every_player = {
			limit = {
				NOT = { this = scope:avenger }
				is_within_diplo_range = { CHARACTER = scope:avenger }
			}
			trigger_event = fp3_decision.0012
		}

		#Can only be done once
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:avenge_the_battle_of_nahrawan_decision
		}
	}

	ai_will_do = {
		base = 100
	}
}
	}
}

"events/dlc/fp3/fp3_religious_decision_events.txt" = {
	{
fp3_decision.0011 = { 
	type = character_event
	title = fp3_decision.0011.t
	desc = {
		desc = fp3_decision.0011_opening.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					faith = {
						OR = {
							has_doctrine = tenet_fp3_fedayeen
							has_doctrine = tenet_warmonger 
							has_doctrine_parameter = pluralism_fundamentalist_proselytization_bonus
						}
					}
				}
				desc = fp3_decision.0011_fanatic_murderer.desc
			}
			desc = fp3_decision.0011_unfanatic_unmurderer.desc
		}
	}


	theme = war
	left_portrait = {
		character = scope:avenger
		animation = war_over_win
	}

	override_background = { reference = battlefield }

	immediate = {
		play_music_cue = "mx_cue_combat_2"

		character:33911 = { save_scope_as = ali }
		character:163029 = { save_scope_as = muawiya }
	}

	option = {
		name = fp3_decision.0011.a	

		avenge_the_battle_of_nahrawan_scripted_effect = yes	

		stress_impact = {  
			zealous = major_stress_impact_loss
			vengeful = major_stress_impact_loss
			ambitious = medium_stress_impact_loss
		}
	}
}
	}
}

"common\decisions\dlc_decisions\ep_3\06_ep3_hasan_story_cycle_decisions.txt" = {
	# Hassan Sabbah, the founder of Assasins
	{
#############################################
# Do some basic missionary work				#
# by James Beaumont							#
#############################################

hasan_evangelize_the_faith = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/fp3/fp3_decision_secret_faith.dds"
	}
	sort_order = 500
	ai_check_interval = 120

	desc = hasan_evangelize_the_faith_desc
	selection_tooltip = hasan_evangelize_the_faith_tooltip
	decision_group_type = story_cycle_hasan

	cooldown = { months = 1 }

	is_shown = {
		#DLC check.
		has_ep3_dlc_trigger = yes
		is_landed = no
		any_owned_story = {
			story_type = story_hasan
		}
	}

	is_valid = {
		domicile.domicile_location.county ?= {
			OR = {
				hasan_evangelize_province_trigger = yes
				custom_tooltip = {
					text = or_a_neigbouring_county_tt
					save_temporary_scope_as = county_check
					any_neighboring_county = {
						hasan_evangelize_province_trigger = yes
						holder.top_liege = scope:county_check.holder.top_liege
					}
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		is_alive = yes
		is_available_adult = yes
		has_contagious_deadly_disease_trigger = no
	}

	cost = { piety = 250 }

	effect = {
		domicile.domicile_location.county ?= {
			if = {
				limit = { hasan_evangelize_province_trigger = yes }
				save_scope_as = location
			}
			else = {
				save_temporary_scope_as = county_check
				random_neighboring_county = {
					limit = {
						hasan_evangelize_province_trigger = yes
						holder.top_liege = scope:county_check.holder.top_liege
					}
					save_scope_as = location
				}
			}
		}
		trigger_event = hasan_sabbah.1010
		custom_tooltip = chance_to_advance_to_the_assassins_tt
	}

	ai_potential = { this = character:41702 }

	ai_will_do = {
		base = 200
	}
}
#############################################
# Do some RADICAL missionary work 🕶🤙		#
# by James Beaumont							#
#############################################

hasan_agitate_the_populace = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/fp3/antagonistic.dds"
	}
	sort_order = 500
	ai_check_interval = 120

	desc = hasan_agitate_the_populace_desc
	selection_tooltip = hasan_agitate_the_populace_tooltip
	decision_group_type = story_cycle_hasan

	cooldown = { months = 1 }

	is_shown = {
		#DLC check.
		has_ep3_dlc_trigger = yes
		is_landed = no
		any_owned_story = {
			story_type = story_hasan
		}
	}

	is_valid = {
		hasan_camp_in_foes_realm_trigger = yes
		OR = {
			domicile.domicile_location.county = {
				NOT = { faith = root.faith }
				NOT = { has_county_modifier = ep3_agitated_populace }
				NOT = { has_county_modifier = tougher_to_convert }
			}
			custom_tooltip = {
				text = or_a_neigbouring_county_tt
				domicile.domicile_location.county = {
					save_temporary_scope_as = county_check
					any_neighboring_county = {
						NOT = { faith = root.faith }
						NOT = { has_county_modifier = ep3_agitated_populace }
						NOT = { has_county_modifier = tougher_to_convert }
						holder.top_liege = scope:county_check.holder.top_liege
					}
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		is_alive = yes
		is_available_adult = yes
		has_contagious_deadly_disease_trigger = no
	}

	cost = { prestige = 250 }

	effect = {
		if = {
			limit = {
				domicile.domicile_location.county = {
					NOT = { faith = root.faith }
					NOT = { has_county_modifier = ep3_agitated_populace }
					NOT = { has_county_modifier = tougher_to_convert }
				}
			}
			domicile.domicile_location.county = { save_scope_as = location }
		}
		else = {
			domicile.domicile_location.county = {
				save_temporary_scope_as = county_check
				random_neighboring_county = {
					limit = {
						NOT = { faith = root.faith }
						NOT = { has_county_modifier = ep3_agitated_populace }
						NOT = { has_county_modifier = tougher_to_convert }
						holder.top_liege = scope:county_check.holder.top_liege
					}
					save_scope_as = location
				}
			}
		}
		trigger_event = hasan_sabbah.1040
	}

	ai_potential = { this = character:41702 }

	ai_will_do = {
		base = 200
	}
}
#############################################
# Become death, destroyer of Seljuks		#
# by James Beaumont							#
#############################################
hasan_ignite_the_flames = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/fp3/fp3_decision_strength.dds"
	}
	sort_order = 500
	ai_check_interval = 120

	desc = hasan_ignite_the_flames_desc
	selection_tooltip = hasan_ignite_the_flames_tooltip
	decision_group_type = story_cycle_hasan

	cooldown = { months = 1 }

	is_shown = {
		#DLC check.
		has_ep3_dlc_trigger = yes
		any_owned_story = {
			story_type = story_hasan
		}
	}

	is_valid = {
		hasan_camp_in_foes_realm_trigger = yes
		is_at_war = no
		custom_tooltip = {
			text = at_least_5_counties_are_nizari
			domicile.domicile_location.county.holder.top_liege = {
				any_sub_realm_county = {
					count >= 5
					faith = root.faith
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		is_alive = yes
		is_available_adult = yes
		has_contagious_deadly_disease_trigger = no
	}

	cost = {
		prestige = 250
	}

	effect = {
		random_owned_story = {
			limit = {
				story_type = story_hasan
			}
			var:ultimate_foe = { save_scope_as = ultimate_foe }
		}
		hasan_sabbah_ignite_decision_effect = yes
	}

	ai_potential = { this = character:41702 }

	ai_will_do = {
		base = 200
	}
}

#############################################
# Found the Assassins						#
# by James Beaumont							#
#############################################
hasan_found_the_assassins = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/fp3/fp3_decision_sunder.dds"
	}
	sort_order = 500
	ai_check_interval = 120

	desc = hasan_found_the_assassins_desc
	selection_tooltip = hasan_found_the_assassins_tooltip
	decision_group_type = story_cycle_hasan

	is_shown = {
		#DLC check.
		has_ep3_dlc_trigger = yes
		any_owned_story = {
			story_type = story_hasan
			NOT = { exists = var:assassins }
		}
		is_landed = no
		faith = faith:nizari
		NOT = {
			has_character_flag = founded_assassins_already
		}
	}

	is_valid = {
		hasan_camp_in_foes_realm_trigger = yes
		domicile.domicile_location.barony = { is_leased_out = no }
		domicile.domicile_location.county.faith = root.faith
		custom_tooltip = {
			text = is_mountainous_desc
			domicile.domicile_location = { is_mountainous_trigger = yes }
		}
		domicile.domicile_location = {
			is_county_capital = no
		}
	}

	is_valid_showing_failures_only = {
		is_alive = yes
		is_available_adult = yes
		has_contagious_deadly_disease_trigger = no
	}

	cost = { piety = 1500 }

	effect = {
		domicile.domicile_location = { save_scope_as = location }
		if = {
			limit = {
				scope:location = {
					has_holding = no
				}
			}
			if = {
				limit = {
					scope:location.county.holder = {
						government_has_flag = government_is_tribal
					}
				}
				scope:location = {
					set_holding_type = church_holding
				}
			}
			else = {
				scope:location = {
					set_holding_type = castle_holding
				}
			}
		}
		create_character = {
			template = holy_order_leader_character
			location = scope:location
			save_scope_as = leader
		}
		hidden_effect = {
			create_title_and_vassal_change = {
				type = leased_out
				save_scope_as = change
				add_claim_on_loss = no
			}
			scope:location.barony = {
				change_title_holder_include_vassals = {
					holder = scope:location.barony.holder.top_liege
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
		create_holy_order = {
			leader = scope:leader
			capital = scope:location.barony
			save_scope_as = new_holy_order
		}
		scope:new_holy_order ?= {
			title = { set_title_name = holy_order_hashshashin }
		}
		create_holy_order_effect = yes
		random_owned_story = {
			limit = { story_type = story_hasan }
			set_variable = {
				name = assassins
				value = scope:new_holy_order
			}
		}
		add_character_flag = founded_assassins_already
		scope:location = {
			if = {
				limit = {
					has_special_building = no
				}
				add_special_building = assassin_castle_01
			}
			else_if = {
				limit = {
					has_building_or_higher = alamut_castle_01
				}
				hidden_effect = {
					remove_building = alamut_castle_01
				}
				add_special_building = alamut_castle_02
			}
		}
		add_intrigue_skill = 2
		give_nickname = nick_old_man_of_the_mountain
	}

	ai_potential = { this = character:41702 }

	ai_will_do = {
		base = 200
	}
}

#############################################
# Expand the Assassins						#
# by James Beaumont							#
#############################################
hasan_expand_the_assassins = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_legitimacy.dds"
	}
	sort_order = 500
	ai_check_interval = 120

	desc = hasan_expand_the_assassins_desc
	selection_tooltip = hasan_expand_the_assassins_tooltip
	decision_group_type = story_cycle_hasan

	is_shown = {
		#DLC check.
		has_ep3_dlc_trigger = yes
		any_owned_story = {
			story_type = story_hasan
			has_variable = assassins
		}
		is_landed = no
		faith = faith:nizari
	}

	is_valid = {
		hasan_camp_in_foes_realm_trigger = yes
		domicile.domicile_location.barony = { is_leased_out = no }
		domicile.domicile_location.county.faith = root.faith
		custom_tooltip = {
			text = is_mountainous_desc
			domicile.domicile_location = { is_mountainous_trigger = yes }
		}
	}

	is_valid_showing_failures_only = {
		is_alive = yes
		is_available_adult = yes
		has_contagious_deadly_disease_trigger = no
		domicile.domicile_location = { is_county_capital = no }
	}

	cost = { piety = 250 }

	effect = {
		random_owned_story = {
			limit = {
				story_type = story_hasan
			}
			var:assassins = { save_scope_as = assassins }
		}
		show_as_tooltip = {
			domicile.domicile_location.barony = { lease_out_to = scope:assassins }
		}
		hidden_effect = {
			if = {
				limit = { NOT = { domicile.domicile_location.barony.holder = root } }
				create_title_and_vassal_change = {
					type = leased_out
					save_scope_as = change
					add_claim_on_loss = no
				}
				domicile.domicile_location.barony = {
					change_title_holder_include_vassals = {
						holder = holder.top_liege
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
				domicile.domicile_location.barony = { lease_out_to = scope:assassins }
			}
		}
	}

	ai_potential = { this = character:41702 }

	ai_will_do = {
		base = 200
	}
}
	}
}

"common/casus_belli_types/00_event_war.txt" = {
	{
		#Hereward the Wake departs for the Fenlands
		character:90028 = { save_scope_as = hereward }

		if = {
			limit = {
				exists = scope:hereward
			}

			scope:hereward = {
				trigger_event = {
					id = ep3_laamps.6000
					days = { 1 2 }
				}
			}
		}

		#Eadgar becomes a LAAMP
		character:112 = { save_scope_as = eadgar }

		if = {
			limit = {
				exists = scope:eadgar
			}

			scope:eadgar = {
				trigger_event = {
					id = ep3_laamps.7000
					days = { 1 2 }
				}
			}
		}
	}
}


"common/decisions/dlc_decisions/ep_3/06_ep3_laamp_decisions.txt" = {
	{
				#Stahp it, John de Courcy
				this = character:214000
	}
	{
		trigger_if = { # Temujun stays, he needs to become Genghis Khan after all!
			limit = {
				exists = character:125501
			}
			NOT = { this = character:125501 }
		}
	}
	{
		if = {
			limit = {
				any_owned_story = {
					story_type = story_hasan
				}
			}
			custom_tooltip = chance_to_advance_to_the_assassins_tt
		}
	}
}


"common/script_values/00_war_values.txt" = {
	{
		# Haesteinn needs to stop merc'ing East Francia when the resulting kingdom simply will not last.
		if = {
			limit = { this = character:6878 }
			# Assuming the player hasn't opted into batshit Vikings.
			if = {
				limit = {
					NOT = { has_game_rule = fp1_scandi_adventurers_apocalyptic }
				}
				# Tell him to calm it down a bit and pick a damned duchy realm or something.
				if = {
					limit = {
						scope:defender = {
							OR = {
								realm_size >= massive_realm_size
								highest_held_title_tier >= tier_kingdom
							}
						}
					}
					multiply = 0
				}
				# ... and a bit of bonus score if said-realm is an NPC Mercia to get him to behave a bit more historically.
				if = {
					limit = {
						scope:defender = {
							primary_title = title:d_hereford
							is_independent_ruler = yes
							is_ai = yes
						}
					}
					multiply = 100
				}
			}
			# ... in which case, go extra wild.
			else_if = {
				limit = { has_game_rule = fp1_scandi_adventurers_apocalyptic }
				# Nothing but a shiny new kingdom will satisfy apocalypse-Haesteinn.
				if = {
					limit = {
						scope:defender = { highest_held_title_tier <= tier_duchy }
					}
					multiply = 0
				}
			}
		}
	}
}

"common/scripted_triggers/07_ep3_triggers.txt" = {
	{
hasan_camp_in_foes_realm_trigger = {
	trigger_if = {
		limit = {
			any_owned_story = {
				var:ultimate_foe ?= {
					save_temporary_scope_as = ultimate_foe
				}
			}
		}
		custom_description = {
			text = hasan_stroy_cycle_camp_at_foe_realm
			object = scope:ultimate_foe
			domicile.domicile_location.county.holder = {
				OR = {
					any_liege_or_above = {
						this = scope:ultimate_foe
					}
					this = scope:ultimate_foe
				}
			}
		}
	}
	trigger_else = {
		character:3096 = {
			save_temporary_scope_as = caliph
		}
		save_temporary_scope_as = hasan
		any_owned_story = {
			trigger_if = {
				limit = { exists = var:radical_points }
				save_temporary_scope_value_as = {
					name = radical_points
					value = var:radical_points
				}
			}
			trigger_else = {
				save_temporary_scope_value_as = {
					name = radical_points
					value = 0
				}
			}
		}
		custom_tooltip = {
			text = hasan_stroy_cycle_ultimate_foe
			any_owned_story = {
				story_type = story_hasan
				exists = var:ultimate_foe
				exists = var:radical_points
				var:radical_points >= 15
			}
		}
	}
}
	}
}


"common/scripted_effects/06_dlc_ce1_legend_effects.txt" = {
	{
	else_if = { # Carolingian
		limit = {
			legend_property:ancestor ?= character:6392
			legend_property:title ?= title:e_france
		}
		set_global_variable = {
			name = carolingian_legend
			value = yes
		}
	}
	}

	{
	else_if = { # the_wheelwright
		limit = {
			legend_property:ancestor ?= character:82233
		}
		set_global_variable = {
			name = the_wheelwright_legend
			value = yes
		}
	}
	}

	{
	else_if = { # cadell
		limit = {
			legend_property:ancestor ?= character:159058
		}
		set_global_variable = {
			name = cadell_legend
			value = yes
		}
	}
	}

	{
	else_if = { # sons_of_rurik
		limit = {
			legend_property:ancestor ?= character:40605
		}
		set_global_variable = {
			name = sons_of_rurik_legend
			value = yes
		}
	}
	}

	{
	else_if = { # peasant_emperor
		limit = {
			legend_property:ancestor ?= character:1700
		}
		set_global_variable = {
			name = peasant_emperor_legend
			value = yes
		}
	}
	}

	{
	else_if = { # premysl
		limit = {
			legend_property:ancestor ?= character:168345
		}
		set_global_variable = {
			name = premysl_legend
			value = yes
		}
	}
	}

	{
	else_if = { # borjigin
		limit = {
			legend_property:ancestor ?= character:303250
		}
		set_global_variable = {
			name = borjigin_legend
			value = yes
		}
	}
	}

	{
	else_if = { # the_red_hand
		limit = {
			legend_property:ancestor ?= character:7255
		}
		set_global_variable = {
			name = the_red_hand_legend
			value = yes
		}
	}
	}

	{
	else_if = { # yazdagird_iii
		limit = {
			legend_property:ancestor ?= character:180637
		}
		set_global_variable = {
			name = yazdagird_iii_legend
			value = yes
		}
	}
	}

	{
	else_if = { # bahram_gur
		limit = {
			legend_property:ancestor ?= character:180645
		}
		set_global_variable = {
			name = bahram_gur_legend
			value = yes
		}
	}
	}

	{
	else_if = { # saman_khudah
		limit = {
			legend_property:ancestor ?= character:188637
		}
		set_global_variable = {
			name = saman_khudah_legend
			value = yes
		}
	}
	}

	{
	else_if = { # saman_khudah
		limit = {
			legend_property:ancestor ?= character:163109
		}
		set_global_variable = {
			name = ragnarr_legend
			value = yes
		}
	}
	}

	{
	else_if = {
		limit = {
			legend_property:culture ?= culture:hunnic
			legend_property:title ?= title:e_caspian-pontic_steppe
			legend_property:original_region ?= geographical_region:world_steppe_west
		}
		set_global_variable = {
			name = hunnic_heritage_legend
			value = yes
		}
	}
	}

	{
	else_if = {
		limit = {
			legend_property:ancestor ?= character:7627
		}
		set_global_variable = {
			name = alfred_of_wessex_legend
			value = yes
		}
	}
	}

	{
	else_if = {
		limit = {
			legend_property:ancestor ?= character:168130
		}
		set_global_variable = {
			name = william_gellones_legend
			value = yes
		}
	}
	}

	{
	else_if = {
		limit = {
			legend_property:ancestor ?= character:99
		}
		set_global_variable = {
			name = edward_the_martyr_legend
			value = yes
		}
	}
	}
}

"gfx/portraits/portrait_modifiers/05_headgear_situational.txt" = {
	{
					this = character:41702
	}
}

"gfx/portraits/portrait_modifiers/00_custom_beards.txt" = {
	{
			modifier = {
				add = 200
				exists = this
				exists = character:easteregg_joe_parkin
				this = character:easteregg_joe_parkin
			}
	}
}

"events/war_events/war_events.txt" = {
	{
	option = {
		name = war_event.2001.c

		trigger = { #Only available for the war for England
			OR = {
				root = character:102531 #Hardrade
				root = character:172 #William
			}
		}

		custom_tooltip = war_event.2001.c.tt

		save_scope_as = harald
		scope:defender = {
			trigger_event = {
				id = war_event.2004
				days = 1
			}
		}

		ai_chance = {
			base = 25
			modifier = {
				add = 1000 #This should ALWAYS happen if Hereward is a player and Hardrade is the one giving up
				AND = {
					character:90028 = {
						is_ai = no
					}
					root = character:102531
				}
			}
		}
	}
	}
}

"events/story_cycles/ep3_story_cycle_hasan.txt" = {
	{
# Ismaili Preachers
# You meet Amira Zarrab and begin the story cycle
# 1000
hasan_sabbah.1000 = {
	type = character_event
	title = hasan_sabbah.1000.t
	desc = hasan_sabbah.1000.desc
	theme = learning
	override_background = { reference = temple }
	left_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:amira
		animation = personality_zealous
	}

	trigger = {
		has_ep3_dlc_trigger = yes
	}

	immediate = {
		hidden_effect = {
			create_character = {
				name = amira
				age = { 20 50 }
				gender = male
				trait = zealous
				trait = gregarious
				trait = diligent
				trait = loyal
				random_traits_list = {
					count = 1
					education_learning_3 = {}
					education_learning_4 = {}
				}
				location = root.location
				faith = faith:ismaili
				culture = culture:persian
				after_creation = {
					dynasty = { set_dynasty_name = dynn_zarrab }
					house = { set_house_name = dynn_zarrab }
				}
				save_scope_as = amira
			}
			location = { save_scope_as = location }
		}
	}

	# You have succeeded in wounding and breaching my belief
	option = {
		name = hasan_sabbah.1000.a
		flavor = begin_hasan_cycle_ismaili_tt
		add_courtier = scope:amira
		camp_officer_grant_effect = {
			EMPLOYER = root
			CANDIDATE = scope:amira
			POS = second
		}

		set_character_faith = faith:ismaili
		custom_tooltip = {
			text = unlock_evangelize_decision_tt
			create_story = story_hasan
			random_owned_story = {
				limit = {
					story_type = story_hasan
				}
				set_variable = {
					name = story_phase
					value = 1
				}
			}
			every_courtier = {
				limit = {
					religion = religion:islam_religion
				}
				set_character_faith = faith:ismaili
			}
		}
		custom_tooltip = advance_to_the_assassins_tt
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# Truth cannot be sought outside the pale of Islam
	option = {
		name = hasan_sabbah.1000.b
		flavor = begin_hasan_cycle_twelver_tt
		custom_tooltip = {
			text = unlock_evangelize_decision_tt
			create_story = story_hasan
			random_owned_story = {
				limit = {
					story_type = story_hasan
				}
				set_variable = {
					name = story_phase
					value = 1
				}
			}
		}
		ai_chance = {
			base = 0 # Historically determined
		}
	}
}
	}

	{
# Shiite Evangelism
# You try to convert the local populace to your faith
# 1010-1019
hasan_sabbah.1010 = {
	type = character_event
	title = hasan_sabbah.1010.t
	desc = hasan_sabbah.1010.desc
	theme = learning
	override_background = {
		trigger = {
			location = {
				county.development_level >= 10
				has_holding = yes
			}
		}
		reference = market
	}
	override_background = {
		trigger = {
			location = {
				OR = {
					county.development_level < 10
					has_holding = no
				}
			}
		}
		reference = terrain_travel
	}
	left_portrait = {
		character = root
		animation = debating
	}

	# Preach the faith, diplomatically
	option = {
		name = hasan_sabbah.1010.a
		duel = {
			skills = { diplomacy learning }
			value = high_skill_rating
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				modifier = {
					add = {
						subtract = scope:location.county.county_opinion
					}
				}
				modifier = {
					factor = 0.75
					NOT = { scope:location.county.religion = root.religion }
				}
				modifier = {
					factor = 10
					scope:location.county = title:c_qazwin
				}
				min = 10
				send_interface_toast = {
					type = event_toast_effect_good
					title = hasan_sabbah.1010.a.win
					left_icon = root
					ep3_hasan_missionary_effect = {
						PREACHER = root
						LOCATION = scope:location
					}
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				modifier = {
					add = scope:location.county.county_opinion
				}
				modifier = {
					factor = 1.25
					NOT = { scope:location.county.religion = root.religion }
				}
				min = 10
				send_interface_toast = {
					type = event_toast_effect_bad
					title = hasan_sabbah.1010.a.lose
					left_icon = root
					scope:location.county = {
						add_county_modifier = {
							modifier = tougher_to_convert
							years = 10
						}
					}
				}
			}
		}
		ai_chance = {
			base = 10
		}
	}

	after = {
		hidden_effect = {
			# Send Hasan to Egypt
			if = {
				limit = {
					any_owned_story = {
						story_type = story_hasan
						exists = var:radical_points
						var:radical_points >= 5
					}
					OR = {
						faith = faith:ismaili
						faith = faith:nizari
					}
					NOR = {
						has_character_flag = arrived_in_egypt
						has_character_flag = had_hasan_sabah_20
					}
				}
				trigger_event = {
					id = hasan_sabbah.1020
					months = { 3 5 }
				}
			}
			# Make Hasan a radical (begin forming the Assassins)
			else_if = {
				limit = {
					any_owned_story = {
						story_type = story_hasan
						exists = var:radical_points
						var:radical_points >= 15
						NOT = { exists = var:ultimate_foe }
					}
				}
				trigger_event = {
					id = hasan_sabbah.1031
					months = { 3 5 }
				}
			}
			else_if = {
				limit = {
					any_owned_story = {
						story_type = story_hasan
						exists = var:story_phase
						var:story_phase >= 2
						NOT = { exists = var:ultimate_foe }
					}
					faith:ismaili = {
						NOT = {
							religious_head = scope:location.county.holder
							religious_head = scope:location.county.holder.top_liege
							religious_head = scope:location.county.holder.liege
							religious_head = scope:location.county.holder.liege.liege
						}
					}
					faith:nizari = {
						NOT = {
							religious_head = scope:location.county.holder
							religious_head = scope:location.county.holder.top_liege
							religious_head = scope:location.county.holder.liege
							religious_head = scope:location.county.holder.liege.liege
						}
					}
				}
				trigger_event = {
					id = hasan_sabbah.1031
					months = { 3 5 }
				}
			}
		}
	}
}
	}

	{
# Divine Calling
# You're summoned to Egypt
# 1020-1029
hasan_sabbah.1020 = {
	type = character_event
	title = hasan_sabbah.1020.t
	desc = hasan_sabbah.1020.desc
	theme = learning
	override_background = { reference = terrain }
	left_portrait = {
		character = root
		animation = personality_zealous
	}
	lower_right_portrait = {
		character = scope:ismaili_caliph
		animation = personality_zealous
	}

	trigger = {
		is_travelling = no
		NOT = {
			has_character_flag = had_hasan_sabah_20
		}
		faith:ismaili.religious_head ?= { is_landed = yes }
	}

	immediate = {
		if = {
			limit = {
				NOT = { has_character_flag = had_hasan_sabah_20 }
			}
			add_character_flag = {
				flag = had_hasan_sabah_20
				years = 1
			}
		}
		faith:ismaili.religious_head = {
			save_scope_as = ismaili_caliph
			capital_county = { save_scope_as = cairo }
		}
	}

	# Let'sa go
	option = {
		name = hasan_sabbah.1020.a
		custom_tooltip = hasan_sabbah.1020.a.tt
		custom_tooltip = advance_to_the_assassins_tt
		start_travel_plan = {
			destination = scope:ismaili_caliph.capital_province
			players_use_planner = yes
			return_trip = no
			travel_with_domicile = yes
			on_arrival_destinations = last
			on_arrival_event = hasan_sabbah.1022
			on_travel_planner_cancel_event = hasan_sabbah.1020
		}

		ai_chance = {
			base = 1000 # Historical path
		}
	}

	# Let'sa not
	option = {
		name = hasan_sabbah.1020.b
		stress_impact = {
			zealous = medium_stress_impact_gain
			ambitious = medium_stress_impact_gain
		}
		ai_chance = {
			base = 0
		}
	}
}
	}

	{
# The Ismaili Caliphate
# Arrive in Egypt, is it time to become Nizari? I think it's time to become Nizari
# 1022
hasan_sabbah.1022 = {
	type = character_event
	title = hasan_sabbah.1022.t
	desc = hasan_sabbah.1022.desc
	theme = realm
	override_background = { reference = throne_room_scope }
	left_portrait = {
		character = root
		animation = obsequious_bow
	}
	right_portrait = {
		character = scope:ismaili_caliph
		animation = personality_honorable
	}
	lower_left_portrait = {
		character = character:41706
	}
	lower_right_portrait = {
		character = character:3098
	}

	immediate = {
		add_character_flag = arrived_in_egypt
		faith:ismaili.religious_head = {
			save_scope_as = ismaili_caliph
			save_scope_as = background_throne_room_scope
		}
		character:41706 = { save_scope_as = nizar }
	}

	# Nizar knows what's up
	option = {
		name = hasan_sabbah.1022.a
		if = {
			limit = {
				character:41706 ?= { is_alive = yes }
			}
			set_relation_friend = {
				target = character:41706
				reason = friend_supported_my_claim
			}
			hidden_effect = {
				if = {
					limit = { NOT = { character:41706.faith = faith:nizari } }
					character:41706 = {
						set_character_faith = faith:nizari
					}
				}
			}
		}
		ep3_hasan_advance_radicalism = yes
		if = {
			limit = {
				NOT = {
					faith = faith:nizari
				}
			}
			set_character_faith = faith:nizari
		}
		add_piety = major_piety_gain
		ai_chance = {
			base = 1000 # Historical path
		}
	}

	# Actually, the Ismaili candidate seems like a cool guy
	option = {
		name = hasan_sabbah.1022.b
		if = {
			limit = {
				NOT = {
					faith = faith:ismaili
				}
			}
			set_character_faith = faith:ismaili
		}
		stress_impact = {
			ambitious = medium_stress_impact_gain
		}
		ai_chance = {
			base = 0
		}
	}
}
	}

	{
# Death of a Caliph
# The original caliph died, it's *definitely* time to become Nizari
# 1030
hasan_sabbah.1030 = {
	type = character_event
	title = hasan_sabbah.1030.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:new_ismaili_caliph }
				desc = hasan_sabbah.1030.desc_caliph_heir
			}
			desc = hasan_sabbah.1030.desc_caliph_no_heir
		}
	}
	theme = realm
	override_background = { reference = throne_room }
	left_portrait = {
		character = root
		animation = rage
	}
	right_portrait = {
		character = scope:new_ismaili_caliph
		animation = personality_dishonorable
	}
	lower_left_portrait = {
		character = character:41706
	}

	trigger = {
		OR = {
			faith = faith:ismaili
			faith = faith:nizari
		}
		exists = faith:ismaili.religious_head
	}

	immediate = {
		faith:ismaili.religious_head = { save_scope_as = new_ismaili_caliph }
		character:41706 ?= {
			liege = { save_scope_as = liege }
			save_scope_as = nizar
			if = {
				limit = {
					is_ai = yes
					is_alive = yes
				}
				banish_effect = { BANISHER = scope:liege }
			}
			hidden_effect = {
				if = {
					limit = { NOT = { faith = faith:nizari } }
					set_character_faith = faith:nizari
				}
			}
		}
		random_owned_story = {
			limit = {
				story_type = story_hasan
			}
			save_scope_as = story
		}
	}

	# Nizar knows what's up
	option = {
		name = hasan_sabbah.1030.a
		if = {
			limit = {
				character:41706 ?= { is_alive = yes }
			}
			set_relation_friend = {
				target = character:41706
				reason = friend_supported_my_claim
			}
			if = {
				limit = {
					character:41706 = { is_landed = no }
				}
				add_courtier = character:41706
				scope:story = {
					set_variable = {
						name = preferred_caliph
						value = character:41706
					}
				}
			}
		}
		else = {
			scope:story = {
				set_variable = {
					name = preferred_caliph
					value = root
				}
			}
		}
		custom_tooltip = {
			text = advance_to_the_assassins_tt
			scope:story = {
				set_variable = {
					name = story_phase
					value = 2
				}
			}
		}
		if = {
			limit = { NOT = { faith = faith:nizari } }
			set_character_faith = faith:nizari
		}
		add_piety = medium_piety_gain
		if = {
			limit = { is_ai = yes }
			domicile = { move_domicile = title:b_alamut.title_province }
		}
		else = {
			start_travel_plan = {
				destination = title:b_alamut.title_province
				players_use_planner = yes
				return_trip = no
				travel_with_domicile = yes
				on_arrival_destinations = last
			}
		}
		ai_chance = {
			base = 1000 # Historical path
		}
	}

	# Actually, the Ismaili candidate seems like a cool guy
	option = {
		name = hasan_sabbah.1030.b
		trigger = {
			exists = scope:new_ismaili_caliph
		}
		scope:story = {
			set_variable = {
				name = preferred_caliph
				value = scope:new_ismaili_caliph
			}
		}
		set_relation_friend = {
			target = scope:new_ismaili_caliph
			reason = friend_supported_my_claim
		}
		if = {
			limit = { NOT = { faith = faith:ismaili } }
			set_character_faith = faith:ismaili
		}
		stress_impact = {
			ambitious = medium_stress_impact_gain
		}
		ai_chance = {
			base = 0
		}
	}

	# Actually, the Ismaili are right, but have no heir
	option = {
		name = hasan_sabbah.1030.c
		trigger = {
			NOT = { exists = scope:new_ismaili_caliph }
		}
		if = {
			limit = { NOT = { faith = faith:ismaili } }
			set_character_faith = faith:ismaili
		}
		stress_impact = {
			ambitious = medium_stress_impact_gain
		}
		ai_chance = {
			base = 0
		}
	}
}
	}

	{
# The Enemy of Nizarism
# Time to decide my ultimate enemy
# 1031
hasan_sabbah.1031 = {
	type = character_event
	title = hasan_sabbah.1031.t
	desc = hasan_sabbah.1031.desc
	theme = realm
	override_background = { reference = throne_room }
	left_portrait = {
		character = root
		animation = rage
	}
	right_portrait = {
		character = scope:seljuk_equivalent
		animation = personality_dishonorable
	}

	trigger = {
		scope:location.county.holder.top_liege = {
			NOT = {
				faith = root.faith
			}
			realm_size >= 10
			highest_held_title_tier >= tier_kingdom
		}
		any_owned_story = {
			story_type = story_hasan
			NOT = {
				exists = var:ultimate_foe
			}
		}
	}

	immediate = {
		scope:location.county.holder.top_liege = { save_scope_as = seljuk_equivalent }
		random_owned_story = {
			limit = { story_type = story_hasan }
			save_scope_as = story
		}
	}

	# It's this guy
	option = {
		name = hasan_sabbah.1031.a
		custom_tooltip = {
			text = unlock_final_hasan_decisions_1_tt
			scope:story = {
				set_variable = {
					name = ultimate_foe
					value = scope:seljuk_equivalent
				}
			}
		}
		if = {
			limit = {
				faith = faith:nizari
			}
			custom_tooltip = unlock_final_hasan_decisions_2_tt
		}
		custom_tooltip = unlock_final_hasan_decisions_3_tt
		set_relation_nemesis = {
			target = scope:seljuk_equivalent
			reason = nemesis_eternal_enemy
		}

		ai_chance = {
			base = 0
			modifier = {
				add = 1000
				scope:seljuk_equivalent.house = house:house_seljuk
			}
		}
	}

	# This is not him
	option = {
		name = hasan_sabbah.1031.b
		custom_tooltip = look_for_another_enemy_tt
		ai_chance = {
			base = 0
			modifier = {
				add = 1000
				NOT = { scope:seljuk_equivalent.house = house:house_seljuk }
			}
		}
	}
}
	}

	{
# A Rousing Sermon
# Agitate the populace decision event
# 1040
hasan_sabbah.1040 = {
	type = character_event
	title = hasan_sabbah.1040.t
	desc = hasan_sabbah.1040.desc
	theme = realm
	override_background = { reference = terrain }
	left_portrait = {
		character = root
		animation = rage
	}

	immediate = {
		random_owned_story = {
			limit = { story_type = story_hasan }
			var:ultimate_foe = { save_scope_as = ultimate_foe }
		}
	}

	# Make them angy
	option = {
		name = hasan_sabbah.1040.a
		duel = {
			skills = { intrigue learning }
			value = high_skill_rating
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				modifier = {
					add = {
						subtract = scope:location.county.county_opinion
					}
				}
				send_interface_toast = {
					type = event_toast_effect_good
					title = hasan_sabbah.1040.a.win
					left_icon = root
					scope:location.county = {
						add_county_modifier = {
							modifier = ep3_agitated_populace
							years = 15
						}
					}
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				modifier = {
					add = scope:location.county.county_opinion
				}
				send_interface_toast = {
					type = event_toast_effect_bad
					title = hasan_sabbah.1040.a.lose
					left_icon = root
					scope:location.county = {
						add_county_modifier = {
							modifier = tougher_to_convert
							years = 10
						}
					}
				}
			}
		}
		ai_chance = {
			base = 10
		}
	}
}
	}

	{
# The Old Man of the Mountain
# Post-war settling down event
# 1050
hasan_sabbah.1050 = {
	type = character_event
	title = hasan_sabbah.1050.t
	desc = hasan_sabbah.1050.desc
	theme = realm
	left_portrait = {
		character = root
		animation = thinking
	}

	# Let's settle
	option = {
		name = hasan_sabbah.1050.a

		custom_tooltip = create_new_kingdom
		create_dynamic_title = {
			tier = kingdom
			name = HASAN_KINGDOM
			adj = HASAN_KINGDOM_adj
		}
		change_government = clan_government
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		scope:hasan_home = {
			duchy = {
				every_direct_de_jure_vassal_title = {
					limit = { tier = tier_county }
					change_title_holder = {
						holder = root
						change = scope:change
					}
				}
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
		}
		scope:new_title = {
			change_title_holder = {
				holder = root
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
		hidden_effect = {
			scope:new_title = {
				set_de_jure_liege_title = root.location.empire
				set_coa = title:b_alamut
				set_color_from_title = scope:hasan_home
				set_capital_county = scope:hasan_home
			}
		}
		if = {
			limit = {
				exists = scope:caliph
				scope:caliph = {
					is_landed = no
				}
				scope:caliph.faith = root.faith
				NOT = { exists = root.faith.religious_head }
			}
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change2
				add_claim_on_loss = yes
			}
			custom_description = {
				text = "new_religious_head_title"
				object = scope:caliph
				subject = scope:caliph

				set_up_dynamic_spiritual_hof_title_existing_hof_effect = {
					CREATOR = root
					RELIGIOUS_HEAD = scope:caliph
				}
			}
			scope:caliph = {
				change_liege = {
					liege = root
					change = scope:change2
				}
			}
			resolve_title_and_vassal_change = scope:change2
		}
		destroy_laamp_effect = { ADVENTURER = root }
		ep3_become_landed_cleanup_effect = yes

		ai_chance = {
			base = 1000
		}
	}

	# Let's not
	option = {
		name = hasan_sabbah.1050.b
		ai_chance = {
			base = 0
		}
	}
}
	}
}


"common/story_cycles/ep3_story_cycle_hasan_sabbah.txt" = {
	{
story_hasan = {
	# by James Beaumont
	
	on_setup = {
		
	}
#
	on_end = {
		debug_log = "Hasan i Sabbah story ended on:"
		debug_log_date = yes
	}
#
	on_owner_death = {
		end_story = yes
	}


	# Progress on Assassing path Events
	effect_group = {
		months = 6

		first_valid = {
			triggered_effect = {
				trigger = {
					exists = var:radical_points
					var:radical_points >= 5
					story_owner = {
						OR = {
							faith = faith:ismaili
							faith = faith:nizari
						}
						NOR = {
							has_character_flag = arrived_in_egypt
							has_character_flag = had_hasan_sabah_20
						}
					}
				}
				effect = {
					story_owner = {
						trigger_event = hasan_sabbah.1020
					}
				}
			}
			triggered_effect = {
				trigger = {
					exists = var:radical_points
					var:radical_points >= 15
					NOT = { exists = var:ultimate_foe }
				}
				effect = {
					story_owner = {
						trigger_event = hasan_sabbah.1031
					}
				}
			}
			triggered_effect = {
				trigger = {
					exists = var:story_phase
					var:story_phase >= 2
					NOT = { exists = var:ultimate_foe }
					story_owner.domicile.domicile_location.county.holder ?= {
						save_temporary_scope_as = county_holder
					}
					faith:ismaili = {
						religious_head = {
							save_temporary_scope_as = ismaili_hof
							NOR = {
								this = scope:county_holder
								scope:county_holder = {
									any_liege_or_above = {
										this = scope:ismaili_hof
									}
								}
							}
						}
					}
					faith:nizari = {
						religious_head = {
							save_temporary_scope_as = nizari_hof
							NOR = {
								this = scope:county_holder
								scope:county_holder = {
									any_liege_or_above = {
										this = scope:nizari_hof
									}
								}
							}
						}
					}
				}
				effect = {
					story_owner = {
						domicile.domicile_location = {
							save_scope_as = location	
						}
						trigger_event = hasan_sabbah.1031
					}
				}
			}
		}
	}

	# Hasan dies or stops being muslim, end the story
	effect_group = {
		days = { 40 60 }

		first_valid = {
			triggered_effect = {
				trigger = {
					OR = {
						# Standard checks
						NOT = { exists = story_owner }
						story_owner = {
							is_alive = no
						}
						# Must be Muslim
						NOT = { story_owner = { religion = religion:islam_religion } }
						# Must be landless
						NOT = { story_owner = { has_government = landless_adventurer_government } }
						# Must not be Sunni
						story_owner = { faith = { has_doctrine = muhammad_succession_sunni_doctrine } }
					}
				}
				effect = {
					end_story = yes
				}
			}
		}
	}
}
	}
}

"events/story_cycles/ep3_story_cycle_el_cid.txt" = {
	{
namespace = cid

#######################################
# El Cid story cycle
# By Veronica Pazos
#######################################

#######################################
###
###	ONGOING STORY CYCLE EVENTS
###
### 0001-0099 	Story Entry Points
###	0100-0199	Part I: Exile
### 0200-0299	Part II: Restoration
### 0400-0499	Conclusion
### 0500-0599 	Maintenance
###
#######################################

#######################################
###
###	ENTRY POINTS TO THE STORY
###	0001	Your liege despises you
###
#######################################

# By Order of the King
# You are exiled by your liege / Someone at court despises you / Historical flavour if Alfonso VI is your liege
# 0001

scripted_trigger cid_0001_hate_trigger = {
	OR = {
		has_relation_rival = root
		has_relation_nemesis = root
		opinion = {
			target = root
			value <= -50
		}
	}
}

scripted_effect create_el_cid_story = {
	create_story = {
		type = story_el_cid
		save_scope_as = new_story
	}
	random_owned_story = {
		limit = { story_type = story_el_cid }
		save_scope_as = story_el_cid
		story_owner = {
			set_variable = {
				name = cid_enemy
				value = flag:$ENEMY$
			}
			set_variable = {
				name = cid_liege
				value = scope:liege
			}
			set_variable = {
				name = cid_loyalty_counter
				value = 0
			}
			set_variable = ongoing_cid_story_cycle
		}
	}
}

cid.0001 = {
	type = character_event
	window = fullscreen_event
	title = cid.0001.t
	desc = {
		desc = cid.0001.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = {
					var:cid_enemy = flag:alfonso
				}
				desc = cid.0001.desc.alfonso
			}
			triggered_desc = {
				trigger = {
					var:cid_enemy = flag:garcia
				}
				desc = cid.0001.desc.garcia_ordonez
			}
			triggered_desc = {
				trigger = {
					var:cid_enemy = flag:liege
				}
				desc = cid.0001.desc.liege_hate
			}
			desc = cid.0001.desc.courtier
		}
		desc = cid.0001.desc.outro
	}
	theme = laamp
	left_portrait = {
		character = root
		animation = wailing
	}
	right_portrait = {
		character = scope:liege
		animation = personality_callous
	}
	lower_right_portrait = {
		trigger = { exists = scope:bad_courtier }
		character = scope:bad_courtier
	}
	override_background = { reference = ep3_fullscreen_adventurer_negative }

	immediate = {		
		location.county.holder.top_liege = { save_scope_as = liege }
		if = { #Historical conditions first
			limit = { scope:liege = character:108500 }
			hidden_effect = { # We show this in the "after"
				create_el_cid_story = { ENEMY = alfonso }
			}
		}
		else_if = { #If your liege hates you that takes preferent
			limit = {
				scope:liege = { cid_0001_hate_trigger = yes }
			}
			hidden_effect = {
				create_el_cid_story = { ENEMY = liege }
			}
		}
		else_if = { #If Garcia Ordoñez is there then it's him even if he "likes" you
			limit = {
				character:106050 ?= {
					is_alive = yes
					top_liege = scope:liege
				}
			}
			character:106050 = {
				save_scope_as = bad_courtier
			}
			hidden_effect = {
				create_el_cid_story = { ENEMY = garcia }
			}
		}
		else_if = { #If a random courtier hates you
			limit = {
				scope:liege = {
					any_courtier = {
						location = scope:liege.location
						cid_0001_hate_trigger = yes
					}
				}
			}
			scope:liege = {
				random_courtier = {
					limit = {
						cid_0001_hate_trigger = yes
					}
					weight = {
						#Choose someone that really hates you first
						modifier = {
							add = 15
							has_relation_nemesis = root
						}
						modifier = {
							add = 10
							has_relation_rival = root
						}
						modifier = {
							add = 5
							opinion = {
								target = root
								value <= -90
							}
						}
						#Try to make it someone relevant
						modifier = {
							add = 5
							is_councillor_of = scope:liege
						}
						modifier = {
							add = 5
							OR = {
								is_close_family_of = scope:liege
								is_consort_of = scope:liege
							}
						}
						modifier = {
							add = 5
							is_powerful_vassal_of = scope:liege
						}
						modifier = {
							add = 2
							has_trait = callous
						}
						modifier = {
							add = 2
							has_trait = disloyal
						}
						modifier = {
							add = 2
							has_trait = ambitious
						}
					}
					save_scope_as = bad_courtier
				}
			}
			hidden_effect = {
				create_el_cid_story = { ENEMY = courtier }
			}
		}
		else = { #We make someone hate you
			scope:liege = {
				random_courtier = {
					limit = {
						is_available_healthy_ai_adult = yes
					}
					weight = {
						#Try to make it someone relevant
						modifier = {
							add = 5
							is_councillor_of = scope:liege
						}
						modifier = {
							add = 5
							OR = {
								is_close_family_of = scope:liege
								is_consort_of = scope:liege
							}
						}
						modifier = {
							add = 5
							is_powerful_vassal_of = scope:liege
						}
						modifier = {
							add = 2
							has_trait = callous
						}
						modifier = {
							add = 2
							has_trait = disloyal
						}
						modifier = {
							add = 2
							has_trait = ambitious
						}
					}
					save_scope_as = bad_courtier
				}
			}
			hidden_effect = {
				scope:bad_courtier = {
					add_opinion = {
						target = root
						opinion = -75
						modifier = hate_opinion
					}
				}
				create_el_cid_story = { ENEMY = courtier }
			}
		}
	}

	# I will always be loyal to you
	option = {
		name = cid.0001.a
		flavor = cid.0001.a.flavor
		custom_tooltip = story_el_cid_tt
		custom_tooltip = cid_loyalty_counter_positive
		change_variable = {
			name = cid_loyalty_counter
			add = 1
		}
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# I shall become my own liege
	option = {
		name = cid.0001.b
		flavor = cid.0001.b.flavor
		custom_tooltip = story_el_cid_tt
		custom_tooltip = cid_loyalty_counter_negative
		change_variable = {
			name = cid_loyalty_counter
			add = -1
		}
		ai_chance = {
			base = 0 # Historically determined
		}
	}
	
	# Opt out
	option = {
		name = ep3_story_cycle_admin_eunuch.2043.b
		scope:story_el_cid = { end_story = yes }
		ai_chance = {
			base = 0 # Historically determined
		}
	}
	
	after = { # To make it look nicer in the tooltip
		scope:liege ?= {
			if = {
				limit = { has_relation_friend = root }
				remove_relation_friend = root
			}
		}
		create_title_and_vassal_change = {
			type = independency
			add_claim_on_loss = yes
			save_scope_as = change
		}
		becomes_independent = { change = scope:change }
		resolve_title_and_vassal_change = scope:change
	}
}

#######################################
###
###	PART I: EXILE
###	1000	No one opens the door to you
###	1010	You have no money to pay your men
### 1020	You have to leave your spouse/children behind
### 1030	You have some money - send a gift?
### 1040	You pray for your liege
###
#######################################

# Closed Doors
# No one opens the door for you
# 1000

cid.1000 = {
	type = character_event
	title = cid.1000.t
	desc = cid.1000.desc
	theme = laamp
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:peasant
		animation = beg
	}
	lower_right_portrait = {
		trigger = { exists = scope:liege }
		character = scope:liege
	}
	override_background = { reference = alley_night }
	override_effect_2d = {
		reference = rain	
	}

	trigger = {
		is_landless_adventurer = yes
		NOT = { has_variable = had_cid_1000 }
	}

	immediate = {
		set_variable = had_cid_1000
		var:cid_liege = { save_scope_as = liege }
		if = {
			limit = {
				any_pool_character = {
					province = root.location
					is_adult = yes
				}
			}
			random_pool_character = {
				province = root.location
				limit = {
					is_adult = yes
				}
				save_scope_as = peasant
			}
		}
		else = {
			hidden_effect = {
				create_basic_peasant_effect = yes
			}
		}
	}

	# Let's just leave
	option = {
		name = cid.1000.a
		flavor = cid.1000.a.flavor
		custom_tooltip = cid_loyalty_counter_positive
		domicile = {
			change_provisions = medium_provisions_loss
		}
		change_variable = {
			name = cid_loyalty_counter
			add = 1
		}
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# Open the door
	option = {
		name = cid.1000.b
		flavor = cid.1000.b.flavor
		custom_tooltip = cid_loyalty_counter_negative
		add_character_modifier = {
			modifier = cid_opened_doors_modifier
			years = 10
		}
		domicile = {
			change_provisions = minor_provisions_gain
		}
		change_variable = {
			name = cid_loyalty_counter
			add = -1
		}
		ai_chance = {
			base = 0 # Historically determined
		}
	}
}

# No Gold or Silver
# You cannot afford your men
# 1010

scripted_trigger cid_1010_courtier_trigger = {
	is_adult = yes
	NOR = {
		is_close_family_of = root
		is_spouse_of = root
	}
}

cid.1010 = {
	type = character_event
	title = cid.1010.t
	desc = cid.1010.desc
	theme = laamp
	left_portrait = {
		character = root
		animation = wedding_happy_cry
	}
	right_portrait = {
		character = scope:friend
		animation = lantern
		camera = camera_event_right_pointing_right
	}
	lower_left_portrait = scope:courtier_1
	lower_center_portrait = {
		trigger = { exists = scope:courtier_2 }
		character = scope:courtier_2
	}
	lower_right_portrait = {
		trigger = { exists = scope:courtier_3 }
		character = scope:courtier_3
	}
	override_background = { reference = ep2_hunt_foggy_forest }
	override_effect_2d = {
		reference = fog	
	}

	trigger = {
		is_landless_adventurer = yes
		any_courtier = {
			cid_1010_courtier_trigger = yes
			count >= 2
		}
		NOT = { has_variable = had_cid_1010 }
	}

	immediate = {
		set_variable = had_cid_1010
		var:cid_liege = { save_scope_as = liege }
		random_courtier = {
			limit = { cid_1010_courtier_trigger = yes }
			weight = {
				modifier = {
					add = 15
					has_relation_best_friend = root
				}
				modifier = {
					add = 10
					has_relation_friend = root
				}
				modifier = {
					add = 5
					opinion = {
						target = root
						value >= 50
					}
				}
			}
			save_scope_as = friend
		}
		random_courtier = {
			limit = {
				cid_1010_courtier_trigger = yes
				NOT = { this = scope:friend }
			}
			weight = {
				modifier = {
					add = 5
					has_any_court_position = yes
				}
			}
			save_scope_as = courtier_1
		}
		if = {
			limit = {
				any_courtier = {
					cid_1010_courtier_trigger = yes
					NOT = { this = scope:friend }
					NOT = { this = scope:courtier_1 }
				}
			}
			random_courtier = {
				limit = {
					cid_1010_courtier_trigger = yes
					NOT = { this = scope:friend }
					NOT = { this = scope:courtier_1 }
				}
				weight = {
					modifier = {
						add = 5
						has_any_court_position = yes
					}
				}
				save_scope_as = courtier_2
			}
		}
		if = {
			limit = {
				any_courtier = {
					cid_1010_courtier_trigger = yes
					NOT = { this = scope:friend }
					NOT = { this = scope:courtier_1 }
					NOT = { this = scope:courtier_2 }
				}
			}
			random_courtier = {
				limit = {
					cid_1010_courtier_trigger = yes
					NOT = { this = scope:friend }
					NOT = { this = scope:courtier_1 }
					NOT = { this = scope:courtier_2 }
				}
				weight = {
					modifier = {
						add = 5
						has_any_court_position = yes
					}
				}
				save_scope_as = courtier_3
			}
		}
		if = {
			limit = { employs_court_position = camp_cook_camp_officer }
			random_court_position_holder = {
				type = camp_cook_camp_officer
				save_scope_as = cook
			}
		}
	}
	
	# Special option if you have a Camp Cook
	option = {
		name = cid.1010.a
		add_internal_flag = special
		trigger = { employs_court_position = camp_cook_camp_officer }
		domicile = {
			change_provisions = minor_provisions_loss
		}
		
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# Thanks, amigo
	option = {
		name = cid.1010.b
		flavor = cid.1010.b.flavor
		custom_tooltip = cid_loyalty_counter_negative
		if = {
			limit = {
				NOT = { has_relation_friend = scope:friend }
			}
			set_relation_friend = {
				target = scope:friend
				reason = friend_cid_lent_gold
			}
		}
		else = {
			scope:friend = {
				add_opinion = {
					target = root
					modifier = strengthened_friendship_opinion
				}
			}
		}
		add_gold = medium_gold_value
		change_variable = {
			name = cid_loyalty_counter
			add = -1
		}		
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# Dont anger the king further
	option = {
		name = cid.1010.c
		custom_tooltip = cid_loyalty_counter_very_positive
		remove_courtier_or_guest = scope:courtier_1
		scope:courtier_1 = {
			set_variable = {
				name = cid_1010_no_invite_var
				value = root
			}
		}
		if = {
			limit = { exists = scope:courtier_2 }
			remove_courtier_or_guest = scope:courtier_2
			scope:courtier_2 = {
				set_variable = {
					name = cid_1010_no_invite_var
					value = root
				}
			}
		}
		if = {
			limit = { exists = scope:courtier_3 }
			remove_courtier_or_guest = scope:courtier_3
			scope:courtier_3 = {
				set_variable = {
					name = cid_1010_no_invite_var
					value = root
				}
			}
		}
		change_variable = {
			name = cid_loyalty_counter
			add = 2
		}
		ai_chance = {
			base = 0 # Historically determined
		}
	}
}

# Farewell, My Dear
# You leave your spouse/children behind
# 1020

cid.1020 = {
	type = character_event
	title = cid.1020.t
	desc = {
		desc = cid.1020.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:child_1
				}
				desc = cid.0001.desc.children
			}
			desc = cid.0001.desc.no_children
		}
	}
	theme = laamp
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:spouse
		animation = wailing
	}
	lower_left_portrait = {
		trigger = { exists = scope:child_1 }
		character = scope:child_1
	}
	lower_center_portrait = {
		trigger = { exists = scope:child_2 }
		character = scope:child_2
	}
	lower_right_portrait = {
		trigger = { exists = scope:priest }
		character = scope:priest
	}
	override_background = { reference = temple }

	trigger = {
		any_courtier = {
			is_spouse_of = root 
		}
		NOT = { has_variable = had_cid_1020 }
	}

	immediate = {
		set_variable = had_cid_1020
		var:cid_liege = { save_scope_as = liege }
		random_courtier = {
			limit = { is_spouse_of = root }
			weight = {
				modifier = {
					add = 15
					has_relation_soulmate = root
				}
				modifier = {
					add = 5
					has_relation_lover = root
				}
				modifier = {
					add = 5
					this = root.primary_spouse
				}
			}
			save_scope_as = spouse
		}
		if = {
			limit = {
				any_courtier = { is_child_of = root }
			}
			random_courtier = {
				limit = { is_child_of = root }
				weight = {
					modifier = {
						add = 5
						is_primary_heir_of = root
					}
				}
				save_scope_as = child_1
			}
		}
		if = {
			limit = {
				any_courtier = {
					is_child_of = root
					NOT = { this = scope:child_1 }
				}
			}
			random_courtier = {
				limit = {
					is_child_of = root
					NOT = { this = scope:child_1 }
				}
				save_scope_as = child_2
			}
		}
		if = {
			limit = {
				employs_court_position = camp_priest_camp_officer
			}
			random_court_position_holder = {
				type = camp_priest_camp_officer
				save_scope_as = my_priest
			}
		}
	}
	
	# Special option if you have a Priest that can intercede
	option = {
		name = cid.1020.a
		add_internal_flag = special
		trigger = {
			employs_court_position = camp_priest_camp_officer
		}
		remove_short_term_gold = minor_gold_value
		add_piety = medium_piety_value
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# I shall miss you dearly
	option = {
		name = cid.1020.b
		flavor = cid.1020.b.flavor
		custom_tooltip = cid_loyalty_counter_positive
		
		location.county.holder = {
			add_courtier = scope:spouse
		}
		if = {
			limit = { exists = scope:child_1 }
			location.county.holder = { add_courtier = scope:child_1 }
		}
		if = {
			limit = { exists = scope:child_2 }
			location.county.holder = { add_courtier = scope:child_2 }
		}
		
		change_variable = {
			name = cid_loyalty_counter
			add = 1
		}
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# I cannot do this
	option = {
		name = cid.1020.c
		flavor = cid.1020.c.flavor
		custom_tooltip = cid_loyalty_counter_very_negative
		if = {
			limit = {
				NOT = {
					can_set_relation_lover_trigger = { CHARACTER = scope:spouse }
				}
			}
			set_relation_lover = {
				target = scope:spouse
				reason = cid_lover_refused_to_left_behind
			}
		}
		add_character_modifier = {
			modifier = cid_family_good_modifier
			years = 10
		}
		change_variable = {
			name = cid_loyalty_counter
			add = -2
		}
		ai_chance = {
			base = 0 # Historically determined
		}
	}
}

# For the Love of the King
# You have some money, send gift?
# 1030

cid.1030 = {
	type = character_event
	title = cid.1030.t
	desc = cid.1030.desc
	theme = laamp
	left_portrait = {
		character = root
		animation = thinking
	}
	lower_right_portrait = scope:liege
	artifact = {
		trigger = { exists = scope:artifact }
		target = scope:artifact
		position = lower_left_portrait
	}

	trigger = {
		NOT = { has_variable = had_cid_1030 }
		gold >= 50
	}

	immediate = {
		set_variable = had_cid_1030
		var:cid_liege = { save_scope_as = liege }
		if = {
			limit = {
				any_character_artifact = {
					OR = { 
						rarity = illustrious
						rarity = famed 
					}
				}
			}
			random_character_artifact = {
				limit = {
					OR = { 
						rarity = masterwork
						rarity = illustrious
						rarity = famed 
					}
				}
				weight = {
					modifier = {
						add = 10
						is_equipped = no
					}
					modifier = {
						add = 2
						rarity = famed
					}
					modifier = {
						add = 2
						rarity = illustrious
					}
				}
				save_scope_as = artifact
			}
		}
	}

	# If you have an artifact send that instead?
	option = {
		name = cid.1030.a
		trigger = { exists = scope:artifact }
		add_internal_flag = special
		custom_tooltip = cid_loyalty_counter_positive
		scope:artifact = { set_owner = scope:liege }
		change_variable = {
			name = cid_loyalty_counter
			add = 1
		}
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# Send money
	option = {
		name = cid.1030.b
		custom_tooltip = cid_loyalty_counter_positive
		pay_short_term_gold = {
			target = scope:liege
			gold = medium_gold_value
		}
		change_variable = {
			name = cid_loyalty_counter
			add = 1
		}
		ai_chance = {
			base = 1000 # Historically determined
		}
	}
	
	# No, thanks
	option = {
		name = cid.1030.c
		custom_tooltip = cid_loyalty_counter_negative
		
		change_variable = {
			name = cid_loyalty_counter
			add = -1
		}
		ai_chance = {
			base = 0
		}
	}
}

# May the Lord Have Mercy
# Publicly pray for your liege
# 1040

cid.1040 = {
	type = character_event
	title = cid.1040.t
	desc = cid.1040.desc
	theme = laamp
	left_portrait = {
		character = root
		animation = prayer
	}
	lower_right_portrait = scope:liege
	override_background = { reference = temple }

	trigger = {
		NOT = { has_variable = had_cid_1040 }
	}

	immediate = {
		set_variable = had_cid_1040
		var:cid_liege = { save_scope_as = liege }
	}

	# You do it in your own camp, dayum
	option = {
		name = cid.1040.a
		custom_tooltip = cid_1040_a_tt
		trigger = {
			domicile = { has_domicile_building = baggage_train_shrine }
		}
		add_internal_flag = special
		
		custom_tooltip = cid_loyalty_counter_very_positive
		
		change_variable = {
			name = cid_loyalty_counter
			add = 2
		}
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# Pray for them
	option = {
		name = cid.1040.b
		custom_tooltip = cid_loyalty_counter_positive
		change_variable = {
			name = cid_loyalty_counter
			add = 1
		}
		ai_chance = {
			base = 1000 # Historically determined
		}
	}
	
	# Pray for yourself
	option = {
		name = cid.1040.c
		custom_tooltip = cid_loyalty_counter_negative
		add_character_modifier = {
			modifier = cid_own_prayer
			years = 15
		}
		change_variable = {
			name = cid_loyalty_counter
			add = -1
		}
		ai_chance = {
			base = 0
		}
	}
}

#######################################
###
###	PART II: RESTORATION
###	2000	You win Tizona
### 2001	You win Colada
###	2010	Your liege offers you a favourable marriage
### 2020	You become landed again
###
#######################################

# From the Elbow Down
# You win Tizona
# 2000

cid.2000 = {
	type = character_event
	title = cid.2000.t
	desc = {
		desc = cid.2000.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:loser }
				desc = cid.2000.desc.loser
			}
			desc = cid.2000.desc.fallback
		}
		desc = cid.2000.desc.outro
	}
	theme = laamp
	left_portrait = {
		character = root
		animation = jockey_victory
		camera = camera_event_horse_left
	}
	right_portrait = {
		trigger = { exists = scope:loser }
		character = scope:loser
		animation = severelywounded
	}
	artifact = {
		target = scope:newly_created_artifact
		position = lower_center_portrait
	}
	lower_right_portrait = scope:liege
	override_background = { reference = ce1_legendary_battlefield }
	override_effect_2d = {
		reference = legend_glow	
	}

	trigger = {
		NOT = { has_variable = had_cid_2000 }
		has_variable = ongoing_cid_story_cycle
	}

	immediate = {
		set_variable = had_cid_2000
		var:cid_liege = { save_scope_as = liege }
		# Create the artifact
		if = { # Court Artifact
			limit = { has_royal_court = yes }
			create_artifact = {
				name = artifact_wall_cid_sword_name
				description = artifact_wall_el_cids_sword
				type = pedestal
				visuals = wall_cid_sword
				wealth = 90
				quality = 90
				template = tizona_template
				history = {
					type = created_before_history
				}
				modifier = tizona_modifier
				save_scope_as = newly_created_artifact
				decaying = no
			}
		}
		else = {
			hidden_effect_new_object = {
				create_artifact = {
					name = artifact_wall_cid_sword_name
					description = artifact_wall_el_cids_sword
					type = sword
					visuals = sword
					modifier = tizona_no_court_modifier
					wealth = 90
					quality = 90
					save_scope_as = newly_created_artifact
				}
			}
		}
	}

	# I win!
	option = {
		name = cid.2000.a
		flavor = cid.2000.a.flavor
		custom_tooltip = cid_loyalty_counter_negative
		custom_tooltip = cid.2001.a.tt
		change_variable = {
			name = cid_loyalty_counter
			add = -1
		}
		add_gold = medium_gold_value
		
		#If you have CE1 we give you a legend seed
		if = {
			limit = {
				has_dlc_feature = legends
				NOT = { has_variable = had_cid_2001 }
				exists = scope:loser
				NOT = { has_game_rule = historical_legends_only }
			}
			create_legend_seed = {
				type = heroic
				quality = famed
				chronicle = legendary_battle
				properties = {
					winner = root
					loser = scope:loser
					location = root.location
				}
			}
		}
		
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# Send the spoils to the king
	option = {
		name = cid.2000.b
		flavor = cid.2000.b.flavor
		custom_tooltip = cid_loyalty_counter_positive
		change_variable = {
			name = cid_loyalty_counter
			add = 1
		}
		scope:liege = {
			add_gold = medium_gold_value
			scope:newly_created_artifact = { set_owner = scope:liege }
		}
		
		ai_chance = {
			base = 0 # Historically determined
		}
	}
}

# From a Brave Master
# You win Colada
# 2001

cid.2001 = {
	type = character_event
	title = cid.2001.t
	desc = {
		desc = cid.2001.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:loser }
				desc = cid.2001.desc.loser
			}
			desc = cid.2001.desc.fallback
		}
		desc = cid.2001.desc.outro
		first_valid = {
			triggered_desc = {
				trigger = { has_variable = had_cid_2000 }
				desc = cid.2001.desc.outro.tizona
			}
		}
	}
	theme = laamp
	left_portrait = {
		character = root
		animation = sword_coup_degrace
	}
	right_portrait = {
		trigger = { exists = scope:loser }
		character = scope:loser
		animation = severelywounded
	}
	artifact = {
		target = scope:newly_created_artifact
		position = lower_center_portrait
	}
	lower_right_portrait = scope:liege
	override_background = { reference = ce1_legendary_battlefield }
	override_effect_2d = {
		reference = rain	
	}

	trigger = {
		NOT = { has_variable = had_cid_2001 }
		has_variable = ongoing_cid_story_cycle
	}

	immediate = {
		set_variable = had_cid_2001
		var:cid_liege = { save_scope_as = liege }
		# Create the artifact
		if = { # Court Artifact
			limit = { has_royal_court = yes }
			hidden_effect_new_object = {
				create_artifact = {
					name = artifact_colada_name
					description = artifact_colada_description
					type = pedestal
					visuals = wall_cid_sword
					wealth = 75
					quality = 75
					template = general_unique_template
					history = {
						type = created_before_history
					}
					modifier = colada_modifier
					save_scope_as = newly_created_artifact
					decaying = no
				}
			}
		}
		else = {
			hidden_effect_new_object = {
				create_artifact = {
					name = artifact_colada_name
					description = artifact_colada_description
					type = sword
					visuals = sword
					modifier = colada_non_court_modifier
					wealth = 75
					quality = 75
					save_scope_as = newly_created_artifact
				}
			}
		}
	}

	# I win!
	option = {
		name = cid.2001.a
		flavor = cid.2001.a.flavor
		custom_tooltip = cid_loyalty_counter_negative
		custom_tooltip = cid.2001.a.tt
		change_variable = {
			name = cid_loyalty_counter
			add = -1
		}
		add_gold = medium_gold_value
		
		#If you have CE1 we give you a legend seed
		if = {
			limit = {
				has_dlc_feature = legends
				NOT = { has_variable = had_cid_2000 }
				NOT = { has_game_rule = historical_legends_only }
			}
			create_legend_seed = {
				type = heroic
				quality = famed
				chronicle = legendary_battle
				properties = {
					winner = root
					loser = scope:loser
					location = root.location
				}
			}
		}
		
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# Send the spoils to the king
	option = {
		name = cid.2001.b
		custom_tooltip = cid_loyalty_counter_positive
		change_variable = {
			name = cid_loyalty_counter
			add = 1
		}
		scope:liege = {
			add_gold = medium_gold_value
			scope:newly_created_artifact = { set_owner = scope:liege }
		}
		
		ai_chance = {
			base = 0 # Historically determined
		}
	}
}

# A Favorable Offer
# Your liege offers you a favourable marriage
# 2010

scripted_trigger cid_2010_possible_child_trigger = {
	is_child_of = root
	trigger_if = {
		limit = {
			NOR = {
				faith = { has_doctrine = doctrine_polygamy }
				allowed_more_spouses = yes
			}
		}
		is_married = no
		is_betrothed = no
	}
}

scripted_trigger cid_2010_herald_trigger = {
	is_capable_adult = yes
	NOR = {
		is_close_family_of = scope:liege
		is_spouse_of = scope:liege
	}
	NOT = { has_council_position = councillor_court_chaplain }
}

scripted_effect cid_2010_create_proposed_spouse_effect = {
	create_character = {
		template = knight
		dynasty = none
		location = scope:liege.location
		culture = scope:liege.location.culture
		faith = scope:liege.location.faith
		gender_female_chance = $CHANCE$
		save_scope_as = proposed_spouse
	}
}

cid.2010 = {
	type = character_event
	title = cid.2010.t
	desc = cid.2010.desc
	theme = laamp
	left_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:herald
		animation = chancellor
	}
	lower_left_portrait = {
		character = scope:child
	}
	lower_right_portrait = {
		character = scope:proposed_spouse
	}

	trigger = {
		any_courtier = {
			cid_2010_possible_child_trigger = yes
		}
		var:cid_loyalty_counter >= 2
		NOT = { has_variable = had_cid_2010 }
	}

	immediate = {
		set_variable = had_cid_2010
		var:cid_liege = { save_scope_as = liege }
		if = {
			limit = {
				scope:liege = {
					any_courtier = { cid_2010_herald_trigger = yes }
				}
			}
			scope:liege = {
				random_courtier = {
					limit = {
						cid_2010_herald_trigger = yes
					}
					save_scope_as = herald
				}
			}
		}
		else = {
			create_character = {
				template = herald_character
				dynasty = none
				location = scope:liege.location
				culture = scope:liege.location.culture
				faith = scope:liege.location.faith
				gender_female_chance = root_faith_dominant_gender_adjusted_female_chance
				save_scope_as = herald
			}
			scope:liege = { add_courtier = scope:herald }
		}
		random_courtier = {
			limit = {
				cid_2010_possible_child_trigger = yes
			}
			weight = {
				modifier = {
					add = 5
					is_primary_heir_of = root
				}
				modifier = {
					add = 2
					age >= 16
				}
			}
			save_scope_as = child
		}
		if = {
			limit = {
				scope:liege = {
					any_close_or_extended_family_member = {
						can_marry_character_trigger = {
							CHARACTER = scope:child
						}
					}
				}
			}
			scope:liege = {
				random_close_or_extended_family_member = {
					limit = {
						can_marry_character_trigger = {
							CHARACTER = scope:child
						}
					}
					weight = { # Good candidates 
						modifier = {
							add = 5
							is_close_family_of = scope:liege
						}
						modifier = { # Age appropriate
							add = 5
							age <= scope:child.age_plus_5
							age >= scope:child.age_minus_5
						}
					}
					save_scope_as = proposed_spouse
				}
			}
		}
		else_if = {
			limit = {
				scope:liege = {
					any_courtier = {
						can_marry_character_trigger = {
							CHARACTER = scope:child
						}
					}
				}
			}
			scope:liege = {
				random_courtier = {
					limit = {
						can_marry_character_trigger = {
							CHARACTER = scope:child
						}
					}
					weight = { # Age appropriate
						modifier = {
							add = 5
							age <= scope:child.age_plus_5
							age >= scope:child.age_minus_5
						}
						modifier = { # Knights are just cool
							add = 2
							is_knight_of = scope:liege
						}
					}
					save_scope_as = proposed_spouse
				}
			}
		}
		else = {
			if = { # We make them a woman if your child is a man/woman that can marry a woman
				limit = {
					scope:child = {
						OR = {
							AND = {
								is_female = yes
								OR = {
									has_sexuality = homosexual
									has_sexuality = bisexual
								}
								allowed_to_marry_same_sex_trigger = yes
							}
							AND = {
								is_male = yes
								OR = {
									has_sexuality = heterosexual
									has_sexuality = bisexual
								}
							}
						}
					}
				}
				cid_2010_create_proposed_spouse_effect = { CHANCE = 100 }
			}
			else = {
				cid_2010_create_proposed_spouse_effect = { CHANCE = 0 }
			}
			scope:proposed_spouse = { add_character_flag = wear_armor }
			scope:liege = { add_courtier = scope:proposed_spouse }
		}
	}

	# Sure
	option = {
		name = cid.2010.a
		flavor = cid.2010.a.flavor
		custom_tooltip = cid_loyalty_counter_very_positive
		scope:child = { create_betrothal = scope:proposed_spouse }
		change_variable = {
			name = cid_loyalty_counter
			add = 2
		}
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# No way
	option = {
		name = cid.2010.b
		custom_tooltip = cid_loyalty_counter_very_negative
		add_character_modifier = {
			modifier = cid_refused_betrothal
			years = 10
		}
		change_variable = {
			name = cid_loyalty_counter
			add = -2
		}
		ai_chance = {
			base = 0 # Historically determined
		}
	}
}

# LOYAL ENDING
# An Honorable Man
# You become landed again
# 2020

scripted_effect cid_2020_loyal_effect = {
	if = {
		limit = { NOT = { has_trait = loyal } }
		add_trait_force_tooltip = loyal
	}
}

cid.2020 = {
	type = character_event
	title = cid.2020.t
	desc = cid.2020.desc
	theme = laamp
	left_portrait = {
		character = root
		animation = wedding_happy_cry
	}
	right_portrait = {
		character = scope:liege
		animation = ecstasy
	}

	trigger = {
		#triggered through the story cycle
		var:cid_liege.primary_title = {
			any_de_jure_county = {
				holder = root.var:cid_liege
				NOR = {
					root.var:cid_liege.capital_county ?= this
					root.var:cid_liege.primary_title ?= this
				}
			}
		}
		NOT = { has_variable = had_cid_2020 }
	}

	immediate = {
		if = {
			limit = {
				is_ai = no
			}
			add_achievement_global_variable_effect = {
				VARIABLE = finished_mio_cid_achievement
				VALUE = yes
			}
		}
		set_variable = had_cid_2020
		var:cid_liege = { save_scope_as = liege }
		scope:liege.primary_title = {
			every_de_jure_county = {
				limit = {
					holder = scope:liege
					NOR = {
						scope:liege.capital_county ?= this
						scope:liege.primary_title ?= this
					}
				}
				add_to_list = granted_title
			}
		}
	}

	# Wahoo!
	option = {
		name = cid.2020.a
		flavor = cid.2020.a.flavor
		cid_2020_loyal_effect = yes
		# Resolve title, liege, government changes
		ep3_become_landed_save_liege_effect = {
			TITLE_GIVER = root.var:cid_liege
			ALWAYS_INDEPENDENT = no
			TITLE_LIST = granted_title
		}
		ep3_become_landed_transfer_no_ennobled_modifier_effect = {
			TITLE_RECEIVER = root
			TITLE_LIST = granted_title
			TYPE = granted
			REASON = flag:negotiated
		}
		
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# I'm good
	option = {
		name = cid.2020.b
		flavor = cid.2020.b.flavor
		custom_tooltip = cid_2020_b_tt
		cid_2020_loyal_effect = yes
		add_prestige = major_prestige_gain
		domicile = {
			change_provisions = medium_provisions_gain
		}
		if = {
			limit = {
				can_add_hook = {
					target = scope:liege
					type = loyalty_hook
				}
			}
			add_hook = {
				target = scope:liege
				type = loyalty_hook
			}
		}
		
		ai_chance = {
			base = 0 # Historically determined
		}
	}
	
	# I'm good and also screw you
	option = {
		name = cid.2020.c
		custom_tooltip = cid_2020_b_tt		
		scope:liege = {
			add_opinion = {
				target = root
				opinion = -50
				modifier = disrespect_opinion
			}
		}
		
		ai_chance = {
			base = 0 # Historically determined
		}
	}
	
	after = {
		random_owned_story = {
			limit = {
				story_type = story_el_cid
			}
			end_story = yes
		}
	}
}

#######################################
###
###	CONCLUSION
###
### # Good Ending given out in 2020 #
###	4000	Neutral Ending
### 4010	Disloyal Ending
###
#######################################

# The End of the Song
# Neutral Ending
# 4000

cid.4000 = {
	type = letter_event
	opening = {
		desc = cid.4000.opening
	}
	desc = cid.4000.desc
	sender = scope:sender

	trigger = {
		NOT = { has_variable = had_cid_4000 }
	}

	immediate = {
		set_variable = had_cid_4000
		var:cid_liege = { save_scope_as = sender }
	}

	# Bleh
	option = {
		name = cid.4000.a
		if = { #You didn't manage to max out either way
			limit = {
				NOT = { has_trait = fickle }
			}
			add_trait_force_tooltip = fickle
		}
		ai_chance = {
			base = 100
		}
	}
	
	after = {
		random_owned_story = {
			limit = {
				story_type = story_el_cid
			}
			end_story = yes
		}
	}
}

# Mio Cid
# Disloyal Ending: You become landed again
# 4010

scripted_effect cid_4010_disloyal_effect = {
	if = {
		limit = { NOT = { has_trait = disloyal } }
		add_trait_force_tooltip = disloyal
	}
}

cid.4010 = {
	type = character_event
	title = cid.4010.t
	desc = cid.4010.desc
	theme = laamp
	left_portrait = {
		character = root
		animation = dismissal
	}
	right_portrait = {
		character = scope:herald
		animation = anger
	}
	lower_right_portrait = scope:liege

	trigger = {
		#triggered through the story cycle <= -5 loyalty
		var:cid_liege.primary_title = {
			any_de_jure_county = {
				holder = root.var:cid_liege
				NOR = {
					root.var:cid_liege.capital_county ?= this
					root.var:cid_liege.primary_title ?= this
				}
			}
		}
		NOT = { has_variable = had_cid_4010 }
	}

	immediate = {
		set_variable = had_cid_4010
		var:cid_liege = { save_scope_as = liege }
		if = {
			limit = {
				scope:liege = {
					any_courtier = { cid_2010_herald_trigger = yes }
				}
			}
			scope:liege = {
				random_courtier = {
					limit = {
						cid_2010_herald_trigger = yes
					}
					save_scope_as = herald
				}
			}
		}
		else = {
			create_character = {
				template = herald_character
				dynasty = none
				location = scope:liege.location
				culture = scope:liege.location.culture
				faith = scope:liege.location.faith
				gender_female_chance = root_faith_dominant_gender_adjusted_female_chance
				save_scope_as = herald
			}
			scope:liege = { add_courtier = scope:herald }
		}
	}

	# Wahoo! Get landed and independent
	option = {
		name = cid.4010.a
		flavor = cid.4010.a.flavor
		trigger = { has_variable = cid_title_to_give }
		cid_4010_disloyal_effect = yes
		var:cid_title_to_give = {
			every_de_jure_county = { add_to_list = seized_titles }
		}
		ep3_become_landed_save_liege_effect = {
			TITLE_GIVER = var:cid_title_to_give.holder
			ALWAYS_INDEPENDENT = yes
			TITLE_LIST = seized_titles
		}
		ep3_become_landed_transfer_no_ennobled_modifier_effect = {
			TITLE_RECEIVER = root
			TITLE_LIST = seized_titles
			TYPE = usurped
			REASON = flag:seize_realm
		}
		
		ai_chance = {
			base = 1000 # Historically determined
		}
	}

	# I'm good
	option = {
		name = cid.4010.b
		flavor = cid.4010.b.flavor
		custom_tooltip = cid_2020_b_tt
		cid_4010_disloyal_effect = yes
		add_prestige = medium_prestige_gain
		
		ai_chance = {
			base = 500 # Historically determined
		}
	}
	
	# Actually... the king is not that bad
	option = {
		name = cid.4010.c
		flavor = cid.4010.c.flavor
		custom_tooltip = cid_2020_b_tt
		domicile = { change_provisions = medium_provisions_gain }
		if = {
			limit = {
				scope:liege = {
					can_add_hook = {
						target = root
						type = favor_hook
					}
				}
			}
			scope:liege = {
				add_hook = {
					target = root
					type = favor_hook
				}
			}
		}
		progress_towards_friend_effect = {
			REASON = friend_cid_liege_repentance
			CHARACTER = scope:liege
			OPINION = 50
		}
		
		ai_chance = {
			base = 0 # Historically determined
		}
	}
	
	after = {
		random_owned_story = {
			limit = {
				story_type = story_el_cid
			}
			end_story = yes
		}
	}
}

#######################################
###
###	MAINTENANCE
###	5000	Liege dies (letter event)
###
#######################################

# Your liege died
# 5000

cid.5000 = {
	type = letter_event
	opening = {
		desc = cid.5000.opening
	}
	desc = cid.5000.desc
	sender = scope:sender
	
	immediate = {
		location.county.holder.top_liege = { save_scope_as = sender }
	}

	# Oops
	option = {
		name = cid.5000.a
		ai_chance = {
			base = 1000 # Historically determined
		}
	}
	
	after = {
		random_owned_story = {
			limit = {
				story_type = story_el_cid
			}
			end_story = yes
		}
	}
}
	}
}

"common/character_interactions/06_ep3_laamp_interactions.txt" = {
	{
		## Hasan cannot be exiled by anyone during his story.
		disable_interaction_for_hasan_trigger = yes
	}
}

"common/casus_belli_types/07_ep3_wars.txt" = {
	{
ep3_hasan_assassin_war = {
	icon = dissolution_war
	group = event
	allow_hostages = no
	allowed_for_character = {}
	valid_to_start = {
		always = no
	}

	on_declaration = {
		on_declared_war = yes
		# TODO_CD_EP3, add every same-faith vassal to attacker's side?
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { # Desc for only one player attacker
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = nation_fracturing_faction_war_victory_desc_local_player_attacker_alone
			}
			triggered_desc = { # Desc for only one attacker, player defender
				trigger = {
					scope:defender = {
						is_local_player = yes
					}
				}
				desc = player_nation_fracturing_faction_war_victory_desc_local_player_defender_attacker_alone
			}
			desc = nation_fracturing_faction_war_victory_desc_local_player_attacker_alone # Desc for a third party involved
		}

	}

	on_victory = {

		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }
		hasan_sabbah_end_war = {
			HASAN = scope:attacker
			SELJUK = scope:defender
		}

		# EP3: note gold gained from military assistance/join war contracts and their war contribution threshold
		laamp_as_mercenary_payout_tooltip_effect = yes
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = player_nation_fracturing_faction_war_white_peace_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = player_nation_fracturing_faction_war_white_peace_attacker_desc
			}
			desc = player_nation_fracturing_faction_war_white_peace_desc
		}

	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}
		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = white_peace
				}
			}
		}

		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}

			add_character_flag = {
				flag = recent_nation_fracturing_faction_war
				years = faction_nation_fracturing_war_white_peace_cooldown
			}
			add_prestige = minor_prestige_value
		}

		on_white_peace_faction_revolt_war = yes
		# End Hasan's story cycle
		hidden_effect = {
			scope:attacker = {
				if = {
					limit = {
						any_owned_story = {
							story_type = story_hasan
						}
					}
					random_owned_story = {
						limit = {
							story_type = story_hasan
						}
						end_story = yes
					}
				}
			}
		}

		# EP3: note gold gained from military assistance/join war contracts and their war contribution threshold
		laamp_as_mercenary_payout_tooltip_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = nation_fracturing_faction_war_defeat_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = player_nation_fracturing_defeat_attacker_desc
			}
			desc = player_nation_fracturing_faction_war_defeat_desc
		}

	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:defender = {
			add_character_flag = {
				flag = recent_nation_fracturing_faction_war
				years = faction_nation_fracturing_war_defeat_cooldown
			}
			add_dread = medium_dread_gain
			# Prestige for Defender
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
			add_achievement_flag_effect = { FLAG = achievement_know_your_place_flag }

			# LEGITIMACY FROM WINNING FACTION WAR
			faction_war_end_victory_legitimacy_effect = yes
		}
		# End Hasan's story cycle
		hidden_effect = {
			scope:attacker = {
				if = {
					limit = {
						any_owned_story = {
							story_type = story_hasan
						}
					}
					random_owned_story = {
						limit = {
							story_type = story_hasan
						}
						end_story = yes
					}
				}
			}
		}

		# EP3: note gold gained from military assistance/join war contracts and their war contribution threshold
		laamp_as_mercenary_payout_tooltip_effect = yes
	}

	on_invalidated_desc = msg_invalidate_war_title

	check_defender_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	transfer_behavior = transfer

	war_name = "ASSASSIN_NATION_FRACTURING_WAR_NAME"

	interface_priority = 120

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_ai_diplo_distance_to_title = 500
}
	}
}

"common/on_action/dlc/ep3/el_cid_story_cycle_on_action.txt" = {
	{
#####################################################
###
###	El Cid Story Cycle On-Actions
###
### el_cid_landless_on_action
### el_cid_landless_or_landed_on_action
###
#####################################################

# Landless
el_cid_landless_on_action = {
	random_events = {
		# No one opens the door to you
		200 = cid.1000
		# You have no money to pay your men
		100 = cid.1010
		# You have to leave your spouse/children behind
		200 = cid.1020
	}
}

# Landless or Landed
el_cid_landless_or_landed_on_action = {
	random_events = {
		# You have some money - send gift?
		100 = cid.1030
		# You pray for your liege
		100 = cid.1040
		# cid.2000 triggered from the combat on_action
		# cid.2001 triggered from the combat on_action
		# Your liege offers you a favourable marriage
		250 = cid.2010
	}
}
	}
}

"common/on_action/combat_on_actions.txt" = {
	{
		#If you are el Cid you get a special events
		if = {
			limit = {
				side_primary_participant = { has_variable = ongoing_cid_story_cycle }
				enemy_side.side_commander.primary_title = title:k_valencia
			}
			enemy_side.side_commander ?= { save_scope_as = loser }
			side_primary_participant = {
				set_variable = {
					name = cid_title_to_give
					value = prev.enemy_side.side_commander.primary_title
				}
				trigger_event = cid.2000 #Tizona
			}
		}
		else_if = {
			limit = {
				side_primary_participant = { has_variable = ongoing_cid_story_cycle }
				OR = {
					enemy_side.side_commander.primary_title = title:c_barcelona
					enemy_side.side_commander.primary_title = title:d_barcelona
				}
			}
			enemy_side.side_commander ?= { save_scope_as = loser }
			side_primary_participant = {
				set_variable = {
					name = cid_title_to_give
					value = prev.enemy_side.side_commander.primary_title
				}
				trigger_event = cid.2001 #Colada
			}
		}
		else_if = {
			limit = {
				side_primary_participant = { has_variable = ongoing_cid_story_cycle }
			}
			random = {
				chance = 10
				enemy_side.side_commander ?= { save_scope_as = loser }
				side_primary_participant = {
					set_variable = {
						name = cid_title_to_give
						value = prev.enemy_side.side_commander.primary_title
					}
					trigger_event = cid.2000
				}
			}
		}
	}
}

"common/on_action/war_on_actions.txt" = {
	{
		if = {
			limit = {
				scope:attacker = {
					is_ai = no 
					this = character:223523
				}
				scope:defender = {
					this = character:226000
				}
			}
			scope:attacker = {
				add_achievement_global_variable_effect = {
					VARIABLE = finished_kingdom_of_heaven_achievement
					VALUE = yes
				}
			}
		}
	}
	{
		if = {
			limit = {
				scope:defender = {
					is_ai = no 
					this = character:223523
				}
				scope:attacker = {
					this = character:226000
				}
			}
			scope:defender = {
				add_achievement_global_variable_effect = {
					VARIABLE = finished_kingdom_of_heaven_achievement
					VALUE = yes
				}
			}
		}
	}
}

"events/dlc/ep3/ep3_emperor_yearly_8.txt" = {
	{
		# Justinian I for flavor
		character:70512 = { save_scope_as = justinian }
	}

	# Don't reference Leo the Isaurian
	{
		character:70502 = { save_scope_as = leo }
	}
}


"common/scripted_triggers/00_laamp_triggers.txt" = {
	{
disable_interaction_for_hasan_trigger = {
	trigger_if = {
		limit = { scope:recipient = character:41702 }
		custom_tooltip = {
			text = owns_a_story_trigger
			scope:recipient = { owns_story_of_type = story_hasan }
		}
	}
}
	}
}


"common/story_cycles/ep3_story_cycle_el_cid.txt" = {
	{
##################################################
###
### The Song of El Cid
### by Veronica Pazos
###
##################################################

story_el_cid = {
	
	on_setup = {
		story_owner = {
			top_liege = { save_scope_as = liege }
		}
	}
	
	on_end = {
		debug_log = "El Cid's story ended on:"
		debug_log_date = yes
		#We clean up all variables
		story_owner = {
			remove_variable = cid_enemy
			remove_variable = cid_liege
			remove_variable = cid_loyalty_counter
			remove_variable = ongoing_cid_story_cycle
			remove_variable = cid_title_to_give
			#And you can never have this again
			set_variable = had_cid_story_cycle
		}
	}

	on_owner_death = {
		end_story = yes
	}

	# Liege dies 
	effect_group = {
		months = 1

		first_valid = {
			triggered_effect = { #If your liege dies
				trigger = {
					story_owner.var:cid_liege = {
						OR = {
							NOT = { exists = this }
							is_alive = no
						}
					}
				}
				effect = {
					story_owner = {
						trigger_event = cid.5000
					}
				}
			}
		}
	}
	
	effect_group = {
		months = { 6 12 }
		chance = 100

		random_valid = { 
			triggered_effect = {
				trigger = { # Landless events
					story_owner = {
						has_government = landless_adventurer_government
					}
				}
				effect = {
					story_owner = {
						var:cid_liege = { save_scope_as = liege }
						var:cid_enemy = { save_scope_as = enemy }
						trigger_event = { on_action = el_cid_landless_on_action }
					}
				}
			}
			triggered_effect = {
				trigger = { # Landless OR Landed events
					always = yes
				}
				effect = {
					story_owner = {
						var:cid_liege = { save_scope_as = liege }
						var:cid_enemy = { save_scope_as = enemy }
						trigger_event = { on_action = el_cid_landless_or_landed_on_action }
					}
				}
			}
		}
	}
	
	# Endings
	effect_group = {
		months = 3

		first_valid = { #Your liege takes you back
			triggered_effect = {
				trigger = {
					story_owner = {
						var:cid_loyalty_counter >= 5
						is_landless_adventurer = yes
					}
				}
				effect = {
					story_owner = {
						trigger_event = cid.2020
					}
				}
			}
			triggered_effect = { #Your liege hates you
				trigger = {
					story_owner = {
						var:cid_loyalty_counter <= -5
						is_landless_adventurer = yes
					}
				}
				effect = {
					story_owner = {
						trigger_event = cid.4010
					}
				}
			}
			triggered_effect = { #Neutral ending
				trigger = {
					story_owner = {
						var:cid_loyalty_counter > -5
						var:cid_loyalty_counter < 5
						has_variable = had_cid_1000
						has_variable = had_cid_1030
						has_variable = had_cid_1040
						trigger_if = {
							limit = {
								any_courtier = {
									is_adult = yes
									NOR = {
										is_close_family_of = prev
										is_spouse_of = prev
									}
									count >= 2
								}
							}
							has_variable = had_cid_1010
						}
						trigger_if = {
							limit = {
								any_courtier = {
									is_spouse_of = prev
								}
							}
							has_variable = had_cid_1020
						}
						trigger_if = {
							limit = {
								any_child = {
									is_betrothed = no
								}
							}
							has_variable = had_cid_2010
						}
					}
				}
				effect = {
					story_owner = {
						trigger_event = cid.4000
					}
				}
			}
		}
	}
}
	}
}

"common/customizable_localization/00_travel.txt" = {
	# Anachronistic.
	{
	text = { # Offa's Dyke
		trigger = {
			has_special_building = yes
			#OR = {
			#	this = province:1643 # Cheshire
			#	this = province:1646 # Shropshire
			#	this = province:1648 # Bishop's Castle
			#	this = province:1580 # Gloucester
			#	this = province:1632 # Hereford
			#	this = province:1633 # Wigmore
			#	this = province:1634 # Clifford
			#}
			has_building_or_higher = offas_dyke_01
		}
		setup_scope = {
			character:205072 = { save_scope_as = offa }
		}
		localization_key = building_offas_dyke_destination_desc
	}
	}

	{
	text = { # Palace of Aachen
		trigger = {
			has_special_building = yes
			#this = province:2092 # Aachen
			has_building_or_higher = palace_of_aachen_01
		}
		localization_key = building_palace_of_aachen_destination_desc
		setup_scope = {
			character:6392 = { save_scope_as = charlemagne }
		}
	}
	}

	{
	text = { # Ananda Temple
		trigger = {
			has_special_building = yes
			#this = province:9550 # Pagan
			has_building_or_higher = ananda_temple_01
		}
		localization_key = building_ananda_temple_destination_desc
		setup_scope = {
			dynasty:2000000 = { save_scope_as = pagan_dynasty }
		}
	}
	}

	{
	text = { # Brihadeeswarar Temple
		trigger = {
			has_special_building = yes
			#this = province:1115 # Cholamandalam
			has_building_or_higher = brihadeeswarar_temple_01
		}
		localization_key = building_brihadeeswarar_temple_destination_desc
		setup_scope = {
			dynasty:1043008 = { save_scope_as = chola_dynasty }
		}
	}
	}
}

"events/dlc/ep3/ep3_laamp_flavour_ewan_events.txt" = {
	# Easter egg, causes errors in TFE.
	{
			# Cannibal (Chad)
			50 = {
				trigger = {
					can_start_single_combat_trigger = yes
					character:easteregg_chad_uhl ?= {
						is_alive = yes
						location ?= root.location
						is_pool_character = yes
					}
				}
				save_scope_value_as = {
					name = hunter_type
					value = flag:cannibal_chad
				}
				ep3_laamp_flavour_ewan_4061_roll_animal_size_effect = {
					MIN = 1
					MAX = 1
				}
				# Nab our cannibal.
				character:easteregg_chad_uhl = { save_scope_as = cannibal }
			}
	}

	{
			# Log if it was Chad who lost.
			if = {
				limit = { character:easteregg_chad_uhl ?= scope:sc_loser }
				trigger_event = ep3_laamp_flavour_ewan.4065
			}
			# Or Anna.
			else_if = {
				limit = { character:easteregg_anna_johansson ?= scope:sc_loser }
				trigger_event = ep3_laamp_flavour_ewan.4067
			}
	}
	{
		# Log if it was Chad who won.
		else_if = {
			limit = { character:easteregg_chad_uhl ?= scope:sc_victor }
			trigger_event = ep3_laamp_flavour_ewan.4066
		}
	}
}


"common/scripted_effects/07_dlc_ep3_scripted_effects.txt" = {
	{
	if = {
		limit = {
			any_owned_story = {
				story_type = story_hasan
			}
		}
		custom_tooltip = {
			text = advance_to_the_assassins_tt
			random_owned_story = {
				limit = {
					story_type = story_hasan
				}
				if = {
					limit = {
						exists = var:radical_points
					}
					change_variable = {
						name = radical_points
						add = 1
					}
				}
				else = {
					set_variable = {
						name = radical_points
						value = 1
					}
				}
			}
		}
	}
	}

	{
hasan_sabbah_ignite_decision_effect = {
	if = {
		limit = {
			hasan_sabbah_event_troops_value <= 1000
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = ayyar
				stacks = 1
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = ayyar
				stacks = 1
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = ayyar
				stacks = 1
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
	}
	else_if = {
		limit = {
			hasan_sabbah_event_troops_value <= 2000
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			men_at_arms = {
				type = ayyar
				stacks = 1
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			men_at_arms = {
				type = ayyar
				stacks = 1
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			men_at_arms = {
				type = ayyar
				stacks = 1
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			men_at_arms = {
				type = ayyar
				stacks = 1
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
	}
	else_if = {
		limit = {
			hasan_sabbah_event_troops_value <= 3000
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 1
			}
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
	}
	else_if = {
		limit = {
			hasan_sabbah_event_troops_value > 3000
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 2
			}
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 2
			}
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 2
			}
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 2
			}
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
		spawn_army = {
			name = hasan_fanatics
			men_at_arms = {
				type = asawira
				stacks = 2
			}
			men_at_arms = {
				type = ayyar
				stacks = 2
			}
			levies = hasan_sabbah_event_troops_value
			inheritable = yes
			location = root.domicile.domicile_location
			war_keep_on_attacker_victory = yes
		}
	}
	start_war = {
		cb = ep3_hasan_assassin_war
		target = root.location.county.holder.top_liege
		target_title = root.location.county.holder.top_liege.primary_title
	}
}
	}

	{
hasan_sabbah_end_war = {
	# Offer Hasan the opportunity to become landed
	hidden_effect = {
		if = {
			limit = {
				$SELJUK$ = {
					any_sub_realm_barony = {
						title_province = { has_building_or_higher = alamut_castle_01 }
					}
				}
			}
			$SELJUK$ = {
				random_sub_realm_barony = {
					limit = {
						title_province = { has_building_or_higher = alamut_castle_01 }
					}
					county = {
						save_scope_as = hasan_home
					}
				}
			}
		}
		else_if = {
			limit = {
				$SELJUK$ = {
					any_sub_realm_county = {
						faith = $HASAN$.faith
						holder = { is_ai = yes }
					}
				}
			}
			$SELJUK$ = {
				random_sub_realm_county = {
					limit = {
						faith = $HASAN$.faith
						holder = { is_ai = yes }
					}
					save_scope_as = hasan_home
				}
			}
		}
		else = {
			$SELJUK$ = {
				random_sub_realm_county = {
					limit = {
						holder = { is_ai = yes }
					}
					save_scope_as = hasan_home
				}
			}
		}
		$HASAN$ = {
			if = {
				limit = {
					any_owned_story = {
						story_type = story_hasan
						exists = var:preferred_caliph
					}
				}
				random_owned_story = {
					limit = { story_type = story_hasan }
					var:preferred_caliph = { save_scope_as = caliph }
				}
			}
			trigger_event = {
				id = hasan_sabbah.1050
			}
			if = {
				limit = {
					is_ai = no
				}
				add_achievement_global_variable_effect = {
					VARIABLE = finished_the_old_man_of_the_mountain_achievement
					VALUE = yes
				}
			}
		}
	}
	create_title_and_vassal_change = {
		type = independency
		save_scope_as = change
	}
	$HASAN$ = {
		add_prestige = medium_prestige_value
	}
	$SELJUK$ = {
		add_prestige = {
			value = medium_prestige_value
			multiply = -1
		}

		every_vassal = {
			limit = {
				highest_held_title_tier > tier_barony
			}
			change_liege_or_become_independent = {
				CHANGE = scope:change
				VASSAL = this
			}
		}

		every_vassal = {
			limit = { is_ai = no }
			send_interface_toast = {
				type = msg_gained_independence
				title = liege_primary_title_dissolution
				desc = liege_primary_title_dissolution_desc
				left_icon = $SELJUK$
			}
		}
	}
	resolve_title_and_vassal_change = scope:change
	$SELJUK$ = {
		every_held_title = {
			limit = {
				tier >= tier_duchy
				is_head_of_faith = no
				NOT = { this = $SELJUK$.capital_county.duchy }
			}
			add_to_temporary_list = titles_to_destroy
		}
	}
	every_in_list = {
		list = titles_to_destroy
		$HASAN$ = {
			destroy_title = prev
		}
	}
	$SELJUK$ = {
		if = {
			limit = {
				government_has_flag = government_is_administrative
			}
			admin_government_reset_effect = yes
		}
	}
	# LEGITIMACY FROM LOSING FACTION WAR
	faction_war_end_defeat_legitimacy_effect = yes
	# End Hasan's story cycle
	hidden_effect = {
		$HASAN$ = {
			if = {
				limit = {
					any_owned_story = {
						story_type = story_hasan
					}
				}
				random_owned_story = {
					limit = {
						story_type = story_hasan
					}
					end_story = yes
				}
			}
		}
	}
}
	}

	{
				character:41702 ?= $PREACHER$
	}
}


"common/on_action/army_on_actions.txt" = {
	{
		game_rule.1021			# Figure out whether we should fire a conclusion event during the Conquest.
	}
}


"common/scripted_effects/00_ep3_decision_effects.txt" = {
	# Anachronistic
	{
apply_historic_administrative_game_rule_effect = {
	# We'll be doing some excessive triggers below in a bid to lightly future-proof + error-spam mods less, don't worry about it.
	## We also do player-specific realms separately — we need to know what their realm is so we do it after the lobby exclusively.
	# Egypt.
	if = {
		limit = {
			NOT = { has_game_rule = historicity_extra_admin_egypt_gameplay_not_administrative }
			exists = title:k_egypt
		}
		if = {
			limit = { has_game_rule = historicity_extra_admin_egypt_historic_always }
			title:k_egypt.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
	}
	# Arabia.
	if = {
		limit = {
			NOT = { has_game_rule = historicity_extra_admin_arabia_gameplay_not_administrative }
			exists = title:e_arabia
		}
		if = {
			limit = { has_game_rule = historicity_extra_admin_arabia_historic_867 }
			# Give the Armenians a fighting chance.
			culture:armenian = { save_scope_as = ignore_culture }
			title:e_arabia.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
	}
	# Ghana.
	if = {
		limit = {
			NOT = { has_game_rule = historicity_extra_admin_ghana_gameplay_not_administrative }
			exists = title:k_ghana
		}
		if = {
			limit = { has_game_rule = historicity_extra_admin_ghana_historic_always }
			title:k_ghana.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
	}
	# Kabulistan/the Ghaznivids.
	if = {
		limit = {
			NOT = { has_game_rule = historicity_extra_admin_kabulistan_gameplay_not_administrative }
			exists = title:k_kabulistan
		}
		if = {
			limit = { has_game_rule = historicity_extra_admin_kabulistan_historic_always }
			title:k_kabulistan.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
	}
	# Persia.
	if = {
		limit = {
			NOT = { has_game_rule = historicity_extra_admin_persia_gameplay_not_administrative }
			exists = title:e_persia
			exists = title:k_persia
		}
		if = {
			limit = {
				game_start_date = 1178.10.1
				has_game_rule = historicity_extra_admin_persia_historic_1178
			}
			title:k_persia.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
		else_if = {
			limit = { has_game_rule = historicity_extra_admin_persia_alt_historic_always }
			# Independent k_persia.
			if = {
				limit = {
					title:k_persia.holder ?= { is_independent_ruler = yes }
				}
				title:k_persia.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
			}
			# Else, the empire.
			else = {
				title:e_persia.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
			}
		}
	}
	# Maghreb.
	if = {
		limit = {
			NOT = { has_game_rule = historicity_extra_admin_maghreb_gameplay_not_administrative }
			exists = title:k_maghreb
		}
		if = {
			limit = {
				game_start_date >= 1066.9.15
				has_game_rule = historicity_extra_admin_maghreb_historic_post_1066
			}
			title:k_maghreb.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
		else_if = {
			limit = { has_game_rule = historicity_extra_admin_maghreb_alt_historic_always }
			title:k_maghreb.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
	}
	# Tamilakam/the Cholas.
	if = {
		limit = {
			NOT = { has_game_rule = historicity_extra_admin_tamilakam_gameplay_not_administrative }
			exists = title:k_tamilakam
		}
		if = {
			limit = {
				game_start_date = 1066.9.15
				has_game_rule = historicity_extra_admin_tamilakam_historic_1066
			}
			title:k_tamilakam.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
		else_if = {
			limit = { has_game_rule = historicity_extra_admin_tamilakam_alt_historic_always }
			title:k_tamilakam.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
	}
	# The Carolingians.
	if = {
		limit = {
			NOT = { has_game_rule = historicity_extra_admin_carolingians_gameplay_not_administrative }
			game_start_date = 867.1.1
			exists = title:k_france
			exists = title:k_lotharingia
			exists = title:k_east_francia
			exists = title:k_italy
		}
		if = {
			limit = { has_game_rule = historicity_extra_admin_carolingians_alt_historic_all_administrative }
			title:k_france.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
			title:k_lotharingia.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
			title:k_east_francia.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
			title:k_italy.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
		if = {
			limit = { has_game_rule = historicity_extra_admin_carolingians_alt_historic_west_francia_administrative }
			title:k_france.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
		if = {
			limit = { has_game_rule = historicity_extra_admin_carolingians_alt_historic_lotharingia_administrative }
			title:k_lotharingia.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
		if = {
			limit = { has_game_rule = historicity_extra_admin_carolingians_alt_historic_east_francia_administrative }
			title:k_east_francia.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
		if = {
			limit = { has_game_rule = historicity_extra_admin_carolingians_alt_historic_italy_administrative }
			title:k_italy.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		}
	}
}
	}
}


"common/scripted_character_templates/00_pool_repopulation_character_templates.txt" = {
	# Prevent random Muslim characters from being spawned.
	{
		else_if = {
			limit = {
				OR = {
					culture = culture:bolghar
					culture = culture:somali
				}
			}
			set_character_faith = faith:ashari
			if = {
				limit = {
					root.capital_county.faith = {
						religion_tag = islam_religion
					}
				}
				set_character_faith = root.capital_county.faith
			}
		}
	}
	{
		else_if = {
			limit = {
				OR = {
					culture = culture:butr
					culture = culture:zaghawa
				}
			}
			random_list = {
				10 = {
					set_character_faith = faith:ibadi
				}
				10 = {
					set_character_faith = faith:sufri
				}
			}
		}
	}
	
	# Prevent random Christian characters from being spawned.
	{
				2 = {
					trigger = {
						root.capital_province.faith = {
							religion_tag = christianity_religion
						}
						root.capital_province = {
							geographical_region = world_europe_west_iberia
						}
					}
					set_character_faith = faith:conversos
				}
	}
	{
		else_if = {
			limit = {
				culture = culture:greek
			}
			random_list = {
				10 = {
					set_character_faith = faith:iconoclast
				}
				10 = {
					set_character_faith = faith:paulician
				}
				10 = {
					set_character_faith = faith:bogomilist
				}
			}
		}
	}
	{
				5 = {
					set_character_faith = faith:nestorian
				}
	}
	{
		else_if = {
			limit = {
				culture = culture:assyrian
			}
			set_character_faith = faith:nestorian
		}
	}
}


"common/scripted_effects/00_tributary_setup_effects.txt" = {
	# This is what gets called at game start to setup tributaries. While this effect will likely get overwritten, I am adding this here just in case to ensure there are no issues.
	{
	if = {
		limit = { has_mpo_dlc_trigger = yes	}
		if = {
    		limit = { current_date < 1066.9.15 } # so, 867
        	mpo_867_tributary_setup_effect = yes
    	}
    	else_if = {
    		limit = { current_date = 1066.9.15 }
        	mpo_1066_tributary_setup_effect = yes
    	}
    	else_if = {
    		limit = { current_date > 1066.9.15 } # so, 1178
        	mpo_1178_tributary_setup_effect = yes
    	}
    }
	if = {
		if = {
    		limit = { current_date < 1066.9.15 } # so, 867
    		base_867_tributary_setup_effect = yes
    	}
    	else_if = {
    		limit = { current_date = 1066.9.15 }
        	base_1066_tributary_setup_effect = yes
    	}
    	else_if = {
    		limit = { current_date > 1066.9.15 } # so, 1178
        	base_1178_tributary_setup_effect = yes
    	}
    }
	}
}


"events/decisions_events/mpo_greatest_of_khans_events.txt" = {
	
	# Modifier for ai_chance block for choices on what nickname to choose when becoming Greatest of Khans. Removing it to prevent any possible conflicts with converted save.
	{
			modifier = {
				factor = 100
				this = character:125501
			}
	}
}
